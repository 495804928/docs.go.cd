[{"title":"Multiple Agents on One Machine","href":"/advanced_usage/admin_install_multiple_agents.html","content":"Install multiple agents on the same machine In order to fully utilize your hardware it is often useful to install multiple agents on a single machine Currently GoCD installers do not support this out of the box The following sections describe how this can be done manually Windows On Windows multiple GoCD agents can be run in two ways as Windows service or as a Windows command Running as Windows service Install your first agent with the installer to the default location Copy the installation folder quotCProgram FilesGo Agentquot to quotCProgram FilesGo Agent 2quot Delete the file CProgram FilesGo Agent 2configguidtxt Delete the file CProgram FilesGo Agent 2agentbootstrapperrunning Edit wrapperagentconf file to customise information related to Go Agent 2 Just after the line include confwrapperlicenseconf add setGOAGENTDIRCProgram FilesGo Agent 2 setGOAGENTJAVAHOMEGOAGENTDIRjre Run the following command sc create GoAgent2 binPath quotquotCProgram FilesGo Agent 2cruisewrapperexequot s quotCProgram FilesGo Agent 2configwrapperagentconfquotquot Start quotGoAgent2quot service Running as Windows command Follow the instructions to run Go without installation on Windows Do the same steps on a different folder to set up another agent You should use a VNC application such as TightVNC to keep windows user logged in If the user logs out or the computer restarts the agents will shutdown Mac OSX Install your first agent with the installer Assuming your first agent in at ApplicationsGo Agentapp copy that to another location say ApplicationsGo Agent 2app Once you do that you can start the application like this GOAPPLICATIONNAMEquotGo Agent 2quot open ApplicationsGo Agent 2app The logs and other files related to the second agent should be available at quotltuserhomegtLibraryApplication SupportGo Agent 2quot and the icon in the dock will be called quotGo Agent 2quot as well It is also possible to edit the file ApplicationsGo Agent 2appContentsInfoplist to change the CFBundleName property However that is not recommended since it invalidates the signature of the application package and could cause Apple Gatekeeper to warn you that the new agent is an invalid application Linux RPM and DEB Install your first agent with the installer To create a second agent on the same host run this as root cp etcinitdgoagent etcinitdgoagent1 sed i s Provides goagent Provides goagent1g etcinitdgoagent1 ln s usrsharegoagent usrsharegoagent1 cp p etcdefaultgoagent etcdefaultgoagent1 mkdir varlibloggoagent1 chown gogo varlibloggoagent1 To enable starting the goagent service during system boot on Debian insserv goagent1 on Ubuntu updatercd goagent1 defaults on Centos and Redhat chkconfig goagent1 on You can now start or stop the second agent using etcinitdgoagent1 passing it the start or stop arguments as usual Logs will be written to varloggoagent1 Repeat this process for more agents Just change the suffix quot1quot to quot2quot and so on Linux nonRPM nonDEB and other UNIXes Install your first agent with the installer Make an empty folder called varlibgoagent2 In this folder run java jar usrsharegoagentagentbootstrapperjar serverUrl https127001go amp "},{"title":"Spawn multiple instances of a Job","href":"/advanced_usage/admin_spawn_multiple_jobs.html","content":"Run a Job on a group of Agents Sometimes there is a particular job that you may wish to run on all agents in an environment or in all agents that match a certain resource tag For example you may want to run a system update on all linux agents or install a new piece of software GoCD will run the Job on all agents that match the environment and resources specified in the job If an agent is missing or lost contact a job will be scheduled When the agent comes back on line the job will be rescheduled Jobs are given a unique name based on the name of the job in the configuration file So for example if the job is called deploy and you have two agents you would see jobs like deployrunOnAll1 and deployrunOnAll2 Configure through the Admin UI To enable run on all agents for a job navigate to the Job settings page in the job configuration Configure through the Config XML To specify that a job should run on all agents add the attribute runOnAllAgentsquottruequot to the jobs definition see configuration reference for ltjobgt ltjob namequotdeployquot runOnAllAgentsquottruequotgt ltjobgt Run X instances of a Job If you want to run multiple instances of the same job configuration you do not have to maintain multiple copies of same job config You can specify how many instances of job you need amp Go will take care of spawing the required number of job instances during scheduling This feature is particularly useful for test parallelization It enables Go users to integrate with other test parallelization tools like TLB etc to achieve distributed test execution with minimal configuration Jobs are given a unique name based on the name of the job in the configuration file Example if the job is called test and you have set runInstanceCount to 2 you would see jobs like testrunInstance1 and testrunInstance2 Go provides index of job GOJOBRUNINDEX amp total count of jobs GOJOBRUNCOUNT as environment variables to each Job Configure through the Admin UI To run x instances of a job navigate to the Job settings page in the job configuration Configure through the Config XML To specify that x instances of a job should run add the attribute runInstanceCountquot5quot to the jobs definition see configuration reference for ltjobgt ltjob namequottestquot runInstanceCountquot5quotgt ltjobgt Also See Rerunning jobs "},{"title":"Agent Health Check API","href":"/advanced_usage/agent-health-check-api.html","content":"Agent Health Check API Note Using this feature requires atleast version 17110 of the GoCD server and agent The health check API allows users to monitor if the agent is connected to the server and is authorized to perform a build Configurations The API uses the following configurable agent system properties Property Values "},{"title":"Auto Register a Remote Agent","href":"/advanced_usage/agent_auto_register.html","content":"Auto registration of remote agents As a GoCD administrator you can auto approve remote agents by using a shared key between the GoCD Agent and GoCD Server Add an attribute named quotagentAutoRegisterKeyquot for eg agentAutoRegisterKeyquot388b633a88de126531afa41eff9aa69equot in the server configuration fragment in case it is not present ltxml versionquot10quot encodingquotutf8quotgt ltcruise xmlnsxsiquothttpwwww3org2001XMLSchemainstancequot xsinoNamespaceSchemaLocationquotcruiseconfigxsdquot schemaVersionquot75quotgt ltserver agentAutoRegisterKeyquot388b633a88de126531afa41eff9aa69equotgt ltcruisegt On the remote GoCD Agent machine create a file named ltagentinstallationdirectorygtconfigautoregisterproperties This file supports the following properties Key Required Description "},{"title":"Command Repository","href":"/advanced_usage/command_repository.html","content":"GoCD Command Repository Introduction This feature is an enhancement to Custom Commands in GoCD Rather than start from scratch with command name and arguments you now have the option to look up a command from a repository of useful commands maintained by the Go team The lookup provides a starting point you may need to edit the arguments specify a working directory etc Once saved the behaviour is the same as a manually entered custom command Take a look at this video to learn more Using the command repository This feature can be used anywhere you need to specify a custom command Add a new pipeline Add a new stage to a pipeline Add a new job to a stage Add a new task to a job Edit a task Custom commands and agents Go does not check if the command that you have specified is available on the agents Install the relevant command on all the agents where you want it to run If it is not available on the default path add it to the path in etcdefaultgoagent or equivalent This requires an agent restart Alternatively create a symbolic link to the path to the executable from bin or equivalent folder This doesnt require an agent restart Args style commands The older args style commands are not supported by this feature Please convert them to the new syntax using the config xml editor Admin gt Config XML For example ltexec commandquottouchquot argsquota b cquotgt becomes ltexec commandquottouchquotgt ltarggtaltarggt ltarggtbltarggt ltarggtcltarggt ltexecgt Bundled Repository The default set of commands come from httpsgithubcomgocdgocommandrepo This repository is maintained by the Go team The Go server installer bundles a clone of this Git repository under ltserverinstallrootgtdbcommandrepositorydefault Every upgrade of Go Server will overwrite the contents of this directory with an up to date set of commands Hence please do not add your commands here Instead set up a private repository Pulling Updates Go team will continue to add and sometimes update commands to the repository on GitHub If you want to make these commands available to your Go server without waiting for a new release or without upgrading your Go server you could git pull them into ltgoserverinstallrootgtdbcommandrepositorydefault as desired LinuxUnix Here is a simple cron tab entry that you could add to Go service accounts cron tab to pull commands once a day daily cd lt goserverinstallroot gtdbcommandrepositorydefaultgit pull gtgtvargocronrun 2gtamp1 Caution Dont pull as rootadministrator Use the Go service account Windows On Windows you could set up a scheduled task to run this script on a schedule echo date time gtgtcpulllogtxt 2gtamp1 cd quotCProgram Files x86Go Serverdbcommandrepositorydefaultquot git pull gtgtcpulllogtxt 2gtamp1 Go caches these commands with a refresh interval of 30 minutes so you may not see the results of a pull immediately in the lookup unless you hit the reload cache button under the command repository section on the server configuration admin page Via API You may make a POST request to the path goapiadmincommandrepocachereload in order to update the command repository with the latest curl u usernamepassword X POST H Confirm true httpgoservercom8153goapiadmincommandrepocachereload Private Repository If you want to add your own commands for look up you should set up your own GitMercurialSubversionPerforceTFS repository that your command authors can commitcheckin into Make a cloneworking copy available under ltgoserverinstallrootgtdbcommandrepositoryltyourreponamegt Symbolic links are not supported Then switch Go Server to this location To do this go to Command Repository Management section of Server Configuration in Admin tab and change the default value From the Go servers point of view the command repository is just a directory under which it recursively looks for valid commandxml files Note that directory names starting with a dot will be ignored Go will not lookup from the bundled repository if you switch to your own repository You could choose to manually seed your private command repository with Gos bundled set of commands if you want to have them in addition to your own commands Recommended process Command author pusheschecksin command to corporate version control system Cron job on Goserver pullsupdates local repositoryworking copy in due course Go Server caches the commands to improve response time In case of changes in the command repository new command gets into the cache in one of the following ways The default cache invalidation interval of 30 mins kicks in and the cache gets refreshed Go server admin clicks on the RELOAD CACHE button Go server admin uses the reload API through a cron job or otherwise to force a cache reload The commands in the command repository are not part of your Go Server config They become part of your Go server config only after you optionally edit and save them Command syntax and lookup logic The above screenshot resulted from the command below lt name curl description Download from a protected Url and saveToFile author Go Team authorinfo httpsupportthoughtworkscomcategories20002778gocommunitysupport keywords curl http download wget moreinfo httpcurlhaxxsedocsmanualhtml gt ltexec commandquotcurlquotgt ltarggtoltarggt ltarggtsaveToFileltarggt ltarggtultarggt ltarggtuserpasswordltarggt ltarggthttptargeturlltarggt ltexecgt This is an example of valid command syntax The command attribute is mandatory No other attributes are valid Zero or more arg child elements can be specified No other child elements are allowed One command file may only contain one command Please refer the README for full command and documentation syntax When you lookup a command the following logic is used to sort the resulting suggestions Exact matches of name in command documentation or filename if name missing Partial startswith matches of name in command documentation or filename if name missing Exact matches of keywords in command documentation Within each category the sorting is alphabetical Contributing Commands We welcome commands contributed by users Simply fork this GitHub repo Clone it locally Commit and push your change Send us a pull request Accepted commands will be bundled into the next release"},{"title":"Compare Builds","href":"/advanced_usage/compare_pipelines.html","content":"Compare Builds GoCD allows you to compare any two builds of a pipeline and see exactly what changes happened between those two instances The information in this view will include Code checkins Upstream pipelines Storydefect numbers when linked to a tracking tool Accessing Pipeline Compare There are several locations from where the Pipeline Compare feature can be invoked These include Pipelines Dashboard page the quotComparequot link in each pipeline Environments page Stage Details page Stage History widget within the Stage Details page Understanding the Pipeline Compare Screen The Pipeline Compare screen lets you compare any two instances of a pipeline Every pipeline instance is associated with a set of changes be it a source control modification or an upstream pipeline Performing a compare lets you easily identify exactly what these changes were Tofrom search box You can search for the appropriate pipeline instance using any of the following pipeline label checkin comment person who checked in upstream pipeline label and revision Upstream dependency changes All the changes to upstream pipelines within the search range Changes to version control systems All checkins that went into dependent VCS materials within the search range Tracking tool integration If youve configured a tracking tool integration for this pipeline or any upstream pipelines checkin comments containing storydefectticket numbers would be hyperlinked to the appropriate tracking tool Using Pipeline History You can also select a pipeline by browsing the pipeline history Steps to select a particular instance from the history Click on the search box Click on quotBrowse the timelinequot Browse the history and select a pipeline "},{"title":"Config Repository","href":"/advanced_usage/config_repo.html","content":"GoCD Configuration repository GoCDs configuration is version controlled in a local git repository configgit hosted on the same machine as the GoCD server The repo is available at ltGoCD server installation directorygtdbconfiggit Any changes to the config either through filesystem API or GoCD configuration UI is saved as a new commit in this repo This allows auditing of all changes made to the configuration NOTE This repo must not be altered externally as this will lead to errors in GoCD Garbage collection With time this repository grows in size and can considerably slow down config save operations One way to tackle this is to run git gc manually on the repo read more However doing this at the wrong time say when the server is running and trying to finish a config save operation can cause problems So GoCD has inbuilt garbage collection for this git repository and it can be configured to run on a periodic basis However since this activity can potentially take a long time to run when GC happens for the first time around the feature is turned off by default GoCD server periodically checks if the looseobject count exceeds a preset threshold and displays a warning message This is a cue for users to enable periodic GC on their servers Here are the steps you need to follow and in this order to enable periodic GC for the config repository Stop the GoCD server Take a backup of the whole configgit directory rememeber there is a hidden git directory in it Run git gc manually once in that directory as the user that the GoCD server runs under On UnixLinux this is usually the quotgoquot user Do not run this as the root user If you do make sure that you run chown R gogo pathtoconfiggit to make sure that the ownership of that directory is proper Once youve done that you can now set these system properties mentioned below to change the behavior of the periodic garbage collection At the very least you should set the goconfigrepogcperiodic system property to Y so that it is enabled You can refer to the documentation to find out how to set these arguments for your Windows and Linux servers Start the server and verify that the properties youve set are reflected in the system The section at the end of this page has details about it System properties that affect periodic garbage collection Property goconfigrepogcperiodic Default value N This enables the periodic garbage collection of configgit repo To enable this feature set the value to Y Property goconfigrepogcaggressive Default value Y This option will cause GC to more aggressively optimize the repository at the expense of taking much more time It can be made nonaggressive by setting this value to N It is recommended to set this option to N if the system property goconfigrepogccron is set up to run git gc frequently Property goconfigrepogccron Default value 0 0 7 SUN Cron expression to specify garbage collector execution time with default set to 700 am on sundays Check documentation for help on cron syntax For linux users while overriding goconfigrepogccron you need to escape special shell characters such using a backwardslash For example GOSERVERSYSTEMPROPERTIESquotGOSERVERSYSTEMPROPERTIES Dgoconfigrepogccron0 0 7 11 quot The above cron will set to run git gc at 7 am every day for every month Property goconfigrepogcwarninglooseobjectthreshold Default value 10000 If loose object count grows beyond this threshold a warning is displayed in the server health messages popup Property goconfigrepogcexpire Default value 24 hours This option will specify the expiration time for git gc so that each unreferenced loose object which has been created or modified after or at the time specified will not be pruned Only older objects may be pruned Specify this propery in hours Property goconfigrepogccheckinterval Default value 28800000 Frequency of checking for loose object count specified in milliseconds with default set to 8 hours Verifying that these properties are set Once youve set the properties with the values you want you should verify that the values reflect accurately on the server when it comes back up As an administrator if you access goapisupport meaning httpyourgoservergoapisupport then you should be able to find those properties in that page with the values you set If you dont see them or see them with wrong values youll need to see whether youve set them correctly"},{"title":"Timer Based GoCD Server Backup","href":"/advanced_usage/cron_backup.html","content":"Perform GoCD server backups on a schedule To run a GoCD server backup at a given time use a timer Timers understand a cronlike specification for when to perform a backup The GoCD server can be optionally configured to invoke a postbackup script to allow you to copy the backup to an external machine or service like AWS S3 The post backup script The post backup script if configured will be invoked regardless of success or failure of the script and will receive the following environment variables Name Description "},{"title":"Clean on Task Cancel","href":"/advanced_usage/dev_clean_up_when_cancel.html","content":"Clean up after canceling a task When you have jobs that take a long time to run it is very useful to have the capability to cancel it when you already know it will fail By default GoCD will kill any currently running tasks There are two other alternatives to this behaviour Specify a task to clean up your environment This could kill the processes and cleanup any existing state Indicate to GoCD you do not want anything done This will allow the task to finish executing so the agent does not get into an inconsistent state Using web interface To perform a custom cleanup through the web interface edit the desired task configuration and check the On Cancel Task checkbox in Advanced Options Using XML configuration Example Override task to perform custom cleanup Usage As a developer I want to stop running my Twist tests and clean up the environment on each job when I cancel the stage On the Administration Tab edit the jobs that should handle canceling correctly Ensure the following quottaskquot block is in the job configuration Now whenever you cancel the stage while the jobs are running the ant quottwistquot target the target quotkilltwistquot will execute Example Override task to disable all cleanup Usage As a developer I want to allow my database tests to not be halted when I cancel the stage On the Administration Tab edit the jobs that should handle canceling correctly Ensure the following quottaskquot block is in the job configuration Now whenever you cancel the stage while the jobs are running the rake quotdbtestquot target the agent will finish the task before picking up new work "},{"title":"Conditional Task Execution","href":"/advanced_usage/dev_conditional_task_execution.html","content":"Conditional task execution At times there are certain steps you need to execute only when you know that the build has already failed For example when a test suite fails you might want to output additional environment information to the console output Using web interface Check the appropriate Run if conditions when defining the Task Using XML configuration Usage As a developer I want to run a task only when the build has already failed On the Administration Tab edit the jobs that should run a task when the build has failed Ensure the following quottaskquot block is in the job configuration Now we will get extra output only when the tests fail Also See Rerunning jobs "},{"title":"Fan In","href":"/advanced_usage/fan_in.html","content":"GoCD Fanin Dependency Management GoCD supports fanin dependency resolution for pipelines that are on auto trigger Fanin material resolution will ensure that a pipeline triggers only when all its upstream pipelines have triggered off the same version of an ancestor pipeline or material This will be the case when you have multiple components building in separate pipelines which all have the same ancestor and you want downstream pipelines to all use the same version of the artifact from the ancestor pipeline When you have non trivial pipeline dependency graphs significant differences in pipeline execution times and automatic buildsdeployments you may typically run into the following issues Wasted builds Premature runs which do not have the right version of dependent components because one of the dependent pipelines was faster than the rest Inconsistent results Your deployment that depends on multiple components may have incompatible versions of components because the build times of these components are different Incorrect feedback Your deployment to Production should happen only when it has successfully passed the UAT Staging and PreProd environments but it was triggered prematurely as soon as UAT went green Running code with the wrong tests Your commit to SCM contains both code and tests written for the code Your pipelines are modeled such that your acceptance or test pipeline runs after the build pipeline Acceptance has to run with the right tests for the code but instead it triggers as soon as the commit goes through with the previous available version for tests GoCD helps solve all of the above problems How to use fanin In cases where your SCM material is used throughout the process you will need to define the same URL for the material throughout This will let GoCD know that it is a shared material and GoCD will enforce fanin wherever applicable For example code tests environment configuration are in httpsvncompanycomcode httpsvncompanycomtests and httpsvncompanycomconfig respectively In this case ensure for pipelines that need these materials the url is set to the same value For example the pipelines Build Acceptance and Deploy have the material url httpsvncompanycom Pipelines where fanin dependency resolution is required will need to have trigger type set as auto Example use cases for fanin resolution Creating a gate to production I want to push a build into a number of environments in parallel Manual QA UAT for business sign off and performance testing so that all these activities happen at the same time So we have a pipeline dependency model as shown below For the next step when deploying to production we have a pipeline that depends on all 3 of the above pipeline so that a build that has succeeded in all 3 environments is automatically pushed to production This is shown below Sequence of Events and Resolution A new build is generated The build is pushed to QA UAT and performance pipelines Regardless of the time taken in each of these pipelines GoCD will ensure that production is triggered only after all three pipelines go green with the same version of build Production will use the right version of your build artifacts How to configure Production should have trigger type as auto QA UAT and Performance should have Build as a material Trigger type for these pipelines can be either manual or auto Picking the right version of dependent components I have three component pipelines C1 C2 C3 and a package pipeline that fetches their artifacts and creates a deploy package Components C2 and C3 depend on pipeline C1 and have it as a material The pipeline for C2 builds quickly but C3 takes a while So we have a pipeline dependency model as shown below The package pipeline should not trigger as soon as C2 is done It should trigger only if both C2 and C3 go green Additionally Package should use the same version of C1 that was used by C2 and C3 Sequence of Events and Resolution C1 is triggered on a change C2 and C3 are triggered after C1 is successful C2 builds quickly but C3 is still in Progress Go resolves that C3 and C2 depend on a common ancestor C1 Hence GoCD will wait for C3 to finish If C3 goes green the Package pipeline will trigger It will use the right versions of C1 C2 and C3 How to configure Add C1 as a material for pipelines C2 and C3 Add C2 and C3 as materials for pipeline Package Package should have trigger type as auto Test source code with the right version of tests You checkin code and tests as part of the same commit The build pipeline compiles code and creates an artifact The Acceptance pipeline fetches the build artifact and runs the tests that were written for the compiled code Acceptance has to use the same tests committed with the code So we have a pipeline dependency model as shown below Sequence of Events and Resolution On committing the changes the Build pipeline will trigger with the latest revision Although Acceptance also has the same material dependency GoCD will not trigger it immediately Build pipeline executes successfully Acceptance will now trigger with the same version of the SCM and fetch the right build artifact from the Build pipeline How to configure Add the same SCM material to pipelines Build and Acceptance ie the same URL Pipelines Build and Acceptance have trigger type as auto Limitations Fanin and blacklist If the pipelines contributing to the fanin have blacklist in their material definitions the target pipeline does not adhere to fanin behavior For example refer to the scenario above P1 and P2 are two pipelines which use the same mercurial hg repository with two folders say quotp1quot and quotp2quot P1 is configured with quotp2quot folder in the blacklist Likewise P2 is configured with quotp1quot folder in the blacklist The first run of P1 happens when a checkin happens in quotp1quot folder The first run of P2 happens when there is a checkin to quotp2quot In this scenario P3 which is dependant on P1 and P2 does not trigger Notes Fanin as a feature is enabled by default In case you need pipelines to trigger with every version regardless of ancestor versions you can disable fanin To disable fanin you will need to add a system property and restart the GoCD server On linux add the following line to etcdefaultgoserver export GOSERVERSYSTEMPROPERTIESDresolvefaninrevisionsN On windows in the config folder of the GoCD server installation edit the wrapperserverconf file and add an additional property with the value DresolvefaninrevisionsN For example wrapperjavaadditional17DresolvefaninrevisionsN GoCD will apply fanin dependency resolution for pipelines that have auto trigger type only "},{"title":"Logging","href":"/advanced_usage/logging.html","content":"Logging lt toc gt Introduction You can turn on additional logging to diagnose and troubleshoot issues with the GoCD server and agent Log location To change where the GoCD server logs or GoCD agent logs are stored use the system properties gocdserverlogdir and gocdagentlogdir respectively Refer to the system properties documentation to find out how to set the system property on the gocd server or agent Note The system property deals with configuring the log location for the GoCD server or agent related logs and not the plugin logs GoCD Server To turn on additional logging on the GoCD server you must createedit the file CONFIGDIRlogbackincludexml The config directory is typically etcgo on Linux and CProgram FilesGo Serverconfig on Windows See the section Log configuration syntax for the log configuration syntax The table below describes the various loggers that can be configured with the server Logger Additivity Description "},{"title":"Maintenance Mode","href":"/advanced_usage/maintenance_mode.html","content":"Maintenance Mode Note Using this feature requires atleast version 1910 of the GoCD server The GoCD system includes a lot of internal subsystems and processes which continuously do work Some examples include the material subsystem which takes care of polling for materials the scheduling subsystem which automatically starts pipelines and stages the agent subsystem which continuously keeps tracks of agent states and provides them jobs to run etc Maintenance mode is a maintenance mode which can be utilized by the GoCD system administrator to safely restart or upgrade the GoCD server without having any running jobs reschedule when the server is back up The maintenance mode implementation Stops the material subsystem so that no new materials are polled Waits for currently polling materials to finish Does not allow pipelinesascode repositories to be polled Stops the scheduling subsystem so that no new pipelines are triggered automatically or through timers Prevents users from triggering pipelines Prevents users from modifying config Prevents users from almost all activity which can modify state in the database or filesystem Stops the agent subsystem so that no agents can pick up work if theyre idle Allows all agents currently busy running jobs to finish Provides a single location to put GoCD into or bring it out of maintenance mode Provides a single location to see the status of all the subsystems when in maintenance mode Provides an API call to put GoCD into or bring it out of maintenance mode Shows state of materials which are being polled currently Shows state of agents which are currently running jobs Shows a banner near the footer of all pages which tells everyone that the server is in maintenance mode Indicate when a server is safe to restart or upgrade finished maintenanceing In Progress Maintenance Mode After initiating maintenance mode several subsystems of GoCD might still be in progress Example scheduled jobs building jobs material updates etc In such cases GoCD Administrators can choose to cancel building scheduled jobs or wait for there completion Cancelling inprogress material updates might cause repository corruption due to partial clone and have side effects on pipeline scheduling Hence GoCD does not allow cancellation of MDUs even during maintenance mode GoCD administrators should wait until all material updates are completed Maintenance Mode Completion After all the subsystems of GoCD are stopped during maintenance mode GoCD server can be considered completely maintenanceed and is ready for a restart or an upgrade NOTE Upon a restart the GoCD server will no longer be in maintenance mode and will start all subsystems The maintenance mode API allows GoCD Administrators to enable disable and monitor the server maintenance mode state"},{"title":"Backup GoCD Server","href":"/advanced_usage/one_click_backup.html","content":"Backup GoCD Server You can use GoCDs administration interface to perform an OneClick Backup of Go You can also perform the backup using the API Steps to initiate backup On the GoCD Administration page click on the Backup tab Click on quotBACKUPquot Click quotPROCEEDquot GoCD will be unusable during the backup process Backup time is proportional to the database and configuration size We suggest you backup GoCD when the GoCD Server is idle Users who are logged into the GoCD Dashboard will be redirected to a maintenance page during the backup On backup completion they will be redirected to the page they were on If you are using PostgreSQL Addon please refer to our documentation here for back and restore process What is backed up The backup will be performed into the ARTIFACTREPOSITORYLOCATIONserverBackups directory ARTIFACTREPOSITORYLOCATION for your server can be found as mentioned here The backup directory will be named backupTIMESTAMP where the TIMESTAMP is the time when the backup was initiated Database This is in a zip called dbzip The zip has a single DB file called cruiseh2db Configuration This is in a zip called configdirzip This zip contains the XML configuration Jetty server configuration Keystores and all other GoCDs internal configurations XML Configuration Version Repo This is in a zip called configrepozip This zip contains the Git repository of the XML configuration file GoCD version This is a file called versiontxt This file contains the version of the GoCD server when the backup was initiated What is not backed up Please refer to the this page to see what the SERVERINSTALLATIONDIR location is on different platforms The following are not backed up as a part of the GoCD backup process Please ensure that these are manually backed up regularly Artifacts Please refer to this section to find out how to deal with artifacts Test Reporting Data This is found at the location SERVERINSTALLATIONDIRdbshine This contains the data used in the Failed Test History reporting Environment Variables On Windows the environment variables that might be set for the user and on Linux the changes made to etcdefaultgoserver are not backed up Log Files Plugins These are found at SERVERINSTALLATIONDIRplugins This contains both the external and bundled plugins Addons These are found at SERVERINSTALLATIONDIRaddons This contains installed addons Strategy to backup Artifacts and Test Reporting Data Artifacts and the Test Reporting Data keep getting new files and directories added to them So it is a good idea to use rsync to copy the contents of these two into a backup location For Instance Lets say you have a copy of all the files till 12022012 in a location On 20022012 you can do something like rsync avzP ARTIFACTLOCATION BACKUPLOCATION This makes sure that only the files and directories that got newly added will be synced to the BACKUPLOCATION and not the entire contents Restoring GoCD using backup Please refer to the this page to see what the SERVERINSTALLATIONDIR location is on different platforms The restoration process is not automated and needs to be done manually Please refer to the previous sections about the contents of the backup Steps to restore In order to restore the GoCD server from a backup the server must first be stopped Make sure the process is completely dead before starting the restoration Choose the backup directory that you want to restore from You cannot restore from a backup whose version is bigger than the version of the GoCD server being usedltbrgt For example If the backup is from version 123 and the server installation is of version 122 the restoration might not work You can check the version of the backup from the versiontxt file You might want to keep a copy of all the files and directories that are involved in restoration This will help in troubleshooting if there was a problem Following this make sure all the destination directories mentioned in the following steps are emptyltbrgt For example Before restoring the Database make sure the SERVERINSTALLATIONDIRdbh2db is backed up and the directory is emptied Database Unzip the dbzip found in the backup directory Unzip will create a file called cruiseh2db Copy this file to the directory SERVERINSTALLATIONDIRdbh2db Configuration Unzip the configdirzip into a temp directory Copy all the files from this directory to SERVERINSTALLATIONDIRconfig directory on Windows and Mac or etcgo on Linux Configuration History Unzip the configrepozip into temp directory Recursively copy all the contents from this directory to SERVERINSTALLATIONDIRdbconfiggit Make sure the ownership of all the files that are restored are the same as the user running the Go serverltbrgt For example Make sure you run a quotchown R gogo SERVERINSTALLATIONDIRdbh2dbquot after Database restoration Start the GoCD server "},{"title":"Other Config Options","href":"/advanced_usage/other_config_options.html","content":"Other config options This is a list of some of the more advanced configuration options available These will typically need to be set before the start of the GoCD Server unless specified How to set these options Environment variables If an option specified below is of type quotEnvironment Variablequot then it needs to be made available to the GoCD Server in a way that is specified by the operating system or distribution For instance on Windows here is a page from Microsft explaining how to do this On Linux you can use the etcdefaultgoserver file since it gets sourced by the GoCD Server before it starts A line like this export ENVIRONMENTVAR1quotMy variablequot will make that variable ENVIRONMENTVAR1 available to the GoCD Server If youre using the ZIP package and starting the GoCD Server manually you can use an appropriate mechanism to set the environment variable could be a DOS batch file or a shell script System properties If an option specified below is of type quotSystem propertyquot then it will be a Java system property which needs to be provided to the GoCD Server typically prefixed with D unless otherwise stated So if the property is called mynewproperty and the value that needs to be set is true then the Java system property to be used will be Dmynewpropertytrue Notice the lack of a space between the D and the property name On Windows the procedure to set an extra system property is detailed here On Linux and while using the ZIP package extra system properties are specified through the special environment variable GOSERVERSYSTEMPROPERTIES which can be set as specified in the quotEnvironment Variablesquot section above Options lta idcruiselistenhostgtltagt cruiselistenhost The host that the GoCD Server should bind to Name cruiselistenhost Type System property Restrictions Should be a valid bindable IP address The GoCD Server opens a listening socket so that it can serve pages to users and GoCD Agents It needs to listen on a specific host This host determines which clients users as well as GoCD Agents can access the GoCD Server By default the server listens on 0000 which is the wildcard or quotunspecifiedquot address Usually this means that the GoCD Server can be accessed through any network interface In some more advanced networking setups it might be needed to override this typically to 127001 so that only clients local to the box can access it Another way to set this on Linux installations is to set the environment variable SERVERLISTENHOST which is used by the server startup shell script to set the cruiselistenhost system property lta idcruiseserverportgtltagt cruiseserverport HTTP port for the Go Server Name cruiseserverport Type System property Restrictions Should be the number of a valid port that is not used by another process Similar to the cruiselistenhost property the value of this property determines which port the Go Server binds to and accepts HTTP connections from If not overridden it is set to 8153 See also Sister property cruiseserversslport lta idcruiseserversslportgtltagt cruiseserversslport HTTPS port for the Go Server Name cruiseserversslport Type System property Restrictions Should be the number of a valid port that is not used by another process Similar to the cruiselistenhost property the value of this property determines which port the Go Server binds to and accepts HTTPS connections from If not overridden it is set to 8154 See also Sister property cruiseserverport lta idcruiseconfigdirgtltagt cruiseconfigdir Location of the configuration files Name cruiseconfigdir Type System property Restrictions Should be the directory writeable by the Go Server process Though not used often this property can be used to change the location of the Go Servers config directory The default value of this property is specified here Changing this could have an impact on the ability to upgrade the Go Server and so its not recommended to change this lta idgosparefreshintervalgtltagt gosparefreshinterval GoCD SPA pages refresh interval time Name gosparefreshinterval Type System property Restrictions Should be the time duration specified in milliseconds Default 10000 The GoCD SPA pages are refreshed periodically to ensure they have upto date information This property can be used to change the time interval at which these GoCD pages should be refreshed Setting this to a lower value lt5000 could have a performance impact on the GoCD server lta idgospatimeoutgtltagt gospatimeout GoCD SPA pages request timeout Name gospatimeout Type System property Restrictions Should be the time duration specified in milliseconds Default 60000 This property can be used to change the timeout value of AJAX requests made from the GoCD SPA pages Setting this to a very low value ie lt5000 could result in AJAX requests being cancelled more frequently"},{"title":"Pipelines as code","href":"/advanced_usage/pipelines_as_code.html","content":"Pipelines as code GoCD supports storing pipeline configuration in a source code repository either with your application code or in a separate repository all on its own It allows you to move it out of GoCD so that you can modify control and version it externally Such modifications will be seen by a periodic poller in the GoCD server and it will merge those pipeline configurations into the pipelines it finds in the main configuration XML file You can see a quick preview video of this feature here It is important to note that not all pipelines need to be external to the config any existing config in any existing GoCD server will be valid It is also important to note that this feature includes the ability for GoCD to monitor and merge external pipelines defined in multiple quotconfig repositoriesquot It is also possible for a pipeline defined in a config repository to be dependent on a pipeline defined in the main config XML of the GoCD server This ability is exposed as a plugin endpoint and so anyone can write a plugin for a config repository to store the configuration in any manner you choose Heres an image which shows the relationship between the different pieces of a setup such as this A quick note about quotInfrastructure as codequot Many people seem to associate only being able to check in configuration to a repository as a part of quotInfrastructure as codequot However the ability to configure the GoCD server through code has existed in various forms For instance gomatic using GoCD APIs yagocd gocdcli etc This is another way of doing the same In this case its possible to make it more declarative depending on the plugin and possibly give more control to others Currently available plugins for storing pipelines as code Pipelines can currently be stored using JSON or YAML Please refer to JSON file configuration and YAML file configuration for more information about the format of the files The config repositories page Admin gt Config Repositories lists existing config repos and allows CRUD CreateReadUpdateDelete operations for a config repo This page also show errors and allows users to force a check of the repository Storing pipeline configuration in JSON The setup needed to tell GoCD where to find the pipeline configuration files is After starting the server goto quotAdmin gt Config repositoriesquot Click on the quotAddquot button available on the top right corner and select quotJSON configuration Pluginquot as plugin ID Once you add the config repository you should see new pipelines on the pipeline dashboard If there are any errors you should see it on this page Storing pipeline configuration in YAML The setup needed to tell GoCD where to find the pipeline configuration files is After starting the server goto quotAdmin gt Config repositoriesquot Click on the quotAddquot button available on the top right corner and select quotYAML configuration Pluginquot as plugin ID Once you add the config repository you should see new pipelines on the pipeline dashboard If there are any errors you should see it on this page Pipeline export feature In GoCD release 1910 we introduced ability to export pipeline to a format which can be used by the config repository plugins for instance YAML or JSON plugins Users can later check in these pipeline definitions to a repository and remove them from GoCDs config "},{"title":"Properties","href":"/advanced_usage/properties.html","content":"Properties Introduction Properties provide a simple way of collecting metrics over time GoCD sets some standard properties for you You can also set properties yourself using the Go REST APIs see Properties API for more information GoCD also allows you to download the history of your job in a convenient CSV format so that you can analyse the results in spreadsheets or scripts Property history GoCD allows you to download the history of properties that you have defined This history is available as a Comma Separated Values CSV file You can import this file into a spreadsheet program to generate charts and diagnostics of your project You can of course access these resources through standard URLs CSV httpservergopropertiespipelineNamepipelineLabelstageNamestageCounterjobpropertyName To open the property history in a spreadsheet application you can click on the Export property history to spreadsheet csv link on the Properties tab of the job Standard Properties The standard properties defined by GoCD are cruiseagent the agent that is running the job cruisejobduration total time to run the job cruisejobresult one of quotpassedquot or quotfailedquot cruisejobid the name of the folder that the artifacts of the job was stored in under the artifact repository on server side on earlier versions of GoCD cruisepipelinelabel same as the value of the environment variable GOPIPELINELABEL cruisepipelinecounter same as the value of the environment variable GOPIPELINECOUNTER cruisestagecounter same as the value of the environment variable GOSTAGECOUNTER cruisetimestamp01scheduled time at which the job was scheduled cruisetimestamp02assigned time at which the job was assigned to the agent cruisetimestamp03preparing time at which the job entered the quotpreparingquot state cruisetimestamp04building time at which the job started building cruisetimestamp05completing time at which the job entered the completing state cruisetimestamp06completed time at which the job completed Generating Properties from Artifacts GoCD allows you to generate properties from XML artifacts that you create during the build This can be used to harvest statistics produced by coverage tools etc By storing them as properties it becomes very easy to show the history and trends over time of these values Note that the properties are generated on the agent side so the src path is relative to the working directory of the pipeline on the agent For example to add support for the coverage tool quotEmmaquot you might do this ltjobgt ltpropertiesgt ltproperty namequotcoverageclassquot srcquottargetemmacoveragexmlquot xpathquotsubstringbeforereportdataallcoveragestartswithtypeclassvalue quot gt ltproperty namequotcoveragemethodquot srcquottargetemmacoveragexmlquot xpathquotsubstringbeforereportdataallcoveragestartswithtypemethodvalue quot gt ltproperty namequotcoverageblockquot srcquottargetemmacoveragexmlquot xpathquotsubstringbeforereportdataallcoveragestartswithtypeblockvalue quot gt ltproperty namequotcoveragelinequot srcquottargetemmacoveragexmlquot xpathquotsubstringbeforereportdataallcoveragestartswithtypelinevalue quot gt ltpropertiesgt ltjobgt Tests If you define a tests artifact that contains the test reports then GoCD will add some properties associated with the tests testsfailedcount number of failed tests testsignoredcount number of ignored tests teststotalduration total time taken for the tests teststotalcount total number of tests "},{"title":"Graphs","href":"/advanced_usage/stage_duration_chart.html","content":"Graphs Stage Duration Chart GoCD provides a chart on the stage details page which can be used for trend analysis of the stages periodic runs This graph shows two line graphs one each for passed and failed stage instances which are plotted using the total duration of the last 300 stage instances To navigate to the Graphs Click on the stage bar of the relevant stage on the pipelines dashboard Click on the tab Graphs Features of the Graph The following is a snapshot of a stage duration chart Selecting a part of the graph zooms into the selected area Once zoomed a link called Reset Zoom Appears on the chart which resets the graph Key The title shows the start and end dates of the range of the chart A tooltip giving the details of the stage run appears on hover over the points of the line graph Navigates to the Chart of older 300 runs Navigates to the Chart of newer 300 runs Toggles the line graph of the failed runs Toggles the line graph of the passed runs "},{"title":"Trigger With Options","href":"/advanced_usage/trigger_with_options.html","content":"Trigger with a different revision of material GoCD supports a Trigger with option that allows you to run the pipeline with a specific revision of the materials Trigger with options Information The following information are displayed for the last 5 revisions For an SCM material the following information is shown Revision hash or pipeline label Committer Checkin comment for the revision Checkin time of the revision For a pipeline material the pipeline label and the corresponding run time is shown Choosing the revision You can choose one of the revisions and then click on Trigger Pipeline button If you want to trigger with a revision other than the 5 that is displayed you can specify information related to this in the text box provided You can search for all or part of revision hashpipeline label committer name checkin comment GoCD will find matches and display the same One of the matches can be chosen and the build triggered Environment and secure variables If the pipeline has environment andor secure variables configured additional tabs will be displayed to allow you to override these values Also see Deploy a specific build to an environment Pipeline dashboard Ordering of pipelines "},{"title":"Comment on a pipeline run","href":"/beta/comment_on_pipeline_run.html","content":"Beta feature Comment on a pipeline run ltdiv stylequotbackgroundcolor rgba0 192 0 025 padding 5px marginbottom 1emquotgt Note This is a beta feature which is turned off by default in GoCD 1440 It can be turned on by using the feature toggle API for this feature If you are using curl this is what you will need to do ltdiv stylequotfontfamily monospace fontsize 70 paddingtop 1em paddingbottom 1emquotgtcurl d togglevalueon httpgoservergoapiadminfeaturetogglespipelinecommentfeaturetogglekey H Confirmtrueltdivgt When authentication is turned on in your GoCD Server setup add the user option to the curl command like this ltdiv stylequotfontfamily monospace fontsize 70 margintop 1emquotgtcurl user usernamepassword d togglevalueon ltdivgt ltdivgt Each pipeline in the pipeline activity page can now be annotated with a comment This text can be seen by all other users who can access this page for those pipelines When this feature is turned on the pipeline activity page looks like this Clicking on the quotAdd Commentquot button for a pipeline run brings up a text box for you to enter some text It looks like this Once you click quotSubmitquot after entering some text that text shows up against the pipeline run like so "},{"title":"Access tokens","href":"/configuration/access_tokens.html","content":"Access Tokens From GoCD server version 1920 onwards you will be able to create personal access tokens to access GoCD APIs This will allow users to make an API call without specifying their credentials username amp password as a part of API request headers Usage instructions A token can be used to access GoCD APIs and cctrayxml by passing it in API header Before 1920 curl httpsciexamplecomgoapipipelinespipeline1status u usernamepassword Going forward curl httpsciexamplecomgoapipipelinespipeline1status H Authorization Bearer 6A7B48094CC552B9A2DF0AFADAF50D28F0646070 A token can not be used to create or access any access token related APIs Login using access token is not allowed through web UI Once a token is revoked the user will not be able to activate it again All tokens belonging to a user will be revoked automatically as soon as the user is deleted from GoCD Note These tokens will not be visible again even if the same user is added back to GoCD Create a token Login into your GoCD server Go to user menu Personal Access Tokens Click on Generate Token button Add a description for the token This is to identify what is this token for Click on Generate button On success you will see the newly generated token Make sure you copy the token before you close the dialog It will not be shown again Revoke a personal token Login into your GoCD server Go to user menu Personal Access Tokens Find the token which you wish to revoke in ACTIVE TOKENS tab Click on the Revoke button Optionally add a reason for revoking the token Click on Revoke Token button On success the token just revoked will be shown in REVOKED TOKENS tab Manage access tokens admin only Login into your GoCD server Go to Admin menu Security Access Tokens Management The admin will be able to see all the tokens created by all the users Active tokens Revoked tokens The admin can use the search box on the topright to search tokens on the basis of Created By and Description Revoke token Login into your GoCD server Go to Admin menu Security Access Tokens Management Find the token which you wish to revoke in ACTIVE TOKENS tab Click on the Revoke button Optionally add a reason for revoking the token Click on Revoke Token button On success the token just revoked will be shown in REVOKED TOKENS tab "},{"title":"Add job to Existing stage","href":"/configuration/admin_add_job.html","content":"Add a new job to an existing GoCD stage Now that we have a pipeline with stages we can add more jobs to any of the existing stages You can now use the tree navigation on the left side of the screen to edit a stage or a job under a pipeline Click on the stage name that you want to edit on the tree as shown below The quotdefaultStagequot is being edited Click on the Jobs tab Click on quotAdd new jobquot Fill job name and job details Fill in the details for the initial task belonging to this job You can edit this job later to add more tasks You can choose the type of the task as required For task types Ant Nant and Rake the build file and target will default as per the tool used For example Ant task would look for buildxml in the working directory and use the default task if nothing is mentioned Click on help icon next to the fields to get additional details about the fields you are editing Click quotSavequot "},{"title":"Add Material to Existing Pipeline","href":"/configuration/admin_add_material.html","content":"Add a new material to an existing GoCD pipeline Now that you have a pipeline lets add another material to it Navigate to the new pipeline you created by clicking on the Edit link under the Actions against it You can also click on the name of the pipeline Click on the Materials tab You will notice an existing material Click on the quotAdd new materialquot link You will get the following message Edit the existing material and specify the destination directory Click quotSavequot Blacklist Often you do want to specify a set of files that GoCD should ignore when it checks for changes Repository changesets which contain only these files will not automatically trigger a pipeline These are detailed in the ignore section of the configuration reference Enter the items to blacklist using antstyle syntax below Click quotSavequot Whitelist There are cases where instead of ignoring those files or folders you want GoCD to consider only the specified files or folders when checking for changes and ignore the rest With GoCD whitelisting you can allow a pipeline to trigger on certain repository changesets Click on quotInvert the file filterquot to enable whitelisting Click quotSavequot Note GoCD uses for folderpath and for files Examples ltignore patternquotdocquot gt Ignore everything under the folder doc even deeper levels of subfoldersfiles under doc folder ltignore patternquotdocquot gt Ignore files under the folder doc excluding any subfolder ltignore patternquotframeworkhelperdocquot gt Ignore files that are under the directory frameworkhelper and the file extension is doc ltignore patternquotpdfquot gt Ignore files that are under the root directory of SCM repository and the file extension is pdf ltignore patternquothelperpdfquot gt Ignore all the files that is under any helper folder and the file extension is pdf ltignore patternquothelperpdfquot gt Ignore all the files that are in the nested directory under folder helper of the repository and the file extension is pdf"},{"title":"Add Stage to Existing Pipeline","href":"/configuration/admin_add_stage.html","content":"Add a new stage to an existing GoCD pipeline Now that you have a pipeline with a single stage lets add more stages to it Navigate to the new pipeline you created by clicking on the Edit link under the Actions against it You can also click on the name of the pipeline Click on the Stages tab You will notice that a defaultStage exists Click on the quotAdd new stagequot link Fill stage name and trigger type Fill in the details for the first job and first task belonging to this job You can add more jobs and add more tasks to the jobs Click on help icon next to the fields to get additional details about the fields you are editing Click quotSavequot "},{"title":"Add task to Existing Job","href":"/configuration/admin_add_task.html","content":"Add a new task to an existing GoCD Job Now that we have a pipeline with stages containing jobs we can add tasks to any of the existing jobs You can now use the tree navigation on the left side of the screen to edit a job under a stage Click on the job name that you want to edit on the tree as shown below The quotdefaultJobquot is being edited Click on quotAdd new taskquot You can choose the task type from Ant Nant Rake and Fetch Artifact Or you can choose quotMorequot to choose a command from command repository or specify your own command Fill the basic settings for the task Click on help icon next to the fields to get additional details about the fields you are editing Click quotSavequot Advanced Options section allows you to specify a Task in which you can provide the actions typically clean up that needs to be taken when users chooses to cancel the stage "},{"title":"Clone a pipeline","href":"/configuration/admin_clone_pipeline.html","content":"Clone an existing GoCD pipeline Clone pipeline functionality helps you create a new pipeline from an existing pipeline by giving it a new name Typically when setting up a pipeline for a new branch it is very useful to take an existing pipeline and clone it If the user is a pipeline group admin she can clone the new pipeline into a group that she has access to If the user is an admin she can clone the pipeline into any group or give a new group name in which case the group gets created Navigate to the Admin tab Locate the pipeline that needs to be cloned In that row click on the quotClonequot icon Fill in the name of the new pipeline Select a pipeline group If you are an admin you will be able to enter the name of the pipeline group using the auto suggest or enter a new group name Click quotSavequot "},{"title":"Lock a Pipeline","href":"/configuration/admin_lock_pipelines.html","content":"Pipeline locking Ensure only one instance of a GoCD pipeline can run at the same time Sometimes you want to ensure that only a single instance of a pipeline can run at a time This is important if the stages of a pipeline are interrelated For example the first stage may set up an environment that is used by the next stage in the pipeline If a pipeline is locked then GoCD will not allow any other instance of that pipeline to be scheduled until the currently running one has been completed To enable locking from the Config UI navigate to the Pipeline Settings section of a pipeline There are three options for locking Option 1 Run single instance of pipeline at a time quotLock behavior Unlock when finishedquot This option enables a single instance of the pipeline to run at a time by temporarily locking the pipeline and unlocking it when finished When the pipeline finishes either because of the failure of any stage or the success of the final stage the pipeline is automatically unlocked The pipeline is also unlocked if it reaches a manual stage Option 2 Run single instance of pipeline and lock on failure quotLock behavior Lock on failurequot This option enables a single instance of the pipeline to run at a time The pipeline is locked when it starts and it remains locked if it fails The pipeline is unlocked if it reaches the last stage even if it fails The pipeline is not unlocked if it reaches a manual stage If a pipeline is locked it will not allow any new instances to run unless it is unlocked either manually or through the API Option 3 Run multiple instances quotLock behavior Nonequot This is the default behavior Multiple instances of a pipeline can run simultaneously Controlling locking behavior from the config XML To enable locking from the Config XML set the lockBehavior attribute to one of unlockWhenFinished lockOnFailure or none corresponding to the three options shown above ltpipeline namequotmylockedpipelinequot lockBehaviorquotlockOnFailurequotgt ltmaterialsgt ltmaterialsgt ltstagesgt ltstagesgt ltpipelinegt Also see the configuration reference"},{"title":"Mailhost Information","href":"/configuration/admin_mailhost_info.html","content":"Mailhost information In order to allow email notifications you need to tell GoCD information about your mailhost Click on the Administration tab Click on the Server Configuration subtab Add your mailhost information with username and password as required Add an Administrator email address this account will be emailed if the Go server is running out of disk space Click Send test email to verify the configuration is working correctly Click Save when youre sure its working lta idstarttlsgtltagt SMTPS and TLS Depending on the way your email server is setup you might need to enable TLS or SMTPS setup in GoCD to get it to send emails properly Please ask you administrators for information about the setup of your email server To make GoCD change the protocol to use SMTPS while connecting to the email server just enable the quotUse SMTPSquot setting shown in the image above Most often but not always this setting is used in conjunction with port 465 If your email server uses STARTTLS then you need to pass in the mailsmtpstarttlsenable Java system property to GoCD to enable support for it This is done by providing the commandline argument Dmailsmtpstarttlsenabletrue during startup into the GOSERVERSYSTEMPROPERTIES part of etcdefaultgoserver for instance Most often but not always this setting is used in conjunction with port 587 and with the quotUse SMTPSquot option turned off References External site SSL vs TLS vs STARTTLS "},{"title":"Timer Trigger","href":"/configuration/admin_timer.html","content":"Run a GoCD pipeline on a schedule To run a pipeline at a given time use a timer Timers understand a cronlike specification for when to run a pipeline Note that a pipeline will still schedule normally if changes are checked in If the pipeline should only run according to the timers schedule then you should also set a manual approval for the first stage of the pipeline to stop it from automatically scheduling when materials change This can be also be achieved by unchecking the option quotAutomatic pipeline schedulingquot shown in the screenshot below The timer is similar to a manually triggered pipeline in many ways But it does not fetch the latest revision of the materials when it runs It uses the last available revision that it knows of Configure through the UI To configure the timer in the UI navigate to the General Options section of the pipeline For example a timer that is configured as shown in the screenshot would run the pipeline at 10pm on weekdays An option called quotRun only on new materialquot is also available in this form Selecting this option ensures that the pipeline will get triggered on the specified schedule only if materials have changed since the last run of this pipeline For example if there are no new commits since the last run future runs will be skipped until new commits or until the pipeline is forced to run using triggerwithoptions with an older commit This option is typically useful when quotAutomatic pipeline schedulingquot is turned off Configure through the XML The following xml config corresponds to the UI example above ltpipeline namequotnightlyquotgt lttimer onlyOnChangesquottruequotgt0 0 22 MONFRIlttimergt ltmaterialsgt ltmaterialsgt ltstagesgt ltstage namequotcompilequotgt ltapproval typequotmanualquotgt ltstagegt ltstagesgt ltpipelinegt For more information see lt timer gt"},{"title":"Customize a Pipeline label","href":"/configuration/admin_use_custom_pipeline_label.html","content":"Use a custom pipeline label When using GoCD to build your application it is often useful to be able to include extra information in the label GoCD uses For example you might want to have your label contain a static majorminor version number in addition to the unique count of the pipeline Click on the Administration tab Edit the pipeline Add the label template Click save Using material revisions You might also want to include material revision into the pipeline label so that its easier to find a GoCD pipeline by material revision and vice versa For example you might have a pipeline with a svn material The following example shows how to include svn material revision into pipeline label ltpipeline namequotmainquot labeltemplatequot13COUNTsvnquotgt ltmaterialsgt ltsvn urlquothttpserverpathquot materialNamequotsvnquot gt ltmaterialsgt ltpipelinegt Using truncated material revisions You can optionally truncate a material revision This can be useful when using Git materials as they have long revision numbers By adding a quot7quot you can have a short truncated version of the Git revision hash that has exactly 7 characters Please note a subtle difference between this truncated Git revision and the quotofficial Git short revisionquot The later one might be 47 characters long as Git tries to find a unique hash thats as short as possible See the documentation of gitrevparse under quotshortquot for further details ltpipeline namequotmainquot labeltemplatequot151COUNTgit7quotgt ltmaterialsgt ltgit urlquotgitgithubcomfoogitquot materialNamequotgitquot gt ltmaterialsgt ltpipelinegt Using upstream pipeline labels You can also include the revision of an upstream pipeline into the pipeline label to for example share the same revision across different but related pipelines ltpipeline namequotupstreamquot labeltemplatequot13COUNTsvnquotgt ltmaterialsgt ltsvn urlquothttpserverpathquot materialNamequotsvnquot gt ltmaterialsgt ltpipelinegt ltpipeline namequotdownstreamquot labeltemplatequotupstreamquotgt ltmaterialsgt ltpipeline pipelineNamequotupstreamquot stageNamequotdevquot materialNamequotupstreamquot gt ltmaterialsgt ltpipelinegt In this case if the label of upstream pipeline is quot1301234quot then when downstream pipeline is triggered the label of downstream pipeline is also quot1301234quot Using parameters You can also include parameters into the pipeline label ltpipeline namequotmainquot labeltemplatequot151COUNTparam1quotgt ltparamsgt ltparam namequotparam1quotgtdefaultltparamgt ltparamsgt ltpipelinegt Using Pipeline Level Environment Variables From GoCD v18100 you can also include pipeline level environment variables into the pipeline label ltpipeline namequotmainquot labeltemplatequot18100COUNTenvvarquotgt ltenvironmentvariablesgt ltvariable namequotvarquotgt ltvaluegtdefaultltvaluegt ltvariablegt ltenvironmentvariablesgt ltpipelinegt Also see Use parameters in configuration "},{"title":"Parameterize a pipeline","href":"/configuration/admin_use_parameters_in_configuration.html","content":"Parameterize your Configuration GoCD allows you to parameterize your pipelines and pipeline templates This powerful feature can help reduce repetition within your configurations and also allows for complex setups using a combination of parameters and pipeline templates Using Web Interface Edit the Parameters tab when defining a pipeline Defining and using a parameter Parameter values are defined in the ltparamsgt tag within a pipeline and can be used anywhere within that pipeline using paramname The following example defines a new parameter called quotmyParamquot and uses it in a job ltpipeline namequotmypipelinequotgt ltparamsgt ltparam namequotmyParamquotgthello worldltparamgt ltparamsgt ltstage namequotmystagequotgt ltjobsgt ltjob namequotmyjobquotgt lttasksgt ltexec commandquotechoquot argsquotmyParamquotgt lttasksgt ltjobgt ltjobsgt ltstagegt ltpipelinegt NOTE If you want to use the literal you can escape it using another literal For example if the parameter quotfooquot has the value quotonequot then String Evaluates to "},{"title":"Pipeline Labelling","href":"/configuration/build_labelling.html","content":"GoCD Pipeline Labeling GoCD maintains an internal counter to identify a pipeline This number increases by 1 for each build By default GoCD will use this counter as the pipeline label This label is also passed to your build as an environment variable GOPIPELINECOUNTER The pipeline counter increases even if a build fails The concept of pipeline counters was introduced in release 132 In order to maintain backward compatibility with historical data GoCD now uses negative values as counter for pipelines created by older releases of GoCD Hence it is perfectly normal for a historical pipeline to have a negative counter with positive label Customising the pipeline label You can create a custom label by setting the Label Template field on your pipeline This will change the value that GoCD shows on its webpages It will also change the value of the GOPIPELINELABEL property that is passed to your build You can refer to COUNT or material names which are defined in the configuration of materials Power users can still edit the config xml to achieve the same The xml snippet to configure labelTemplate is below ltpipeline namequotmypipelinequot labeltemplatequot12COUNTquotgt ltpipelinegt Using a pipeline in the labeltemplate ltpipeline namequotmydependentpipelinequot labeltemplatequotMYPIPELINEquotgt ltmaterialsgt ltpipeline pipelineNamequotmypipelinequot stageNamequotmystagequotgt ltmaterialsgt ltpipelinegt Using a VCS material in the labeltemplate In this example the Subversion revision number will be used as the labeltemplate ltpipeline namequotmymaterialpipelinequot labeltemplatequot12SVNMATERIALquotgt ltmaterialsgt ltsvn urlquothttpsvnexamplecomquot destquotsvnquot materialNamequotSVNMATERIALquot gt ltmaterialsgt ltpipelinegt In some instances for example when using Git the revision number can be long In this case the revision number can be truncated"},{"title":"Reference","href":"/configuration/configuration_reference.html","content":"lta idquottopquotgtltagt GoCD Configuration Reference ltbiggtltpregt lta hrefquotcruisequotgtltcruisegtltagt lta hrefquotserverquotgtltservergtltagt lta hrefquotsecurityquotgtltsecuritygtltagt lta hrefquotldapquotgtltldapgtltagt lta hrefquotbasesquotgtltbasesgtltagt lta hrefquotbasequotgtltbasegtltagt lta hrefquotbasesquotgtltbasesgtltagt lta hrefquotldapquotgtltldapgtltagt lta hrefquotpasswordFilequotgtltpasswordFilegtltagt lta hrefquotauthConfigsquotgtltauthConfigsgtltagt lta hrefquotauthConfigquotgtltauthConfiggtltagt lta hrefquotpropertyquotgtltpropertygtltagt lta hrefquotkeyquotgtltkeygtltagt lta hrefquotvaluequotgtltvaluegtltagt lta hrefquotpropertyquotgtltpropertygtltagt lta hrefquotauthConfigquotgtltauthConfiggtltagt lta hrefquotauthConfigsquotgtltauthConfigsgtltagt lta hrefquotrolesquotgtltrolesgtltagt lta hrefquotroledefinitionquotgtltrolegtltagt lta hrefquotusersinrolequotgtltusersgtltagt lta hrefquotuserinrolequotgtltusergtltagt lta hrefquotroledefinitionquotgtltrolegtltagt lta hrefquotpluginroledefinitionquotgtltpluginRolegtltagt lta hrefquotrolesquotgtltrolesgtltagt lta hrefquotadminsquotgtltadminsgtltagt lta hrefquotroleinadminquotgtltrolegtltagt lta hrefquotuserquotgtltusergtltagt lta hrefquotadminsquotgtltadminsgtltagt lta hrefquotsecurityquotgtltsecuritygtltagt lta hrefquotmailhostquotgtltmailhostgtltagt lta hrefquotbackupquotgtltbackupgtltagt lta hrefquotserverquotgtltservergtltagt lta hrefquotelasticquotgtltelasticgtltagt lta hrefquotprofilesquotgtltprofilesgtltagt lta hrefquotprofilequotgtltprofilegtltagt lta hrefquotpropertyquotgtltpropertygtltagt lta hrefquotkeyquotgtltkeygtltagt lta hrefquotvaluequotgtltvaluegtltagt lta hrefquotpropertyquotgtltpropertygtltagt lta hrefquotprofilequotgtltprofilegtltagt lta hrefquotprofilesquotgtltprofilesgtltagt lta hrefquotelasticquotgtltelasticgtltagt lta hrefquotrepositoriesquotgtltrepositoriesgtltagt lta hrefquotrepositoryquotgtltrepositorygtltagt lta hrefquotpluginConfigurationquotgtltpluginConfigurationgtltagt lta hrefquotconfigurationquotgtltconfigurationgtltagt lta hrefquotpropertyquotgtltpropertygtltagt lta hrefquotkeyquotgtltkeygtltagt lta hrefquotvaluequotgtltvaluegtltagt lta hrefquotpropertyquotgtltpropertygtltagt lta hrefquotconfigurationquotgtltconfigurationgtltagt lta hrefquotpackagesquotgtltpackagesgtltagt lta hrefquotpackagequotgtltpackagegtltagt lta hrefquotconfigurationquotgtltconfigurationgtltagt lta hrefquotpropertyquotgtltpropertygtltagt lta hrefquotkeyquotgtltkeygtltagt lta hrefquotvaluequotgtltvaluegtltagt lta hrefquotpropertyquotgtltpropertygtltagt lta hrefquotconfigurationquotgtltconfigurationgtltagt lta hrefquotpackagequotgtltpackagegtltagt lta hrefquotpackagesquotgtltpackagesgtltagt lta hrefquotrepositoryquotgtltrepositorygtltagt lta hrefquotrepositoriesquotgtltrepositoriesgtltagt lta hrefquotconfigreposquotgtltconfigreposgtltagt lta hrefquotconfigrepoquotgtltconfigrepogtltagt lta hrefquotconfigreposvnquotgtltsvn gtltagt lta hrefquotconfigrepohgquotgtlthg gtltagt lta hrefquotconfigrepop4quotgtltp4 gtltagt lta hrefquotconfigrepogitquotgtltgit gtltagt lta hrefquotconfigrepotfsquotgtlttfs gtltagt lta hrefquotconfigreposcmquotgtltscm gtltagt lta hrefquotconfigrepoconfigurationquotgtltconfigurationgtltagt lta hrefquotconfigrepopropertyquotgtltpropertygtltagt lta hrefquotconfigrepopropertykeyquotgtltkeygtltagt lta hrefquotconfigrepopropertyvaluequotgtltvaluegtltagt lta hrefquotconfigrepopropertyquotgtltpropertygtltagt lta hrefquotconfigrepoconfigurationquotgtltconfigurationgtltagt lta hrefquotconfigrepoquotgtltconfigrepogtltagt lta hrefquotconfigreposquotgtltconfigreposgtltagt lta hrefquotartifactStoresquotgtltartifactStoresgtltagt lta hrefquotartifactStorequotgtltartifactStoregtltagt lta hrefquotpropertyquotgtltpropertygtltagt lta hrefquotkeyquotgtltkeygtltagt lta hrefquotvaluequotgtltvaluegtltagt lta hrefquotpropertyquotgtltpropertygtltagt lta hrefquotartifactStorequotgtltartifactStoregtltagt lta hrefquotartifactStoresquotgtltartifactStoresgtltagt lta hrefquotpipelinesquotgtltpipelinesgtltagt lta hrefquotgroupauthorizationquotgtltauthorizationgtltagt lta hrefquotgroupadminsquotgtltadminsgtltagt lta hrefquotuserquotgtltusergtltagt lta hrefquotrolequotgtltrolegtltagt lta hrefquotgroupadminsquotgtltadminsgtltagt lta hrefquotgroupviewquotgtltviewgtltagt lta hrefquotuserquotgtltusergtltagt lta hrefquotrolequotgtltrolegtltagt lta hrefquotgroupviewquotgtltviewgtltagt lta hrefquotgroupoperatequotgtltoperategtltagt lta hrefquotuserquotgtltusergtltagt lta hrefquotrolequotgtltrolegtltagt lta hrefquotgroupoperatequotgtltoperategtltagt lta hrefquotgroupauthorizationquotgtltauthorizationgtltagt lta hrefquotpipelinequotgtltpipelinegtltagt lta hrefquotparamsquotgtltparamsgtltagt lta hrefquotparamquotgtltparamgtltagt lta hrefquotparamsquotgtltparamsgtltagt lta hrefquottrackingtoolquotgtlttrackingtoolgtltagt lta hrefquotminglequotgtltminglegtltagt lta hrefquottimerquotgtlttimergtltagt lta hrefquotenvironmentvariablesquotgtltenvironmentvariablesgtltagt lta hrefquotvariablequotgtltvariablegtltagt ltvaluegt lta hrefquotvariablequotgtltvariablegtltagt lta hrefquotenvironmentvariablesquotgtltenvironmentvariablesgtltagt lta hrefquotmaterialsquotgtltmaterialsgtltagt lta hrefquotsvnquotgtltsvngtltagt lta hrefquotfilterquotgtltfiltergtltagt lta hrefquotignorequotgtltignoregtltagt lta hrefquotfilterquotgtltfiltergtltagt lta hrefquotsvnquotgtltsvngtltagt lta hrefquothgquotgtlthggtltagt lta hrefquotfilterquotgtltfiltergtltagt lta hrefquotignorequotgtltignoregtltagt lta hrefquotfilterquotgtltfiltergtltagt lta hrefquothgquotgtlthggtltagt lta hrefquotp4quotgtltp4gtltagt ltviewgt lta hrefquotfilterquotgtltfiltergtltagt lta hrefquotignorequotgtltignoregtltagt lta hrefquotfilterquotgtltfiltergtltagt lta hrefquotp4quotgtltp4gtltagt lta hrefquotgitquotgtltgitgtltagt lta hrefquotfilterquotgtltfiltergtltagt lta hrefquotignorequotgtltignoregtltagt lta hrefquotfilterquotgtltfiltergtltagt lta hrefquotgitquotgtltgitgtltagt lta hrefquottfsquotgtlttfsgtltagt lta hrefquotfilterquotgtltfiltergtltagt lta hrefquotignorequotgtltignoregtltagt lta hrefquotfilterquotgtltfiltergtltagt lta hrefquottfsquotgtlttfsgtltagt lta hrefquotpackagematerialquotgtltpackagegtltagt lta hrefquotpipelinedependencyquotgtltpipelinegtltagt lta hrefquotmaterialsquotgtltmaterialsgtltagt lta hrefquotstagequotgtltstagegtltagt lta hrefquotapprovalquotgtltapprovalgtltagt lta hrefquotauthorizationquotgtltauthorizationgtltagt lta hrefquotrolequotgtltrolegtltagt lta hrefquotuserquotgtltusergtltagt lta hrefquotauthorizationquotgtltauthorizationgtltagt lta hrefquotapprovalquotgtltapprovalgtltagt lta hrefquotenvironmentvariablesquotgtltenvironmentvariablesgtltagt lta hrefquotvariablequotgtltvariablegtltagt ltvaluegt lta hrefquotvariablequotgtltvariablegtltagt lta hrefquotenvironmentvariablesquotgtltenvironmentvariablesgtltagt lta hrefquotjobsquotgtltjobsgtltagt lta hrefquotjobquotgtltjobgtltagt lta hrefquotenvironmentvariablesquotgtltenvironmentvariablesgtltagt lta hrefquotvariablequotgtltvariablegtltagt ltvaluegt lta hrefquotvariablequotgtltvariablegtltagt lta hrefquotenvironmentvariablesquotgtltenvironmentvariablesgtltagt lta hrefquotresourcesquotgtltresourcesgtltagt lta hrefquotresourcequotgtltresourcegtltagt lta hrefquotresourcesquotgtltresourcesgtltagt lta hrefquottasksquotgtlttasksgtltagt lta hrefquotfetchartifactquotgtltfetchartifactgtltagt lta hrefquotrunifquotgtltrunifgtltagt lta hrefquotoncancelquotgtltoncancelgtltagt lta hrefquotfetchartifactquotgtltfetchartifactgtltagt lta hrefquotantquotgtltantgtltagt lta hrefquotrunif20quotgtltrunifgtltagt lta hrefquotoncancelquotgtltoncancelgtltagt lta hrefquotantquotgtltantgtltagt lta hrefquotnantquotgtltnantgtltagt lta hrefquotrunif20quotgtltrunifgtltagt lta hrefquotoncancelquotgtltoncancelgtltagt lta hrefquotnantquotgtltnantgtltagt lta hrefquotrakequotgtltrakegtltagt lta hrefquotrunif20quotgtltrunifgtltagt lta hrefquotoncancelquotgtltoncancelgtltagt lta hrefquotrakequotgtltrakegtltagt lta hrefquotexecquotgtltexecgtltagt lta hrefquotargquotgtltarggtltagt lta hrefquotrunif20quotgtltrunifgtltagt lta hrefquotoncancelquotgtltoncancelgtltagt lta hrefquotexecquotgtltexecgtltagt lta hrefquottasksquotgtlttasksgtltagt lta hrefquotartifactsquotgtltartifactsgtltagt lta hrefquotartifactquotgtltartifactgtltagt lta hrefquotartifactsquotgtltartifactsgtltagt lta hrefquottabsquotgtlttabsgtltagt lta hrefquottabquotgtlttabgtltagt lta hrefquottabsquotgtlttabsgtltagt lta hrefquotpropertiesquotgtltpropertiesgtltagt lta hrefquotpropertyquotgtltpropertygtltagt lta hrefquotpropertiesquotgtltpropertiesgtltagt lta hrefquotjobquotgtltjobgtltagt lta hrefquotjobsquotgtltjobsgtltagt lta hrefquotstagequotgtltstagegtltagt lta hrefquotpipelinequotgtltpipelinegtltagt lta hrefquotpipelinesquotgtltpipelinesgtltagt lta hrefquottemplatesquotgtlttemplatesgtltagt lta hrefquotpipelinetemplatequotgtltpipelinegtltagt lta hrefquotstagequotgtltstagegtltagt lta hrefquotstagequotgtltstagegtltagt lta hrefquotpipelinetemplatequotgtltpipelinegtltagt lta hrefquottemplatesquotgtlttemplatesgtltagt lta hrefquotenvironmentsquotgtltenvironmentsgtltagt lta hrefquotenvironmentquotgtltenvironmentgtltagt lta hrefquotenvironmentvariablesquotgtltenvironmentvariablesgtltagt lta hrefquotvariablequotgtltvariablegtltagt ltvaluegt lta hrefquotvariablequotgtltvariablegtltagt lta hrefquotenvironmentvariablesquotgtltenvironmentvariablesgtltagt lta hrefquotenvironmentagentsquotgtltagentsgtltagt lta hrefquotenvironmentagentsphysicalquotgtltphysicalgtltagt lta hrefquotenvironmentagentsquotgtltagentsgtltagt lta hrefquotenvironmentpipelinesquotgtltpipelinesgtltagt lta hrefquotenvironmentpipelinequotgtltpipelinegtltagt lta hrefquotenvironmentpipelinesquotgtltpipelinesgtltagt lta hrefquotenvironmentquotgtltenvironmentgtltagt lta hrefquotenvironmentsquotgtltenvironmentsgtltagt lta hrefquotagentsquotgtltagentsgtltagt lta hrefquotagentquotgtltagentgtltagt lta hrefquotagentresourcesquotgtltresourcesgtltagt lta hrefquotagentresourcequotgtltresourcegtltagt lta hrefquotresourcesquotgtltresourcesgtltagt lta hrefquotagentquotgtltagentgtltagt lta hrefquotagentsquotgtltagentsgtltagt lta hrefquotcruisequotgtltcruisegtltagt ltpregtltbiggt top Configuration reference ltcruisegt cruise The ltcruisegt element is the root element of the configuration top ltservergt server The ltservergt element can be used to define information and attributes of the Go Server Attributes Attribute Required Description "},{"title":"Delegating Group Administration","href":"/configuration/delegating_group_administration.html","content":"Delegating Group Administration A GoCD Administrator can authorize users and roles to be administrators for Pipeline Groups These group administrators have certain privileges which are explained in the section quotPrivileges of a Group Administratorquot Steps to assign Group Administrators To assign a user as a group administrator Click on quotPipelinesquot tab on the Admin section Locate the group you want to assign a group administrator to Click the quotEditquot link for that group Here you can define permissions for users and roles In the above screenshot the GoCD admin has delegated group admin privileges to a user quotjezquot and all users defined under the role quotgroupAdminRolequot The privileges of a Group Administrator have been described in the next section For power users heres how youd assign the same permissions via Config XML ltpipelines groupquotstudiosquotgt ltauthorizationgt ltadminsgt ltusergt jez ltusergt ltrolegt groupAdminRole ltrolegt ltadminsgt ltauthorizationgt ltpipeline namequotgopipelinequotgt ltpipelinegt ltpipelinesgt Privileges of a Group Administrator As a group administrator of a pipeline group a user is privileged to View and operate trigger rerun stages etc all the pipelines in this group Add other group admins to this group Authorize usersroles with view and operate permissions for this pipeline group Add and Delete pipelines tofrom the group Add a pipeline using the quotAdd New Pipelinequot wizard but only to the groups he is allowed to administer Edit pipelines belonging to the group Which includes renaming adding deleting and modifying stages and jobs Restfully view and operate trigger rerun stages etc all the pipelines in this group Restfully edit the pipelines belonging to this group Note A group administrator can access quotPipelinesquot and quotConfig XMLquot tabs on the Administration page to view and edit hisher pipeline groups HeShe cannot access Server Configuration or perform user management While a group administrator cannot access Pipeline Templates either they can use existing templates for pipelines within their pipeline group "},{"title":"Auto Delete Artifacts","href":"/configuration/delete_artifacts.html","content":"Auto delete artifacts Introduction GoCD can be configured to automatically delete artifacts if the available disk space on the server is low GoCD will purge artifacts when available disk space is lower than the given value Artifacts will be purged up to the point when available disk space is greater than a defined value Configuration Specify artifact purge start and end limits You must be logged in as an admin user to configure this step Navigate to the Admin section on the GoCD dashboard Navigate to the Pipeline Management subsection Specify when GoCD should begin to purge artifacts in the first edit box Specify when GoCD should stop purging artifacts in the second edit box Never delete artifacts for a stage You must be logged in as an admin user to configure this step You can disallow deletion of artifacts from a particular stage so that those artifacts are excluded during deletion This option can be set in the stage editor for a pipeline This option can be set for stages that are important so that artifacts for the stage are preserved Navigate to the admin section on the GoCD dashboard Navigate to the pipelines section and choose a pipeline to edit Navigate to the stage settings for the stage Check the box Never Cleanup Artifacts Also see Managing artifacts and reports Clean up after cancelling a task "},{"title":"Authentication","href":"/configuration/dev_authentication.html","content":"Authentication A newly installed GoCD server does not require users to authenticate This is great for a trial However it is one of the first things you should change as soon as you decide to use GoCD more widely GoCD has two methods of authentication built into it Passwordfile based authentication and LDAPActive Directory authentication You can also choose from a collection of communitymaintained plugins for other methods of authentication such as using Google or GitHub OAuth You can even write your own plugins for authentication as in usernamepassword combination or authorization as in deciding which GoCD roles a user should be allowed into by using the authorization plugin endpoint quotAuthorization configurationquot is the term used in GoCD for the configuration which allows a GoCD administrator to configure the kind of authentication and authorization used by it GoCD can be setup to use multiple authorization configurations at the same time Note The order of the configurations matters They will be tried from the first one to the last one and each authorization configuration will be given a chance to authenticate a user when a user tries to log in If the user is successfully allowed by one of the configurations then the following configurations will not be used Consider the example image below In this example the password file authentication method will be tried first If that succeeds the user will be allowed to log in If not the LDAP authentication method will be tried next If that succeeds the user will be allowed to log in If not the user will be disallowed from logging in Builtin methods of authentication Passwordfile authentication Create an authorization configuration by going to the quotAdminquot menu and then into quotSecurityquot and then quotAuthorization Configurationquot Click on quotAddquot and provide any identifier ID for the configuration and then choose quotPassword File Authentication Plugin for GoCDquot Provide the path to a password file on the GoCD server The password file plugins documentation has information about the values that can go into a password file LDAPAD authentication Create an authorization configuration by going to the quotAdminquot menu and then into quotSecurityquot and then quotAuthorization Configurationquot Click on quotAddquot and provide any identifier ID for the configuration and then choose quotLDAP Authentication Plugin for GoCDquot Provide the appropriate values for your LDAP server You might need to talk to the LDAPAD server administrator at your organization to get the right values The LDAP authentication plugins documentation has more information about the configuration It youve installed any other plugins they will also be available at the quotAuthorization Configurationquot page ready to be setup Configurable properties You can use one or more of the below to tweak settings such as the session configuration System property name Default value Description "},{"title":"Authorizing Users","href":"/configuration/dev_authorization.html","content":"Authorization With no security switched on there is of course no authorization either Once you have configured security the default is that any user can perform any operation However GoCD can limit certain operations to particular Users or Roles and manage membership of those Roles Administrators GoCD allows you to restrict the users who can perform certain functions Administrators is a special role that allows its members to perform any action in GoCD Specifying administrators is optional without it all users are automatically made administrators If administrators are specified only they can perform the following actions Access the quotadministrationquot tab AddEdit Pipeline Templates Enable agents Add remove agent resources Users can be made administrators from the quotUser Summaryquot tab in the quotAdminquot section To give admin privileges to users andor roles via quotConfig xmlquot please refer to the example in the section below where members of the quotgoadminquot role jhumble and qiao along with the user chris can administer Go Rolebased security You can define roles that can be used anywhere that authorization is required A role is just a group of users Administrators can add users to a new or existing role from the quotUser Summaryquot tab in the quotAdminquot section Here you can select any number of users and assign a new or existing role to them In this example user quotaantonyquot is being added to the role quotanalystquot For power users heres how you would configure roles via quotConfig XMLquot ltcruisegt ltservergt ltlicense gt ltsecuritygt ltpasswordFile pathquotetcgoserverpasswordspropertiesquot gt ltrolesgt ltrole namequotqaquotgt ltusersgt ltusergtdyangltusergt ltusergtpavanltusergt ltusersgt ltrolegt ltrole namequotgoadminquotgt ltusersgt ltusergtjhumbleltusergt ltusergtqiaoltusergt ltusersgt ltrolegt ltrolesgt ltadminsgt ltrolegtgoadminltrolegt ltusergtchrisltusergt ltadminsgt ltsecuritygt ltservergt ltcruisegt In this example the quotqaquot role has two users dyang and pavan The quotgoadminquot role also has two users jhumble and qiao Specifying permissions for pipeline groups GoCD allows you to group pipelines together If you define pipeline groups you can specify who is able to view or operate those groups To do this you configure permissions to the pipeline group System administrators will continue to have full access to the pipeline group even if they have not been explicitly granted permissions The quotviewquot permission allows users to view the pipeline It does not give permission to trigger pipelines approve stages or rerun stages In the below example the users quotakrishnaquot and quotaantonyquot can view the pipelines in this group but they cannot perform any operations on it The quotoperatequot permission allows users to trigger pipelines and its stages In the below example the role quotdeveloperquot is being granted the operate permission and will be able to trigger pipelines and its stages within this group The quotadminquot permission makes the user a Pipeline Group Administrator allowing him to view operate and administer the pipeline group In the below example role quotadminsquot has been granted this permission Note that is is possible to give a user or role only the operate permission In the example below the user quotbotquot only has operate permission That means they can not view the pipeline they can only operate it This can be used to enable a script to operate on pipelines via the APIs without letting that user access any other features of Go To edit the permissions for a pipeline group navigate to the quotPipelinesquot tab on the quotAdminquot section Then click the quotEditquot link for the pipeline group you want to manage permissions for If no authorization is defined for a pipeline group all GoCD users will have view and operate permissions to that group For power users heres how you would configure permissions via quotConfig XMLquot ltpipelines groupquotShinequotgt ltauthorizationgt ltviewgt ltusergtaantonyltusergt ltusergtakrishnaltusergt ltrolegtdeveloperltrolegt ltviewgt ltoperategt ltusergtbotltusergt ltrolegtdeveloperltrolegt ltoperategt ltadminsgt ltrolegtadminsltrolegt ltadminsgt ltauthorizationgt ltpipelinesgt Adding authorization to approvals In GoCD it is possible to specify manual approvals between stages You can also specify which user is allowed to trigger manual approvals The authorization can be inherited from the pipeline group this pipeline belongs to But defining specific permissions overrides this In the example below only members of the role quotadminquot and the user quotgoleysquot can trigger the approval For power users heres how you would configure authorization for approvals for a stage via quotConfig XMLquot ltstage namequotdefaultStagequotgt ltapproval typequotmanualquotgt ltauthorizationgt ltrolegtadminltrolegt ltusergtgoleysltusergt ltauthorizationgt ltapprovalgt ltjobsgt ltjob namequotdeployquotgt ltresourcesgt ltresourcegtuatltresourcegt ltresourcesgt lttasksgt ltant targetquotdeployquot gt lttasksgt ltjobgt ltjobsgt ltstagegt lta idquottemplateadminquotgtltagt Specifying permissions for templates A GoCD Administrator can make any user a template administrator for a specific template As a template administrator a user can now view and edit the template to which he has permissions To edit the permissions for a template navigate to the quotTemplatesquot tab on the quotAdminquot section Then click the quotPermissionsquot link for the template you want to manage permissions for For power users heres how you would configure permissions via quotConfig XMLquot lttemplatesgt ltpipeline namequotapp1templatequotgt ltauthorizationgt ltadminsgt ltusergtoperateltusergt ltadminsgt ltauthorizationgt ltpipelinegt lttemplatesgt Also See Delegating group administration "},{"title":"Choose When a Stage Runs","href":"/configuration/dev_choose_when_stage_runs.html","content":"Choose when a GoCD stage runs Often there are steps in your pipeline that you do not want to happen automatically For example you might want to keep binaries from being created for every pipeline to prevent running out of disk space or want to choose when your code is deployed to production Stages in GoCD can be marked as manual just for this purpose You can create a manual pipeline by setting the first stage to manual Example usage Usage We need a manual dist stage that will create the binaries used by later stages Add a new stage named dist after a build stage Set the Stage type to manual Now when the build stage build is completed you can manually cause GoCD to create the binary from the Pipeline activity page "},{"title":"Notifications","href":"/configuration/dev_notifications.html","content":"Notifications It is often useful to receive an email when certain status changes occur in a stage For example a developer might want to know when their own checkin has broken the build Alternatively a manager might want an email whenever a project is deployed into production Both of these scenarios can be covered by Notification Filters Notifications will only work if Security is enabled and mailhost information is correct Example usage Usage As a developer I want to be notified when I break a build on quotacceptancequot pipeline Click on the Preferences tab Click quotEditquot and enter the email address and make sure quotEnable email notificationquot is checked When I check in my source control log in will be either quotUserquot or quotusernamequot so enter both of those into the quotMy checkin aliasesquot box Click quotSavequot to store these values Add a filter for the quottwistpluginsquot stage of quotacceptancequot pipeline to notify me when a checkin of mine breaks the build Events You can set up notifications for different events All all the runs for the stage Passes the passed runs for the stage Fails the stage run that continues to fail Breaks the stage run that broke the build Fixed the stage run that fixed the previous failure Cancelled the stage run that was cancelled Previous state influences Event type The table below shows how the previous state can influence the triggered event Previous state Current state Event "},{"title":"Publish Reports and Artifacts","href":"/configuration/dev_upload_test_report.html","content":"Publishing artifacts When executing a job on an agent there are often artifacts created that we need to keep around For example JUnit creates xml reports that GoCD is able to parse in order to help you understand why the build is broken You can use GoCD with any JUnit style xml reports Or you might create a flash video of your UI tests that we want displayed in GoCD You can upload any html file from your build and view it in GoCD To publish artifacts you add a an lt artifact gt to the job configuration More information can be found on the Managing artifacts and reports page Example usages Uploading JUnit xml reports We are going to assume that the JUnit test reports are being placed in the quottargetreportsquot folder Click on the Administration tab Click on your pipeline For each job that runs JUnit Click on the job name to edit job config Add the source of the test artifact For tests choose the type of artifact as Test artifact Click quotSavequot Uploading a flash video and displaying it as a subtab We are going to assume that the flash file and the html file referencing it are being created in the quottargetreportsquot folder Click on the Administration tab Click on your pipeline For each job that creates a flash video Click on the job name to edit the job config Navigate to the quotArtifactsquot Add the source of the artifact Choose the type of artifact as Build artifact This will copy all files from the quottargetreportsquot folder on the agent to the quotRecordingquot folder on Go server Navigate to quotCustom Tabsquot Add the tab name and the source of the html file This will create a tab called quotRecordingquot that shows the html page found at quotrecordingtwistrecordinghtmlquot on GoCD server Click quotSavequot Watch the flash video as a subtab on the Job Details page "},{"title":"Elastic Agents","href":"/configuration/elastic_agents.html","content":"GoCD Elastic Agents Introduction Elastic Agents is an extensionpoint in GoCD that allows for ondemand agents which are created and provisioned by an elasticagent plugin when there are jobs to be executed and terminated when the agents are running idle These agents can be in a data center or in the cloud or both and may be physical or virtual Developers can start building their own elasticagent plugins by forking the skeleton plugin and looking at a sample docker plugin docker swarm plugin as an example reference implementation Why elastic agents A feature like this can allow for more efficient use of agent machines can allow flexible scaling and in many cases can reduce the cost of running agents Imagine an automated performance test which runs occasionally and needs a lot of machines These machines can be started at the beginning of the performance test possibly using some cloud service and then brought down when not needed This feature should enable a more flexible and dynamic build grid Configuration of elastic agents Using GoCD elastic agents requires downloading and installing one of the available elastic agents plugin Once the plugin is downloaded and installed make sure to Setup and configure the plugin from the plugin settings page Admin gt Plugins Configure an elastic agent profile Admin gt Elastic Agent Profiles Associate the elastic agent profile with one or more jobs Concepts There are a few basic concepts to understanding the elastic agent plugins in GoCD Plugin Settings Plugin settings will usually contain the connection settings so that the GoCD server can connect to the elastic provider An elastic provider depending on the plugin may be a docker server or a kubernetes cluster Elastic Agent Profile An elastic agent profile will usually contain the configuration for your agent Depending on the plugin used this may contain the machine image ami docker image size of the CPUmemorydisk network settings among other things Once an elastic agent profile is defined it should then be associated with a particular job Its possible to define several profiles for different types jobs "},{"title":"Job Timeout","href":"/configuration/job_timeout.html","content":"Job Timeout Introduction GoCD can be configured to automatically cancel jobs that do not generate any console output for a period of time Default Job timeout options include Never Jobs will never be timed out by default You can override this behavior when configuring the job in the job editor Timeout after a period of inactivity A job will be cancelled if it did not have any console output for a period of time in minutes When a job is timed out the onCancel task for the job will be triggered Note GoCD will use this property and cancel jobs that are in Building state only Configuration Specify default job timeout at the server level You must be logged in as an admin user to configure this step Navigate to the Admin section on the GoCD dashboard Navigate to Server configuration Navigate to the pipeline management subsection Enter the default timeout for a job Configure timeout behavior for a job You must be logged in as an admin user to configure this step You can configure timeouts for each job if the timeout behavior needs to be different from the default timeout Navigate to the Admin section on the GoCD dashboard Navigate to the job settings page for the job Choose the desired timeout behavior You can choose to never timeout the job provide a specific value or use the default job timeout Also see Adding a job Clean up after cancelling a task "},{"title":"Managing Agents","href":"/configuration/managing_a_build_cloud.html","content":"Managing GoCD agents GoCD is designed to make managing a build cloud extremely simple This page takes you through the lifecycle of expanding your cloud and maintaining your agents Adding a GoCD agent to your cloud The first thing you need to do is install Go agent on the machine you want to add to the cloud Once the GoCD agent has been installed and pointed at your GoCD server go to the Agents tab on the GoCD dashboard You should see something like this Note that the hostname is as reported by the agent and the IP address is as reported by the server To add the agent to the cloud click quotEnablequot Note that even after you have clicked quotEnablequot the agent will not be enabled until it next contacts the server so if your agent has stopped talking to the server nothing will happen Once your agent has successfully been enabled it should no longer appear greyed out and will and be marked quotidlequot At this point your agent will automatically begin picking up jobs Agents will automatically check out any code they need in order to start running jobs Matching jobs to agents In its default state GoCD server will assign scheduled jobs to the first available agent GoCD doesnt have the ability to determine what operating system or other resources are present on a given agent If you want particular jobs to run on particular agents youll need to specify resources You can specify one or more resources that a particular job needs in order to execute In the same way you can specify that an agent has one or more resources Go will then match jobs to agents such that a job will only run on agents which have at least the resources required for that job Resources are just plain text tags There are no preset tags or conventions around tagging just use what makes sense to you You might for example use operating systems as tags quotRHEL linuxquot quotWindows XPquot You could also use browsers databases or whatever else makes sense We recommend you let your classification be driven by your jobs if you know that certain jobs will only work on certain machines tag the jobs with the special resource or resources that job needs in order to work and then classify the agents accordingly Note Resource matching is caseinsensitive To specify the resources that a job needs go to the Pipelines configuration section of the Administration tab and edit the job that you want to specify resources for Once youve specified the resources your jobs need youll want to describe the resources your agents have You can do this very easily in the Agents tab Just select the agents you want to describe and click on the Resources button Associate selected agents with a newly created resource Enter the name of the new resource and click the quotAddquot button Associate selected agents with existing resources All existing resources across your agents and jobs will appear in alphabetical order Select one of three states for all resources you want to associate and then click the quotApplyquot button A resource with a check will add the resource to all selected agents A resource with a hyphen means some of your selected agents are associated to it No change will occur after clicking quotApplyquot A resource without a check will remove the resource from all selected agents Agent states GoCD will tell you if it loses touch with agents If GoCD server doesnt hear from an agent for two minutes the agent will turn red in the Agents tab and GoCD will tell you the last time it heard from the agent GoCD will also transparently reassign the build to the next available agent that can run it if the lost agent was building a job GoCD will also let you know if one of the agents it knows about has never contacted it since GoCD server was last started In this case the agents state will be marked as quotmissingquot and it will be gray If an agent is working on a job it will turn orange and display the name of the job it is working on You can click on the job description to go to the job details page for that job Removing agents If you want to remove an agent from GoCDs build cloud go to the agents tab locate the agent you want to remove and click on the button marked quotDisablequot GoCD will record in its configuration that this agent should be excluded from the build cloud If you restart Go server the agent will continue to be disabled Disabled agents do not count towards GoCDs licensed agents To permanently remove an agent from Gos configuration you can use the agent api or delete from the agents tab The agent must be disabled before it can be deleted Following this procedure if you restart the agent GoCD server will see it as a new agent and you can enable it again in the same way as described above Pausing agents If you want to pause an agent or temporarily disable it so that GoCD server will not assign work to the agent GoCD will record in its configuration file that the agent has been disabled This means if you restart GoCD server the disabled agent will remain disabled You can use the following api to disable agents or you can disable the agent from the agents tab A disabled agent can be enabled this will make it eligible to pick up work again You can use the api or enable an agent from the agents tab Details of a single agent GoCD now provides a page that shows the details of a single agent This page provides details about the agent configuration and the history of all the jobs that ran on that agent Agent Details tab This tab shows the configuration and runtime information of an agent For example this tab shows the free space available on the agent the IP Address and the OS of the agent In terms of configuration this tab shows the resources of the agent and the environment it belongs to A sample Details tab looks as below Job Run History tab You must be logged in as an admin user to configure this step This tab shows a table of all the completed jobs that ran on this agent A sample page is shown below For every job the following columns are shown Pipeline The pipeline to which the job belongs to Stage The stage to which the job belongs to Job The name of the job Result The result of the job Passed Failed Cancelled or Rescheduled Completed The date when the Job completed Duration The duration that the Job took to finish from scheduled till completed The job listing table can be sorted on any column except for the Duration column Using Agent details to debug agent issues This page is useful to figure out if there are agent issues and hence a certain job keeps failing on that agent Consider a job which runs functional tests for a web application that need a browser to be available The job was passing so far and only recently it has started to fail intermittently Here are the steps you can follow to figure out if this is an agent issue Navigate to the Job Details page of the given job that failed Locate the quotAgentquot label and click on the link to the agent Navigate to the quotJob Run Historyquot tab Sort on the Job Name and locate the job that just navigated from Youd notice that the job started to fail recently You can even see if there are other jobs that have started failing around the same time by now sorting on the Completed date"},{"title":"Managing Artifacts and Reports","href":"/configuration/managing_artifacts_and_reports.html","content":"Managing artifacts and reports Because all your work is done on remote agents GoCD provides a mechanism for files to be automatically uploaded to GoCD server following the completion of every job These files can then be accessed via the GoCD server dashboard or via the RESTful API Publishing artifacts The first step in using the artifact repository is to tell GoCD which files you want to publish To do this just specify the path to the file or directory relative to the root of the source control checkout You also need to specify where GoCD will publish the artifact You can add as many files and directories as you like To configure an artifact Navigate to Admin Pipelines Edit the pipeline you want to configure artifacts for Expand the left tree navigator and click on your job Click on the Artifacts tab Enter the source where the artifact will be found and destination where the artifact should be saved on the Go server For power users heres how you would configure this via Config XML ltartifactsgt ltartifact srcquottargetcommonlibdllquot destquotpkgquot gt ltartifactsgt Using tabs Once your artifacts are safely in GoCD servers artifact repository you can have the dashboard display them in tabs GoCD can display images text files or anything else that a browser will normally render in an IFrame If you display an html page which references other resources such as images Flash files or whatever so long as the resources are referenced with relative paths they will display correctly This mechanism is a simple way to include reports for example code coverage in Go Example The console tab shows output information from all the phases of the job This also includes information from the version control system and details regarding the artifacts created and published during the job If you produce an html page with an embedded Flash file into your artifact repository You can use the following configuration to display it in a tab lttabsgt lttab namequotRecordingquot pathquotdeploymentdropsmokesmokerecordinghtmlquot gt lttabsgt GoCD will create a tab called quotRecordingquot and display the contents of the file in the tab when you click on it Publishing tests GoCD has support for publishing tests from JUnit or NUnit test reports To configure a test artifact Navigate to Admin Pipelines Edit the pipeline you want to configure artifacts for Expand the left tree navigator and click on your job Click on the Artifacts tab Enter the source where the artifact will be found and destination where the artifact should be saved on the Go server From the Type dropdown select Test Artifact For power users heres how you would configure this via Config XML ltartifactsgt lttest srcquotxstreamtargettestreportsquot gt ltartifactsgt GoCD will add a tab called Tests that lists the tests in the project add a list of the failed tests to the Failures tab set the properties associated with tests on the job These include failedtestcount ignoredtestcount testtime and totaltestcount copy the artifacts into the repository In this case the test reports will be copied into a new directory testreports in the artifact repository RESTful API GoCD publishes all of its information as resources that can be queried through http in the form of RESTful API See the Go integration page for more information"},{"title":"Managing Dependencies","href":"/configuration/managing_dependencies.html","content":"Managing dependencies Sometimes you need more complex triggers than a simple pipeline of stages and jobs In particular you may want a pipeline to trigger based on the result of a stage in another pipeline This is possible by adding pipelines as materials Creating a dependency Say we have two pipelines upstreampipeline and downstreampipeline We want downstreampipeline to automatically trigger following the successful completion of the stage AutoStage1 in pipeline upstreampipeline Heres how wed achieve this Navigate to the Admin section On the Pipelines screen locate the downstreampipeline pipeline and Edit it Click on the Materials tab Add a new pipeline dependency material by clicking Add Material and then selecting Pipeline Youll be presented with an Add Material popup see screenshot Enter upstreampipeline AutoStage1 in the Pipeline stage field it can also autocomplete Power users can also configure this via the Config XML tab on the Admin section Configuration reference is here ltpipeline namequotdownstreampipelinequotgt ltmaterialsgt ltpipeline pipelineNamequotupstreampipelinequot stageNamequotAutoStage1quotgt ltmaterialsgt ltpipelinegt Now when the stage quotAutoStage1quot of quotupstreampipelinequot completes the pipeline quotdownstreampipelinequot will start building The Pipeline Dependency visualization shows you all the downstream instances that were triggered off the upstream instance label 14 currently being viewed If you want to view the materials that are associated with quotdownstreampipelinequot the pipeline details page for that specific instance of the downstream pipeline will show you all this information Fetching artifacts from an upstream pipeline GoCD can automatically fetch artifacts from a previous stage of the current pipeline or from any ancestor pipeline it depends on This is useful when a pipeline depends on binaries that are produced earlier in the pipeline Note that you can not specify two or more dependencies for the same upstream pipeline For example in the following configuration when the stage quotAutoStage1quot of pipeline quotupstreampipelinequot passes the pipeline quotdownstreampipelinequot starts and the artifacts are fetched from the upstream pipeline in the stage Stage of quotdownstreampipelinequot You can see the exact pipeline and stage that triggered this in the subtab Materials on the stage details page You can do this via the admin screens for the respective pipelines Youll need to first define the artifact in the quotupstreampipelinequot at the job level Then youll want to retrieve fetch that artifact from within the quotdownstreampipelinequot You can do this by creating a quotFetch Artifactquot task within a job in that pipeline Since you have already defined quotupstreampipelinequot as a dependency material artifacts from that pipeline are accessible in this pipeline A fetch task can also be instructed to retrieve fetch an artifact from an ancestor pipeline For example lets assume that the quotupstreampipelinequot used in this example depends on another pipeline quottopmostpipelinequot Then you can define a a quotFetch Artifactquot task to fetch artifacts from quottopmostpipelinequot by defining the hierarchy of these pipelines as follows You have to specify the hierarchy by separting the pipelines with a For example topmostpipelineupstreampipeline For power users heres how you can configure this via the Config XML tab on the Admin section Configuration reference is here ltpipeline namequottopmostpipelinequotgt ltmaterialsgt ltsvn urlquotquotgt ltmaterialsgt ltstage namequotTopStage1quotgt ltjobsgt ltjob namequottopJobquotgt lttasksgt ltnant gt lttasksgt ltartifactsgt ltartifact srcquottargetmylibdllquot destquotlibquotgt ltartifactsgt ltjobgt ltjobsgt ltstagegt ltpipelinegt ltpipeline namequotupstreampipelinequotgt ltmaterialsgt ltsvn urlquotquotgt ltpipeline pipelineNamequottopmostpipelinequot stageNamequotTopStage1quotgt ltmaterialsgt ltstage namequotAutoStage1quotgt ltjobsgt ltjob namequotfirstJobquotgt lttasksgt ltnant gt lttasksgt ltartifactsgt ltartifact srcquottargetcommonlibdllquot destquotpkgquotgt ltartifactsgt ltjobgt ltjobsgt ltstagegt ltpipelinegt ltpipeline namequotdownstreampipelinequotgt ltmaterialsgt ltpipeline pipelineNamequotupstreampipelinequot stageNamequotAutoStage1quotgt ltmaterialsgt ltstage namequotStagequotgt ltjobsgt ltjob namequotfetchFromParentJobquotgt lttasksgt ltfetchartifact pipelinequotupstreampipelinequot stagequotAutoStage1quot jobquotfirstJobquot srcfilequotpkgcommonlibdllquot destquotlibsquotgt lttasksgt ltjobgt ltjob namequotfetchFromAncestorJobquotgt lttasksgt ltfetchartifact pipelinequottopmostpipelineupstreampipelinequot stagequotTopStage1quot jobquottopJobquot srcfilequotlibmylibdllquot destquotlibsquotgt lttasksgt ltjobgt ltjobsgt ltstagegt ltpipelinegt "},{"title":"Managing Environments","href":"/configuration/managing_environments.html","content":"Managing environments GoCD is configured using an XML configuration file This file can be edited through the GoCD server dashboard GoCD allows you to edit sections of the configuration independently and will check the syntax of the configuration before it saves it again You can also edit the full XML file if you wish by clicking on the Config XML section of the Administration tab Creating a new environment An Environment is a grouping of pipelines and agents By assigning an agent to an environment it will be used to run only those jobs that belong to the pipelines of that environment An agent can belong to more than one environment This means for instance the same agent can be used to deploy something into an UAT or a Performance testing environment A pipeline can however only be assigned to a single environment Generally these pipelines represent the tasks that need to happen in a given environment For example deploying a 3tier application into an UAT environment with 6 machines and running smoke tests on the setup However once an agent is associated with one or more environments it is no longer capable of picking up jobs on pipelines that do not belong to environments Pipelines outside of environments will only be assigned to agents in the default pool not associated with any environment You can create an environment in the admin UI through the following steps This example creates a production environment adding the deployment pipeline and the agent installed on the production server Click on the Environments tab Click on the quotAdd a new environmentquot Provide a name for the environment Add one or more pipelines that need to run on the environment Add one or more agents associated with the environment Add one or more environment variables or secure environment variables that need to be passed Click on finish Setting up an environment through the xml can be found in the configuration reference Add a new agent to an existing environment You can do this very easily in the Agents tab Just select the agents you want to add to your environment and click on the Environments button All existing environments will appear in alphabetical order Select one of three states for all environments you want to add and then click the quotApplyquot button An environment with a check will add the environment to all selected agents An environment with a hyphen means some of your selected agents are associated to it No change will occur after clicking quotApplyquot An environment without a check will remove the environment from all selected agents "},{"title":"Managing Pipelines","href":"/configuration/managing_pipelines.html","content":"Managing GoCD pipelines GoCD can be configured using Administration Tab You can perform operations like addedit Pipelines Stages Jobs Tasks Templates and Pipeline group You can also configure GoCD by editing the full XML file if you wish by clicking on the Config XML section of the Administration tab GoCD will check the syntax of the configuration before it saves it again Creating a new pipeline To create a new pipeline go to the Pipelines subtab of the Administration tab and click on the quotCreate a new pipeline within this groupquot link as shown in the screen shot below Add a new material to an existing pipeline Now that you have a pipeline lets add another material to it Navigate to the new pipeline you created by clicking on the Edit link under the Actions against it You can also click on the name of the pipeline Click on the Materials tab You will notice an existing material Click on the quotAdd new materialquot link You will get the following message Edit the existing material and specify the destination directory Click quotSavequot Blacklist Often you do want to specify a set of files that Go should ignore when it checks for changes Repository changesets which contain only these files will not automatically trigger a pipeline These are detailed in the ignore section of the configuration reference Enter the items to blacklist using antstyle syntax below Click quotSavequot Add a new stage to an existing pipeline Now that you have a pipeline with a single stage lets add more stages to it Navigate to the new pipeline you created by clicking on the Edit link under the Actions against it You can also click on the name of the pipeline Click on the Stages tab You will notice that a defaultStage exists Click on the quotAdd new stagequot link Fill stage name and trigger type Fill in the details for the first job and first task belonging to this job You can add more jobs and add more tasks to the jobs Click on help icon next to the fields to get additional details about the fields you are editing Click quotSavequot Add a new job to an existing stage Now that we have a pipeline with stages we can add more jobs to any of the existing stages You can now use the tree navigation on the left side of the screen to edit a stage or a job under a pipeline Click on the stage name that you want to edit on the tree as shown below The quotdefaultStagequot is being edited Click on the Jobs tab Click on quotAdd new jobquot Fill job name and job details Fill in the details for the initial task belonging to this job You can edit this job later to add more tasks You can choose the type of the task as required For task types Ant Nant and Rake the build file and target will default as per the tool used For example Ant task would look for buildxml in the working directory and use the default task if nothing is mentioned Click on help icon next to the fields to get additional details about the fields you are editing Click quotSavequot Add a new task to an existing Job Now that we have a pipeline with stages containing jobs we can add tasks to any of the existing jobs You can now use the tree navigation on the left side of the screen to edit a job under a stage Click on the job name that you want to edit on the tree as shown below The quotdefaultJobquot is being edited Click on quotAdd new taskquot You can choose the task type from Ant Nant Rake and Fetch Artifact Or you can choose quotMorequot to choose a command from command repository or specify your own command Fill the basic settings for the task Click on help icon next to the fields to get additional details about the fields you are editing Click quotSavequot Advanced Options section allows you to specify a Task in which you can provide the actions typically clean up that needs to be taken when users chooses to cancel the stage Clone an existing pipeline Clone pipeline functionality helps you create a new pipeline from an existing pipeline by giving it a new name Typically when setting up a pipeline for a new branch it is very useful to take an existing pipeline and clone it If the user is a pipeline group admin she can clone the new pipeline into a group that she has access to If the user is an admin she can clone the pipeline into any group or give a new group name in which case the group gets created Navigate to the Admin tab Locate the pipeline that needs to be cloned In that row click on the quotClonequot icon Fill in the name of the new pipeline Select a pipeline group If you are an admin you will be able to enter the name of the pipeline group using the auto suggest or enter a new group name Click quotSavequot Delete an existing pipeline Deleting a pipeline removes an existing pipeline from the config Warning Pipeline history is not removed from the database and artifacts are not removed from artifact storage which may cause conflicts if a pipeline with the same name is later recreated Navigate to the Admin tab Locate the pipeline that needs to be deleted In that row click on the quotDeletequot icon Pipeline Templates Templating helps to create reusable workflows in order to make tasks like creating and maintaining branches and managing large number of pipelines easier Creating Pipeline Templates Pipeline Templates can be managed from the Templates tab on the Administration Page Clicking on the quotAdd New Templatequot brings up the following form which allows you to create a fresh template or extract it from an existing pipeline Once saved the pipeline indicated will also start using this newly created template A template can also be extracted from a pipeline using the quotExtract Templatequot link This can be found on the quotPipelinesquot tab in the Administration page Example As an example assume that there is a pipeline group called quotmyappquot and it contains a pipeline called quotapptrunkquot which builds the application from trunk Now if we need to create another pipeline called quotapp10branchquot which builds 10 version of the application we can use Pipeline Templates as follows Using Administration UI Create a template quotmyappbuildquot by extracting it from the pipeline quotapptrunkquot as shown in the previous section Create a new pipeline quotapp10branchquot which defines SCM material with the branch url and uses the template quotmyappbuildquot Using XML Power users can configure the above as follows ltpipelines groupquotmyappquotgt ltpipeline namequotapptrunkquot templatequotmyappbuildquotgt ltmaterialsgt ltsvn urlquothttpmysvnurltrunkquot gt ltmaterialsgt ltpipelinegt ltpipeline namequotapp10branchquot templatequotmyappbuildquotgt ltmaterialsgt ltsvn urlquothttpmysvnurlbranches10quot gt ltmaterialsgt ltpipelinegt ltpipelinesgt lttemplatesgt ltpipeline namequotmyappbuildquotgt ltstage namequotbuildquotgt ltjobsgt ltjob namequotcompilequotgt lttasksgt ltant targetquotcompilequot gt lttasksgt ltjobgt ltjobsgt ltstagegt ltpipelinegt lttemplatesgt Editing Pipeline Templates Go Administrators can now enable any Go user to edit a template by making them a template administrator Template administrators can view and edit the templates to which they have permissions on the template tab of the admin page Template Administrators will however not be able to add delete or change permissions for a template They will also be able to see the number of pipelines in which the template is being used but not the details of those pipelines Viewing Pipeline Templates Pipeline Templates can now be viewed by Administrators and Pipeline Group Administrators while editing or creating a Pipeline Clicking on the icon indicated by arrow will display the following The popup shows the extract of the template quotServicesTemplatequot configured for the pipeline quotService1quot Shows the details of the job quotcompilejobquot configured for the stage quotcompilequot Indicates that the working directory set for the task is quotgoservice1quot which is followed by the quotquot symbol and then the command If any quotOn Cancel Taskquot has been configured it will be indicated like this Shows the quotRun If Conditionquot for this task See also Templates Configuration Reference Stage approvals in action By default when one stage completes successfully the next stage is automatically triggered by Go However sometimes you dont want the next stage to be triggered automatically This might be the case if you have a stage that deploys your application to a testing staging or production environment Another case can be when you dont want your pipeline to be automatically triggered by changes in version control In these situations you want the stage triggered by manual intervention This can be done through manual approvals If you add a manual approval to the first stage in a pipeline it will prevent the pipeline from being triggered from version control Instead it will only pick up changes when you trigger the pipeline manually this is sometimes known as quotforcing the buildquot You can control who can trigger manual approvals See the section on Adding authorization to approvals for more details Managing pipeline groups There is support for collecting multiple pipelines into a single named group See the section on Specifying who can view and operate pipeline groups for more details"},{"title":"Managing Users","href":"/configuration/managing_users.html","content":"Managing Users GoCDs user management features allow you to control access to GoCD and grant rolebased permissions All user management features depend on an authentication mechanism having been configured in GoCD Please ensure you have at least one authentication mechanism enabled before attempting to use any of the features mentioned in this chapter Adding Users Navigate to the Admin section Click on the quotUser Summaryquot tab Click the quotAdd Userquot button Enter a nameemail to search for minimum 2 characters and click quotSearchquot This will perform a search across all authentication mechanisms configured password file andor LDAP From the list of results select the user to add and click quotAdd Userquot Assigning Roles Roles allow you to group a set of users with similar functional duties and grant them a common set of permissions For example you may have 3 pipelines configured as part of your workflow build acceptance and deploy You team may consist of 6 developers and 2 testers With roles you can group all 6 of your developers into a role called quotdevelopersquot and your 2 testers into a role called quottestersquot Youd then assign the following permissions to your pipelines build Auto triggered pipeline with approval permissions granted to both developers and testers acceptance Auto triggered pipeline with approval permissions granted to testers only deploy Manually triggered pipeline with approval permissions granted to testers only With this setup your entire team has visibility into what each other is doing but you have controls around which role can do what To assign roles to users Navigate to the Admin section Click on the quotUser Summaryquot tab Select the users you want assign roles to or remove roles from Click the quotRolesquot button to see a list of roles Checkuncheck the roles you want to assignremove from the selected users and click quotApplyquot Alternately you can create a new role to apply to the selected users by typing in the name of a role in the input box and clicking quotAddquot Managing Go System Administrator privilege Go System Administrator has access to all administrative functions and has operational access to all parts of a Go installation User management page allows you to assign admin privileges to or revoke admin privileges from selected users This control allows you to modify admin privileges for users not for roles Applying the special Go System Administrator role for selected users adds them directly to ltadminsgt configuration tag This control is disabled when one or more of the selected users have implicit admin privilege through roles AssignRevoke Go System Administrator privilege Navigate to the Admin section Click on the quotUser Summaryquot tab Select the users you want assignrevoke Go System Administrator privilege Click the quotRolesquot button to load Go System Administrator control Checkuncheck the Go System Administrator checkbox and click quotApplyquot "},{"title":"Pipeline Group Administration","href":"/configuration/pipeline_group_admin_config.html","content":"GoCD Pipeline Groups Administration Pipeline Group Administrators in GoCD can add remove and edit pipelines in their respective pipeline groups They can do these operations via the UI as well by editing the config XML of the pipeline group They can also manage the templates and add any package repositories with the help of plugins Administration using UI The administration page for a pipeline group administrator looks as follows The controls on the quotPipelinesquot tab allows her to edit clone delete and move any pipeline Administration using XML The tab quotConfig XMLquot shows the XML snippets of each pipeline group The user can toggle between different pipeline groups and viewedit them one at a time Administration using Templates The pipeline group administrator will be able to manage the templates from the template section They will be able to create new templates and use existing pipeline templates Administration using Package Repository The administrator will be able to add new package repositories They can also use the existing package repositories that are configured by the GoCD system administrator "},{"title":"Pipeline Scheduling","href":"/configuration/pipeline_scheduling.html","content":"GoCD Pipeline Scheduling Pipelines get scheduled automatically by default Please see the knowledge base article in the Also see section below Here well see how to disable automatic scheduling Disable automatic scheduling Unchecking the quotAutomatic Pipeline Schedulingquot checkbox above disables auto scheduling Actually this is the same as marking first stage as manual We have just surfaced the option at a pipeline level to make it easier to spot Please note though that this isnt really a pipeline level configuration For example if this is pipeline is based off a template the checkbox above will be grayed out to indicate that it can only be toggled by editing the first stage in the template Also see Different Types of Triggers for a Pipeline "},{"title":"Pipeline Templates","href":"/configuration/pipeline_templates.html","content":"GoCD Pipeline Templates Templating helps to create reusable workflows in order to make tasks like creating and maintaining branches and managing large number of pipelines easier Creating Pipeline Templates Pipeline Templates can be managed from the Templates tab on the Administration Page Clicking on the quotAdd New Templatequot brings up the following form which allows you to create a fresh template or extract it from an existing pipeline Once saved the pipeline indicated will also start using this newly created template A template can also be extracted from a pipeline using the quotExtract Templatequot link This can be found on the quotPipelinesquot tab in the Administration page Example As an example assume that there is a pipeline group called quotmyappquot and it contains a pipeline called quotapptrunkquot which builds the application from trunk Now if we need to create another pipeline called quotapp10branchquot which builds 10 version of the application we can use Pipeline Templates as follows Using Administration UI Create a template quotmyappbuildquot by extracting it from the pipeline quotapptrunkquot as shown in the previous section Create a new pipeline quotapp10branchquot which defines SCM material with the branch url and uses the template quotmyappbuildquot Using XML Power users can configure the above as follows ltpipelines groupquotmyappquotgt ltpipeline namequotapptrunkquot templatequotmyappbuildquotgt ltmaterialsgt ltsvn urlquothttpmysvnurltrunkquot gt ltmaterialsgt ltpipelinegt ltpipeline namequotapp10branchquot templatequotmyappbuildquotgt ltmaterialsgt ltsvn urlquothttpmysvnurlbranches10quot gt ltmaterialsgt ltpipelinegt ltpipelinesgt lttemplatesgt ltpipeline namequotmyappbuildquotgt ltstage namequotbuildquotgt ltjobsgt ltjob namequotcompilequotgt lttasksgt ltant targetquotcompilequot gt lttasksgt ltjobgt ltjobsgt ltstagegt ltpipelinegt lttemplatesgt Editing Pipeline Templates GoCD Administrators can now enable any GoCD user to edit a template by making them a template administrator Template administrators can view and edit the templates to which they have permissions on the template tab of the admin page Template Administrators will however not be able to add delete or change permissions for a template They will also be able to see the number of pipelines in which the template is being used but not the details of those pipelines Viewing Pipeline Templates Pipeline Templates can now be viewed by Administrators and Pipeline Group Administrators while editing or creating a Pipeline Clicking on the icon indicated by arrow will display the following The popup shows the extract of the template quotServicesTemplatequot configured for the pipeline quotService1quot Shows the details of the job quotcompilejobquot configured for the stage quotcompilequot Indicates that the working directory set for the task is quotgoservice1quot which is followed by the quotquot symbol and then the command If any quotOn Cancel Taskquot has been configured it will be indicated like this Shows the quotRun If Conditionquot for this task See also Templates Configuration Reference "},{"title":"Setup a New Pipeline","href":"/configuration/quick_pipeline_setup.html","content":"Setup a new pipeline New Pipeline Wizard After youve entered your license information clicking on the Pipelines tab will take you to the quotAdd new pipelinequot page You can also add a pipeline by navigating to the Admin page and clicking on the quotCreate a new pipeline within a groupquot link You can create a pipeline in 3 steps Step 1 Basic Settings Fill in the pipeline name Fill in the pipeline group Step 2 Material Choose the material type The material can be your Source Control Management SCM or version control repository or another pipeline or a package repository eg yum Currently Go supports the following SCMs Subversion Mercurial Git Team Foundation Server Perforce and the package repository and material plugins Fill in settings specific to the material type Step 3 Stage and Job A pipeline contains one or more stages Define the first stage of your pipeline Fill in the Stage name Fill in the Job name Fill in the task type and the command for the task If you use Ant NAnt or Rake for scripting Go provides convenience wrappers for these tools To use any other scripting tool eg Maven msbuild etc choose the quotMorequot option to use the command repository or specify the command line syntax for that tool See the Managing pipelines documentation for editing these settings following the creation of your pipeline Initial task settings Ant The Ant task allows you to run an ant script GoCD does not include Ant and so you must ensure that it is already on the command path By default it will use buildxml in the agents working directory as the build file If you want to customize the build file or build target click the edit link to change the defaults For this option to work Ant needs to be installed on the GoCD Agents and the go user should be able to execute it NAnt The NAnt task allows you to run a NAnt script GoCD does not include NAnt and so you must ensure that it is already on the command path By default it will use defaultbuild as build file in the agents working directory If you want to customize the build file or build target click the edit link to change the defaults For this option to work NAnt needs to be installed on the GoCD Agents and the go user should be able to execute it Rake The Rake task allows you to run a ruby rake build GoCD does not include ruby or rake and so you must ensure that it is correctly installed on the agents GoCD will assume the standard rakefile exists in the working directory of the agent For this option to work Rake needs to be installed on the Go Agents and the go user should be able to execute it More In addition to the above tasks GoCD allows you to run anything on the command line You can use the command repository to help you choose the command Alternately you can specify a command on your own You can see the complete configuration reference here Also See Adding a material to an existing pipeline Adding a stage to an existing pipeline Adding a job to an existing pipeline Rolebased authorization "},{"title":"Schema","href":"/configuration/schema.html","content":"Schema Configuration file schema cruiseconfigxsd "},{"title":"TFS Material configuration","href":"/configuration/tfs_config.html","content":"TFS Material configuration You can use TFS SCM as a material for your pipeline GoCD server and agent uses TFS Java SDK v1403 by default The TFS SDK is packaged with GoCD no additional configuration is required Users can continue to use GoCD with TFS 2012 2013 2015 and Visual Studio Team Services You will need to configure the following to add a TFS material Material Name An optional name for the material This name can be used to set the TFS revision in the pipeline label URL Set the url for the TFS collection Ex http414243448080tfsDefaultCollection Domain Domain name for TFS authentication credentials Should be domain for the TFS account Ex corporatethoughtworks Username The user has to be a collection administrator for the TFS collection used in URL Password Provide the password for the TFS account Project Path Enter the project path within the collection You can specify paths of sub folders to create materials for each component Ex testcomponent or myapplication Check connection You can use check connection to verify the TFS material configuration Notes GoCD will map TFS projects to destination folders within the GoCD agent installation directories You can identify mappings by looking at the destination folders In this release GoCD does not delete any workspace it has created Workspace names are generated internally If possible create a new user account on TFS which will be used for creating TFS materials in GoCD You can use this account to easily identify TFS workspaces that GoCD created on the server and agents If you are using the cross platform command line client you cannot run the GoCD server and GoCD agent as a service on the local system account You will need to run the service with a user account which has accepted the eula for the client If at any point you need to change the go server installation to a different location or machine you will need to manually delete the old tfs mappings at the old GoCD server location Known Caveats If TFS server is accessed using HTTPS and the SSL certificate is an untrusted certificate then the certificate must be added to the trust store of the Java installation used to launch the GoCD server and agents Untrusted certificate will not be trusted by default GoCD server and agents During the TFS checkout process if one of the file paths exceeds 259 characters checkout will failSo care should be taken when specifying the destination directory so that the path limit is not exceeded GoCD agent installation directory also plays a part in both cases where destination directory is specified and when its not On all the agents prior to checkout from TFS entire mapped directory is cleaned and all option is used for checkout As a result there is increased load on TFS server and network bandwidth consumption is high during the process This is an issue that will be addressed in subsequent releases Kerberos support for TFS authentication has not been verified Currently GoCD always does a tfs get to retrieve the latest changes on the agents "},{"title":"UI Testing","href":"/configuration/ui_testing.html","content":"UI testing Because GoCD installs itself as a service Windows or daemon Linux by default getting GoCD agents to interact with your operating systems windowing environment can cause problems Access to a windowing environment is usually required for testing UI applications or for driving browsers for web testing Heres how you do it Windows The first step is to disable the GoCD agent service To do this Log in to your Windows machine as an Administrative user Click on Start Control Panel Administrative Tools Services Double click on Go Agent Change the Startup Type to Disabled Click Stop to stop the service Click OK to finish The next step is to start the Go agent as an application Click on Start All Programs Go Agent Run Go Agent To get the Go agent to start every time you log in copy the Run Go Agent shortcut to the Startup folder of your start menu Linux There are many different ways to get a Linux build agent to interact with a UI The easiest is to use a VNC service to provide a dedicated X11 server to your agent To do this Install the VNC server and fvwm packages for your distribution aptitude install vnc4server fvwm yum install vncserver fvwm Sudo to the go user sudo su go and do the rest as that user Set a password for remote access to your VNC server with the command vncpasswd Edit your VNC config to use fvwm and not twm as the window manager replace twm with fvwm in vncxstartup Edit etcdefaultgoagent and change the line VNCN to VNCY Restart your agent and it will now have access to an X11 server that you can also connect to with your favourite VNC client The default DISPLAY that Go uses is 3 If there are any other environmental variables that need to be set for your UI testing tools they correct place to set these is in your etcdefaultgoagent file Dont forget to export them You can connect to your session with vncviewer to see whats going on Use vncviewer lt agenthostname gt3 If things appear to hang chances are you forgot to replace twm with fvwm twm requires you to place a window on the desktop when it starts up "},{"title":"Configuration repository Extension","href":"/extension_points/configrepo_extension.html","content":"Configuration repository Extension GoCD supports writing configuration plugins starting 167 It is a feature which allows you to move pipeline configurations out of GoCD and its cruiseconfigxml file into one or more sourcecontrol repositories eg git so that you can modify them externally Such modifications will be seen by a periodic poller in the GoCD server and it will merge those pipeline configurations into the pipelines it finds in the main configuration XML file Configuration plugins allow users to keep both pipeline and environment configurations in all version control systems supported by GoCD Most elements of pipelines and environments available in XML are supported by configuration repositories However there are a few exceptions you cannot use in configuration repositories GoCD pipeline templates nor references to templates Note that you can write a plugin that supports pipeline templates in any way you want parameters The format in which configurations are stored is fully controlled by the plugin so pipelines and environments can be stored for example in JSON YAML XML dot files or any convention that can store necessary information There are certain limits involved when using configuration repository It is not possible to edit remote pipeline or environment using UI Elements defined via UI cannot refer to external ones The other way around is possible Pipeline templates and parameters are not supported Merging configurations GoCD server polls all materials from pipelines and userdefined configuration repositories The final server configuration is merged from cruiseconfigxml and remote elements in repositories It is important to pay attention to errors introduced in repositories It is highly recommended to remove any errors as soon as GoCD reports them For configuration repositories the only way to so is by pushing changes to faulty repository All configuration errors are displayed in server health messages More details about handling configuration repository errors in GoCD server are lower Merging pipeline groups Pipelines membership in a group can be defined in many configuration repositories and cruiseconfigxml Eg group project1 can be spread across many configuration repositories then finally in Go server all these pipelines will show up in one group project1 Merging environments Similarly to pipeline groups final members of environments are a sum of elements in all configuration repositories Eg in repository A we can define that pipeline1 is member of environment development in repository B we can define that pipeline2 and pipeline3 is member of environment development in repository C we can define that pipeline3 is member of environment development Then in GoCD server the final pipelines in environment development are pipeline1 pipeline2 pipeline3 Notice that pipeline3 membership in environment development was declared twice Same approach is used for agents Environment variables have an additional check If you assign same environment variable with 2 different values then it is considered configuration merge conflict Errors in configuration repository There are several ways in which current configuration can be invalid because of errors in configuration repository Configuration repository plugin Error The least problematic situation is when plugin or extension point has detected problems with remote configuration part alone Then Go does not attempt to merge this configuration repository and previous configuration part stays active You should fix errors reported by GoCD server health messages in order to see any new changes from that configuration repository If you dont fix such error there are no other consequences than having old configuration Many errors of this type can exist simultaneously there can be many invalid repositories in this way Invalid Merged Configuration Error In some situations it is not possible to create merged configuration from configuration repositories and main GoCD configuration Then server health messages reports Invalid Merged Configuration The common cases that will cause this error are a pipeline is configured both through UI in cruiseconfigxml and in on of configuration repositories pipelines with same name are declared in many configuration repositories one of the pipelines refers to nonexisting pipeline Or more generally some configuration element refers to other that does not exist plugin or extension point is not doing enough validations on the remote configuration part alone This causes server to assemble merged configuration from part which is invalid There are limitations in how Go server can handle this type of errors GoCD can handle situation when there are errors in exactly one of the repositories You will not see new configuration changes from invalid repository until error is fixed Other configuration repositories and edits to Config XML will be operational You should fix Invalid Merged Configuration anyway to avoid being in next situation When 2 or more configuration repositories are invalid you may start experiencing being locked out from editing configuration through UI Changes to XML will be rejected Reasons for this are beyond scope of this document You must fix all configuration repositories first References Introduction to configuration repositories Github issue including very long debate on how Go should behave Example configuration repository in JSON Example configuration repository in YAML "},{"title":"Package Repository Extension","href":"/extension_points/package_repository_extension.html","content":"GoCD Package Material Introduction Poll from GoCD packages and more from GoCD 133 onwards Pipelines in GoCD can poll packages in repositories similar to how they poll version control systems A build typically consumes source code maintained in a version control system VCSSCM What about a typical deployment Increasingly the input for deployments is the build result packaged as jar war or ear file in case of Java nuget chocolatey package in case of NET Linux system package eg rpm deb in case of any application platform Other application level package formats like gem npm phar wheel etc These files packages are often maintained in corresponding package repositories Such packages may be specified as materials for GoCD pipelines Supported Packages Since there are many package formats each with its own package manager and repository the support for packageasmaterial has been implemented as an extension point Using the bundled yumrepopoller plugin it is possible to specify an rpm package held in a yum repository as a material for a GoCD pipeline Using other external plugins it is possible to do the same for other types of packages Repositories Packages and Materials A repository may contain one or more packages A pipeline may refer to a package as a material When the package is updated in the repository interested pipelines will get scheduled Repository Definition A package material plugin lets pipeline group admins provide details of the corresponding repository type to GoCD eg here is how we define a yum repository using the bundled yumrepopoller plugin Note The repository name is not used by the package material plugin it is used by Go to construct the material name Two package repositories cannot have the same name Use the check connection button to ensure that Go can work with this repository Package Definition A package material plugin also lets you define packages at the time of pipeline material configuration Admin gt Material gtAdd Material gt Package Here is what it looks like for defining RPM packages with the bundled yum plugin The package name is not used by the package material plugin it is used by Go to construct the material name Two packages in a repository cannot have the same name Use the check package button to ensure that the package definition does indeed resolve to the package you are looking for Unlike other VCSSCM materials the material definition in case of packages is not contained within the pipeline definition Many pipelines may have material definitions referring to the same package Here is how we associate an existing package as material for a pipeline Note Each package definition must resolve to exactly one package on the repository else the pipeline will not run In order to set up a pipeline that polls for multiple packages configure each package as a separate material Each package material plugin defines a subset of its properties as a package fingerprint eg in case of the bundled yum plugin this subset consists of Repository URL and Package Spec it excludes repository username and password Repository and Package names are not part of package fingerprint It is not permitted to multiple packages having the same package fingerprint An attempt to do so will result in an error message like this The following errors need to be resolved in order to perform this actionltbrgt Cannot save package or repo found duplicate packages Repo Name orchard Package Name apple Repo Name orchard Package Name orange Sample XML Configuration Here is a XML view of an RPM package definition Note the relation between repository package and pipeline material Loosely typed property key and value tags are used for repository and package configuration in order to accommodate different plugins If you choose to configure via direct XML edit note that it isnt necessary to provide repository and package IDs Go server will autogenerate them However not all validations that are performed while configuring via UI kick in while configuring via XML edit the resulting failures will show up later in the server health message panel at the bottom right of the browser frame ltrepository idquot1ce5c205977f4c0eada4882030580eedquot namequotoraquotgt ltpluginConfiguration idquotyumquot versionquot1quot gt ltconfigurationgt ltpropertygt ltkeygtREPOURLltkeygt ltvaluegthttppublicyumoraclecomrepoOracleLinuxOL6latestx8664ltvaluegt ltpropertygt ltconfigurationgt ltpackagesgt ltpackage idquot840b0b60bd29489db5eaccff5f6459a9quot namequotgccquot autoUpdatequotfalsequotgt ltconfigurationgt ltpropertygt ltkeygtPACKAGESPECltkeygt ltvaluegtgcc4ltvaluegt ltpropertygt ltconfigurationgt ltpackagegt ltpackagesgt ltrepositorygt ltpipelines groupquotshowcasequotgt ltpipeline namequotdependsOnGccquotgt ltmaterialsgt ltpackage refquot840b0b60bd29489db5eaccff5f6459a9quot gt ltmaterialsgt Value stream modeling tip Depending on whether GoCD is also publishing the package or just consuming it there are two options for modeling a value stream that includes packages The first scenario is where the package is published from some pipeline in GoCD Say pipeline X publishes package P to an external repo and pipeline Y consumes P To trigger Y after publication of P there are two options Pipeline dependency X becomes a material for Y Y resolves the exact version of P and downloads it on its own although this tip may be used to pass package version information from X to Y X will appear as an upstream component of Y in the value stream map Package material Y adds P as a package material Y no longer has to resolve P It isnt advisable to do both as Y will then schedule twice The choice depends on how closely the activities in pipeline X and Y are related If it is important to see X and Y together in the same value stream map then option 1 makes sense The second scenario is where GoCD does not know about howwho published the package Perhaps it got published by a job in Jenkins Or perhaps the package is an open source package on a public repository on the internet In this case the only option is to use a package material GoCD helps you trace back to the external origin of the package if the package creator adds trackback information to the package metadata The details of this will vary by plugin In case of the bundled yum plugin we use the URL field in rpm metadata for this Permissions Repositories and their packages are global entities not tied to a pipeline group or environment Pipeline group admins may define repositories and packages for use in their pipelines One pipeline group admin may also use packages defined by another for their pipelines Changing a package definition will cause all dependent pipelines to schedule even those not in the same pipeline group as that of the person editing Because of this we dont have a UI way of changing the definition of a package Only the GoCD admin can change it via Admin gt Config XML tab Polling Even if no pipelines use a package GoCD polls for newer packages every minute This may be turned off at a package level by setting autoUpdate to false via the config xml GoCD admins only autoUpdate is turned on by default When a newer package is found the pipelines for which it is a material get scheduled assuming auto scheduling of pipelines is on Also see API scheduling Package information display The following information is expected from the package material plugin which in turn obtains it from the package metadata if available Package revision eg gcc4473el6x8664 Package build time Name of package creator if available Package comment Trackback URL Typically an absolute URL that indicates what job in GoCD or otherwise created the package Package material name ie reponamepackagename At the time of building the package it is recommended to include as much of the above information as possible so that it is available for Go to display as below Downloading the package The package isnt automatically downloaded on the agent and made available to the jobs This is unlike VCSSCM materials where a checkout is made by default In case of packages the GoCD Agent is typically not the target node for deployment it is only orchestrating deployment to a remote node So instead of an automatic download the following environment variables are made available GOPACKAGElt REPONAME gtlt PACKAGENAME gtLABEL GOREPOlt REPONAME gtlt PACKAGENAME gtREPOURL GOPACKAGElt REPONAME gtlt PACKAGENAME gtLOCATION Repository and package names are converted to all uppercase and hyphens are converted to underscores before inclusion in the environment variable names For example lets say we set up a repository named ORA pointing to httppublicyumoraclecomrepoOracleLinuxOL6latestx8664 and define a package gcc with a spec of gcc4 and set it up as material for a pipeline To download the package locally on the agent we could write a task like this go Start to execute task ltexec commandquotbinbashquot gt ltarggtcltarggt ltarggtcurl o tmpgccrpm GOPACKAGEORAGCCLOCATIONltarggt ltexecgt When the task executes on the agent the environment variables get subsituted as below go Start to execute task ltexec commandquotbinbashquot gt ltarggtcltarggt ltarggtcurl o tmpgccrpm GOPACKAGEORAGCCLOCATIONltarggt ltexecgt go setting environment variable GOPACKAGEORAGCCLABEL to value gcc4473el6x8664 go setting environment variable GOREPOORAGCCREPOURL to value httppublicyumoraclecomrepoOracleLinuxOL6latestx8664 go setting environment variable GOPACKAGEORAGCCPACKAGESPEC to value gcc4 go setting environment variable GOPACKAGEORAGCCLOCATION to value httppublicyumoraclecomrepoOracleLinuxOL6latestx8664getPackagegcc4473el6x8664rpm Or to simply pass it as an argument to a deploy script on a remote server ltexec commandquotbinbashquotgt ltarggtcltarggt ltarggtssh server quotcd todestdirdeploysh GOPACKAGEORAGCCLOCATIONquotltarggt ltexecgt Also see Installing RPMs Important Please note that if you change repository credentials and then try to retrigger redeploy an old package the published environment variables will not reflect new credentials Publishing a Package At the moment GoCD does not create or publish the package for you But it is simple enough for each type of package eg rpm You could also explore the command repository on GitHub for helpful commands What is command repository Please see this Package Dependencies Please note that GoCD does not support any sort of automatic polling or other support for package dependencies Each package dependency has to specified as a separate material if needed Alternatively just poll for the packages at the root of the dependency graph and let the package manager figure out the rest at the time of installation eg if componentA120b234noarchrpm depends on componentB230 or above simply poll for componentA and let yum install componentA120b234noarch do the resolution of componentB for you"},{"title":"Plugin User Guide","href":"/extension_points/plugin_user_guide.html","content":"GoCD Plugin User Guide Introduction Plugins allow users to extend the functionality of GoCD Each plugin is assigned an identifier which is determined by the id attribute provided in plugin metadata file packaged along with the plugin jar If the metadata file is not packaged plugin jar file name will be taken as plugin id Plugins are classified into two categories Bundled and External During startup GoCD server would try to load all the plugins On successful load the plugin will be converted into an OSGi bundle and extracted into ltserver installation directorygtpluginswork directory Plugins tab under GoCD server Administration would list all the loaded plugins Bundled versus External Bundled Plugins As the name suggests bundled plugins are bundledpackaged along with GoCD server These are developed and supported by Thoughtworks GoCD development team Bundled plugins are located under ltserver installation directorygtpluginsbundled directory After an upgrade when GoCD server starts up for the first time all bundled plugins would be refreshed with the latest packaged versions External Plugins All user authored plugins are treated as external plugins Unlike bundled plugins external plugins are not altered read packagedbundledrefreshedremovedmodified during a GoCD server upgrade External plugins are loaded from ltserver installation directorygtpluginsexternal directory Listing of external plugins Installing and Uninstalling of plugins You need access to the GoCD server machine to be able to installuninstall a plugin To install a plugin drop the plugin jar under the external plugin directory ltserver installation directorygtpluginsexternal and restart GoCD server To uninstall a plugin remove the plugin jar from the external plugin directory ltserver installation directorygtpluginsexternal and restart GoCD server You may also use this beta feature to quick load plugins without restarting GoCD server Plugins Tab Plugins tab can be found under GoCD server Administration Plugins tab shows all the plugins that have been loaded currently along with its details and status If a plugin is marked invalid or incompatible the reasons for the same would be reported here Notes Adddeleteupgrade of a plugin will take effect only after a GoCD server restart Two plugins cannot have same id irrespective of whether it is a bundled or an external plugin If two external plugins with same id are available only one of them will be loaded successfully in no specific order If a bundled and an external plugin with same id are available only bundled plugin wll be loaded "},{"title":"SCM Extension","href":"/extension_points/scm_extension.html","content":"SCM Material Introduction A build typically consumes source code maintained in a version control system VCSSCM GoCD has builtin support for Git Mercurial SVN TFS amp Perforce Users can use SCM plugins to integrate with other SCMs SCMs and Materials Unlike builtin VCSSCM materials the material definition in case of plugin SCMs is not contained within the pipeline definition They are global entities Many pipelines may have material definitions referring to the same SCM When there is a new revision in the SCM interested pipelines will get scheduled SCM Definition A SCM material plugin lets pipeline group admins provide details of the corresponding SCM type to GoCD Note The SCM name is not used by the SCM material plugin it is used by Go to construct the material name Two SCMs cannot have the same name Use the check connection button to ensure that Go can work with this SCM On quotSavequot plugin validates user inputs Note Currently to associate an existing SCM material to a pipeline you will need to edit the Config XML SCM material uniqueness fingerprint Each SCM material plugin defines a subset of its properties as a SCM fingerprint eg SCM url and branch could be included while username and password could be excluded SCM names are not part of SCM fingerprint It is not permitted to multiple SCMs having the same SCM fingerprint An attempt to do so will result in an error message like this The following errors need to be resolved in order to perform this actionltbrgt Cannot save SCM found duplicate SCMs SCM Name apple SCM Name orange Sample XML Configuration Here is a XML view of an SCM Note the relation between SCM and pipeline material Loosely typed property key and value tags are used for SCM configuration in order to accommodate different plugins If you choose to configure via direct XML edit note that it isnt necessary to provide SCM IDs GoCD server wil autogenerate them However not all validations that are performed while configuring via UI kick in while configuring via XML edit the resulting failures will show up later in the server health message panel at the bottom right of the browser frame ltscmsgt ltscm idquot3bfc282e43a64795ba9c6c50665220ddquot namequotgitrepoquotgt ltpluginConfiguration idquotjgitquot versionquot10quot gt ltconfigurationgt ltpropertygt ltkeygturlltkeygt ltvaluegthttpsgithubcomgocdgocdgitltvaluegt ltpropertygt ltconfigurationgt ltscmgt ltscmsgt ltpipelines groupquotsamplegroupquotgt ltpipeline namequotupstreampipelinequotgt ltmaterialsgt ltscm refquot3bfc282e43a64795ba9c6c50665220ddquot destquotdestquotgt ltfiltergt ltignore patternquotlogquot gt ltfiltergt ltscmgt ltmaterialsgt Permissions Since SCMs are global entities changing a SCM definition will reflect on all pipelines that consume it even those not in the same pipeline group as that of the person editing To make the decision to quoteditquot quotremovequot and quotaddquot new material easier we list all pipelines consuming the SCM Note Change to the SCM definition causes all dependent pipelines to schedule Polling Even if no pipelines use a SCM GoCD polls for newer revisions every minute This may be turned off at a SCM level by setting autoUpdate to false via the config xml GoCD admins only autoUpdate is turned on by default When a newer revision is found for a SCM the pipelines for which it is a material get scheduled assuming auto scheduling of pipelines is on Also see API scheduling Filters At times you may not want GoCD to trigger pipelines for every commit eg you might not want to build if its a documentation change You can setup a filter at pipeline level asking GoCD to skip pipeline scheduling if commit contains only files that match a pattern SCM information display The following information is expected from the SCM material plugin which in turn obtains it from the SCM metadata if available SCM revision Commit time Name of committer if available Comment for the commit Files in the commit along with action addedmodifieddeleted At the time of building the SCM it is recommended to include as much of the above information as possible so that it is available for GoCD to display as below SCM checkout on Agent VCSSCM plugin will by default checkout code into destination directory on Agent before the job begins References Developer docs SCM Plugins Github issue "},{"title":"Task Extension","href":"/extension_points/task_extension.html","content":"Task Extension Overview GoCD supports configuring a few kinds of tasks Nant Ant and Rake directly from the configuration UI without specifying them as a custom command For instance if you go to the configuration UI for a job youll see something like this A task plugin allows you to extend this so that you can have other tasks available here The plugin also allows you to control the UI as well as the data stored for this task For instance you can find the source of a sample Curl plugin at this location Assuming you have the plugin installed youll see that the dropdown in the job configuration UI has changed to look like this When selected the dialog box which allows you to configure details about the task looks like this In the configuration XML the information entered for this task looks like this lttaskgt ltpluginConfiguration idquotcurltaskpluginquot versionquot1quot gt ltconfigurationgt ltpropertygt ltkeygtUrlltkeygt ltvaluegthttpwwwgooglecomltvaluegt ltpropertygt ltpropertygt ltkeygtSecureConnectionltkeygt ltvaluegtnoltvaluegt ltpropertygt ltpropertygt ltkeygtRequestTypeltkeygt ltvaluegtGltvaluegt ltpropertygt ltpropertygt ltkeygtAdditionalOptionsltkeygt ltvalue gt ltpropertygt ltconfigurationgt ltrunif statusquotpassedquot gt lttaskgt When a build which uses the plugin runs the output of the build looks something like this go Start to execute task Plugin with ID curltaskplugin Launching command curl G insecure o pipelinesup42indextxt httpwwwgooglecom Environment variables Name MAVENOPTS Value Xms256m Xmx512m Name GOSTAGECOUNTER Value 1 Name GOREVISIONBLAH Value cde1e03a05170b991a92a136278c3464e4f35fe7 Name GOJOBNAME Value up42job Name EDITOR Value vim Name SECURITYSESSIONID Value 186a4 lots more environment variables Total Received Xferd Average Speed Time Time Time Current Dload Upload Total Spent Left Speed 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 00002 0 100 259 100 259 0 0 122 0 00002 00002 122 You can write a task plugin in GoCD using JSON API Message based"},{"title":"Yum Repository Poller","href":"/extension_points/yum_repository_poller.html","content":"Yum Repository Poller Note This plugin is available for GoCD servers running on Linux nodes having repoquery installed part of the yumutils package Ubuntu CentOS Introduction The Yum repository poller is a bundled package material plugin capable of polling yum repositories for rpm packages GoCD server interacts with this plugin via package material plugin interfaces The plugin makes use of a command similar to the following to poll the server So it does not depend on the files that yum depends on eg files under etcyumreposd repoquery repofrompathuuidREPOURL repoiduuid q PACKAGESPEC qf quotLOCATIONquot A given instance of polling is considered successful if repoquery returns a single package as output lt Turn your Maven Nexus Repo into a Yum repo Using the Yum plugin for Nexus it is possible to automatically create and publish Java artifacts as rpms using the rpmmavenplugin and consume them on the deployment side using rpm or yum There is a Go webinar that describes this set up gt Repository definition Repo URL must be a valid http https or file URL This plugin looks for the presence of REPOURLrepodatarepomdxml to ascertain validity Basic authentication userpassworddomainpath is supported for http and https repositories Package definition In case of this plugin the package definition is completely determined by the package spec The package spec may be in any of the following formats Please refer the repoquery man page for details name namearch namever nameverrel nameverrelarch nameepochverrelarch epochnameverrelarch Shell glob patterns may also be used For example say we have a component under development getting ready for release of version 120 We cut a branch for the release and bump up the version on trunkmaster to 130 Thus a package generated by trunkmaster may look like mycomp130b72349noarchrpm while that generated by branch may look like mycomp120b72344noarchrpm Now if we have a deployment pipeline that is only interested in 12 series packages the package spec needs to be mycomp12 rather than just mycomp Package Metadata The following rpm metadata is accessed by the plugin BuildTime required automatically set by rpmbuild Used by the plugin to validate if the package is newer than what was last seen by GoCD GoCD displays this field as Modified On Packager GoCD displays this field as Modified By If not provided it is shown as anonymous URL Displayed as a Trackback URL by GoCD Use this as a means to trace back to the job that published the package within GoCD or outside to the yum repository BuildHost Displayed by GoCD as Comment Built on BUILDHOST Published Environment Variables The following information is made available as environment variables for tasks GOPACKAGElt REPONAME gtlt PACKAGENAME gtLABEL GOREPOlt REPONAME gtlt PACKAGENAME gtREPOURL GOPACKAGElt REPONAME gtlt PACKAGENAME gtPACKAGESPEC GOPACKAGElt REPONAME gtlt PACKAGENAME gtLOCATION Individual plugins may provide additional info via additional environment variables Downloading RPMs Lets say we set up a repository named ORA pointing to httppublicyumoraclecomrepoOracleLinuxOL6latestx8664 and define a package gcc with a spec of gcc4 and set it up as material for a pipeline To download the package locally on the agent we could write a task like this go Start to execute task ltexec commandquotbinbashquot gt ltarggtcltarggt ltarggtcurl o tmpgccrpm GOPACKAGEORAGCCLOCATIONltarggt ltexecgt When the task executes on the agent the environment variables get subsituted as below go Start to execute task ltexec commandquotbinbashquot gt ltarggtcltarggt ltarggtcurl o tmpGOPACKAGEORAGCCLABELrpm GOPACKAGEORAGCCLOCATIONltarggt ltexecgt go setting environment variable GOPACKAGEORAGCCLABEL to value gcc4473el6x8664 go setting environment variable GOREPOORAGCCREPOURL to value httppublicyumoraclecomrepoOracleLinuxOL6latestx8664 go setting environment variable GOPACKAGEORAGCCPACKAGESPEC to value gcc4 go setting environment variable GOPACKAGEORAGCCLOCATION to value httppublicyumoraclecomrepoOracleLinuxOL6latestx8664getPackagegcc4473el6x8664rpm Or to simply pass it as an argument to a deploy script on a remote server ltexec commandquotbinbashquotgt ltarggtcltarggt ltarggtssh server quotcd todestdirdeploysh GOPACKAGEORAGCCLOCATIONquotltarggt ltexecgt Installing RPMs For self contained packages no external dependencies other than what is already installed on the target node it is just enough to do rpm U pathtodownloadedpkgrpm On the other hand if the package isnt selfcontained wed run yum install GOPACKAGEORAGCCLABEL This would require that etcyumreposd contain the repository definitions Creating and Publishing RPMs Although the support for package as material in GoCD isnt concerned with how the packages are created and published here is a short set of pointers to information on the web Building an RPM using rpmbuild and SPEC file Building using fpm Tutorial to set up a local yum repository using createrepo Publishing to a yum repo simply involves uploadingcopying over a new package revision at the correct location and running createrepo update Notes This plugin will detect at max one package revision per minute the default interval at which GoCD materials poll If multiple versions of a package get published to a repo in the time interval between two polls GoCD will only register the latest version in that interval This plugin makes use of buildtime in rpm metadata to determine if a poll has returned a new result If for some reason eg timezone misconfiguration the buildtime of pkg11 is less than that of pkg10 then the plugin will not register pkg11 as a newer package The only way to update an rpm is to change the version or release Republishing a different file with the same name and different buildtime wont do Package groups are not supported The GoCD command repository has a bunch of commands related to rpm packages "},{"title":"Running out of Disk Space","href":"/faq/admin_out_of_disk_space.html","content":"Running out of disk space After youve had GoCD running for a while you may notice the following warning box when browsing GoCD If you dont do anything about it youll end up seeing the following error GoCD will stop scheduling new pipelines until you make more room either by compressing large files attaching a larger hard drive or by deleting unused artifacts You could also let GoCD manage artifact disk space by enabling auto purge of old artifacts Auto delete artifacts Introduction GoCD can be configured to automatically delete artifacts if the available disk space on the server is low GoCD will purge artifacts when available disk space is lower than the given value Artifacts will be purged upto the point when available disk space is greater than a defined value Configuration Specify artifact purge start and end limits You must be logged in as an admin user to configure this step Navigate to the Admin section on the GoCD dashboard Navigate to the Pipeline Management subsection Specify when GoCD should begin to purge artifacts in the first edit box Specify when GoCD should stop purging artifacts in the second edit box Never delete artifacts for a stage You must be logged in as an admin user to configure this step You can disallow deletion of artifacts from a particular stage so that those artifacts are excluded during deletion This option can be set in the stage editor for a pipeline This option can be set for stages that are important so that artifacts for the stage are preserved Navigate to the admin section on the GoCD dashboard Navigate to the pipelines section and choose a pipeline to edit Navigate to the stage settings for the stage 4Check the box Never Cleanup Artifacts Also see Managing artifacts and reports Clean up after cancelling a task Compress large log files In many cases the easiest thing to do is compress some of the larger artifacts that you wont frequently have need for For example if you have a large log file named testlog and youre running GoCD server on a unix machine the following script will gzip those files that havent been modified in the last 10 days find varlibgoserverlogspipelines name testlog mtime 10 type f exec gzip v Now if you add this to a system crontab your server can compress large artifacts automatically Move the artifact repository to a new larger drive If compressing large artifacts is not giving you enough free space another thing you can do is attach a larger disk drive to store artifacts After the drive is attached to the system we can easily change the location GoCD uses for its artifact repository Find the location of the GoCD configuration file Navigate to the Admin section Click on the quotConfig XMLquot tab The location of the configuration file is listed here Install the new drive Shut down GoCD server Copy all files from the original artifact repository location to the new drive Change the artifact repository location in the configuration file ltserver artifactsDirquotpathtonewartifactsquotgt ltservergt Start up GoCD server and verify you still have access to old artifacts Delete unused artifacts Another option for making more room is to remove unused or easily recreatable artifacts You may also have old pipelines that you no longer need The directory structure of the artifact repository makes selecting which artifacts are safe to delete easier The format is artifactsdirpipelinespipelineNamepipelineLabelstageNamestageCounterjobName Keep in mind that there are two files that GoCD needs in order to display the Job or Stage details pages cruiseoutputconsolelog cruiseoutputlogxml "},{"title":"Clone/Copy an Existing Agents","href":"/faq/agent_guid_issue.html","content":"Setting up a new agent by cloning an existing agent in GoCD Clone the agent An easy way to set up a new agent is to clone an existing one which is already set up and is known to work correctly You can clone an agent in a couple different ways Copy the entire agent directory structure to a new location can be on the same machine or on a different one If you use a virtual machine to run your agent clone the entire VM Remove duplicate GUID Once the agent has been cloned youll need to delete the GUID file so that GoCD server does not confuse the new agent for the old one The GUID file can be found at agent working dirconfigguidtxt delete this file from the new agent Approve the new agent You may now start your agent and it should appear under the Agents tab on the GoCD server Approve it as you would any new agent and youre ready to go"},{"title":"Artifact integrity verification","href":"/faq/artifact_integrity.html","content":"GoCD Artifact integrity verification Overview GoCD verifies artifact integrity to ensure that they are unchanged from the point of origin While executing a job GoCD applies the following rules if the checksum of the downloaded artifact does not match the checksum at the time of generation of the artifact If the artifact was uploaded using the artifact API a warning is displayed in the console output for the job If the downloaded artifact is different from the point of generation the job will be failed with an error in the console output for the job If GoCD is unable to fetch the original checksum for the downloaded artifact a warning is displayed in the console output for the job Users who download artifacts for a job from the artifacts tab on the dashboard can verify their integrity by using the md5checksum file within the cruiseoutput folder available on same tab The file contains the name and checksum for each artifact saved by the job Also see Managing artifacts and reports Auto purge old artifacts "},{"title":"Concurrent Modifications to Config","href":"/faq/concurrent_config_modifications.html","content":"Concurrent Modifications to GoCDs Configuration GoCD handles concurrent modifications to its configuration Multiple modifications are merged and saved successfully Modifications to the same area of configuration would result in a conflict Note Configuration file is maintained in git version control system GoCD leverages gits merge feature to merge changes from multiple users As expected concurrent changes to the same section by users would result in a conflict Successful Merge In case of a successful merge user would see a success message as below Merge Conflicts Handling conflict while using Config XML tab GoCD Administrator In case of a conflict GoCD provides an interface with the latest version of config along with the changes made by the user As an example if the same job was renamed by two users concurrently the changes from first user would be successfully saved while the second user would see a page similar to the one displayed in the image below User needs to reapply their changes displayed on the lefthand pane to the editable version on the right and save again Handling conflict while using Config XML tab Pipeline group administrator Handling conflict while updating configuration via other Admin tabs If two users make similar changes to a pipeline using the Edit Pipeline UI the second user would see the error as displayed below User should backup the required changes from the page Clicking on RELOAD button would discard users changes and reload the page with latest version of the pipeline configuration User should reapply hisher changes from backup and save again "},{"title":"Run Tests against new Builds","href":"/faq/dependency_management.html","content":"GoCD Dependency Management When you have nontrivial dependency pipeline chains you may have concerns about how dependent pipelines and materials interact For example code and tests are checked in as part of the same commit But code is built and tested in sequence so the same material version has to be used for pipelines that build and test your code This section covers some Dependency Management concepts and how GoCD handles certain complex scenarios Propagate material revision throughout the dependency chain If you have frequent material updates coupled with long running dependent pipelines sharing that same material you may encounter situations where the revision that triggered the dependency chain is no longer the latest revision Go keeps track of what revision triggered a dependency chain and ensures that the same version propagates throughout all members of that chain This helps ensure that all artifacts generated as part of that build share a common revision Example Consider the following dependency chain Legend SCM Repository rev1 rev2 Checkins to the repository A Pipeline for development build dependent B Pipeline for acceptance tests How it works Code is checked in to SCM rev1 Development build A is triggered by the checkin There is another checkin to SCM rev2 Development build completes with rev1 and triggers acceptance tests B Heres where dependency management comes in Go is smart enough detect that rev1 originally triggered the build and ensures that the acceptance tests checkout that revision rev1 and not the latest revision rev2 In this situation Go ensures that the appropriate version of acceptance tests are run against the appropriate version of the development build "},{"title":"Deploy a Specific Build","href":"/faq/deploy_a_specific_build_to_an_environment.html","content":"Deploy specific revisions of the materials to an environment GoCD allows you to hand pick which revision of your materials you would like to deploy to your environment This is a a very common requirement on larger projects which have multiple materials in their deployment pipeline Sometimes you may wish to have control over which revision of the application is deployed to a particular environment say UAT Select specific revisions of materials to deploy Consider the case where a deployment pipeline deploybookstore has 2 materials Material svn and upstream pipeline bookstore It is very common to know that label say quot34RELEASEquot of the dependent pipeline bookstore is stable All the changes that you want right now in your UAT environment are made to material svn In such a scenario when you deploy quotdeploybookstorequot to UAT you might always want to select label quot34RELEASEquot of pipeline bookstore and the latest or a known revision specified by your developer of material svn Once there are any new changes to any of the materials Go will indicate to the user that newer revisions are available to deploy You could use this information and deploy a custom build with hand picked revision or deploy the latest available revision Steps to select the revisions of materials you want to deploy Navigate to the Environments page and locate the specific deployment pipeline you are interested in Click on quotDeploy Specific Revisionquot This gives you the list of available revisions for each material Click on the quotRevision to Deployquot search box This will list latest 5 revisionslabels of your materials ordered by time of checkin latest checkin on top Select the revisions of all the materials that you would like to pick for deployment You can search for the revision you want by revision hashpipeline label checkin comment user If you do not select a specific revision of a material then the currently deployed revision will be retained Before clicking on quotDeploy Changesquot check the quotTo Deployquot column to verify which revision will be deployed Click quotDeploy Changesquot to start the deployment Why is the Deploy Changes button disabled There are 3 reasons this can happen There is a deployment in progress so another one cannot be started Your deployment pipeline is operating in locked mode You do not have sufficient permissions to operate on that pipeline Deploying the latest of all materials If you always want to have the latest of all materials deployed to your environment then this is how you can use Go to do it Click on deploy latest This will trigger the deployment pipeline This will pick up the latest available revision of your materials at the time the pipeline is scheduled Using passwords while deploying You can set secure variables in Go that gets passed along as environment variables to the executing task You can use this feature to pass passwords to deploy scripts For eg you can define a secure variable named DBDEPLOYPASSWORD and the DB password as its value This value will be encrypted by Go and passed along to the task Also you can override secure variables when you use the Trigger With Options feature "},{"title":"Save Properties for a Build","href":"/faq/dev_save_properties.html","content":"Saving properties about a build When building your code there can be quite a bit of extra information that you are interested in For example you might run EMMA on your code in order to log code coverage With properties you can save this information and even look at the history of a property by way of an exported spreadsheet Example usage Usage As a developer I want to save the average cyclomatic complexity of a function pulled from JavaNCSS For this example were going to take the information out of quottargetjavancssjavancssmetricsutilxmlquot On the Administration Tab edit the job that should generate the properties Ensure the following quotpropertiesquot block is in the job configuration Now after that job has run you should have extra properties information on the Job Details page You can export the property history as a CSV file "},{"title":"See artifacts as sub-tabs","href":"/faq/dev_see_artifact_as_tab.html","content":"See artifacts as subtabs in GoCD After uploading html reports it is often useful to be able to easily view this information when trying to understand why the build is broken Example usage Suppose we have configured GoCD to upload a flash video and html file and display it as a tab Click on the Pipelines tab Click on the stage you want to investigate Click on the job you want to investigate Click on the tab you created Clicking on the tab will load the page which will start the video To view the content in a new window just click quotDownload Recordingquot "},{"title":"Why the Build is Broken?","href":"/faq/dev_understand_why_build_broken.html","content":"Why is the build broken Knowing the build is broken is only the first step Now we need to understand what caused it to break Example usage Usage As a developer I want to understand why the build is broken Lets assume that in this case we are on a java project using JUnit as our testing library If were not already we need to configure Go to upload JUnit xml reports Click on the Pipelines tab Click on the failed stage you want to investigate Click on the failed job The quotFailuresquot subtab should help you diagnose what is wrong with your build If you need more information the quotConsolequot subtab contains everything that was written out to the console including extra information from Go "},{"href":"/faq/dev_use_current_revision_in_build.html","content":"Using Environment Variables in GoCD Accessing environment variables in tasks Every task in GoCD is provided with a set of environment variables as a part of the context when it is run Depending on the kind of process used in the task environment variables are accessed differently Presented below are some common usage scenarios with the assumption that a job has been configured with an environment variable called ENVVAR1 with the value VALUE1 1 Using an environment variable in a custom command on UnixLinux A very common use case for environment variables is to use them as arguments for a custom command quotexec taskquot in GoCD Assuming that you want to pass the environment variable ENVVAR1 to the ls command you might be tempted to try something like this ltfigure classquotconceptimagequotgt ltimg srcquotimagesfaq1wrongenvvarusagepngquot altquotFigure 1 Wrong usage of environment variablequot idquotwrongenvvarusagequotgt ltfigcaptiongtFigure 1 Wrong usage of environment variable in custom command task Will not workltfigcaptiongt ltfiguregt When run it will end with a message like this ltfigure classquotconceptimagequotgt ltimg srcquotimagesfaq2wrongenvvarusageresultpngquot altquotFigure 2 Result of wrong usage of environment variablequot idquotwrongenvvarusageresultquotgt ltfigcaptiongtFigure 2 Result of wrong usage of environment variable in custom command taskltfigcaptiongt ltfiguregt As you can see the environment variable ENVVAR1 was passed in literally to the command ls and was not interpolated What is happening here is that GoCD is directly executing the command and passing in the parameters without involving a shell like bash or sh in the middle When a command such as ls ENVVAR1 is executed from the commandline the shell process is the one that interpolates the environment variable and replaces it with its value so that the ls command does not see it So we need to do the same here The correct way to invoke this so that the interpolation of the environment variable works is like this ltfigure classquotconceptimagequotgt ltimg srcquotimagesfaq3rightenvvarusagepngquot altquotFigure 3 Correct usage of environment variablequot idquotrightenvvarusagequotgt ltfigcaptiongtFigure 3 Correct usage of environment variable in custom command taskltfigcaptiongt ltfiguregt When run it will end with a message like this ltfigure classquotconceptimagequotgt ltimg srcquotimagesfaq4rightenvvarusageresultpngquot altquotFigure 4 Result of correct usage of environment variablequot idquotrightenvvarusageresultquotgt ltfigcaptiongtFigure 4 Result of correct usage of environment variable in custom command taskltfigcaptiongt ltfiguregt Even though the command failed in this example the value of the environment variable was interpolated You can replace ls with some other command but the concept remains the same 2 Using an environment variable in a custom command on Windows This is easier than using it in a shell script because on Windows GoCD agents commands are executed by wrapping them in cmd c So environment variables get interpolated automatically So with a configuration such as this ltfigure classquotconceptimagequotgt ltimg srcquotimagesfaq7envvarwindowscommandpngquot altquotFigure 5 Usage of environment variable on Windowsquot idquotenvvarusagewindowsquotgt ltfigcaptiongtFigure 5 Usage of environment variable on Windowsltfigcaptiongt ltfiguregt When run it will end with a message like this ltfigure classquotconceptimagequotgt ltimg srcquotimagesfaq8envvarwindowscommandresultpngquot altquotFigure 6 Result of usage of environment variable on Windowsquot idquotenvvarusagewindowsresultquotgt ltfigcaptiongtFigure 8 Result of usage of environment variable on Windowsltfigcaptiongt ltfiguregt Similarly it works when used in a batch file say quotenvvarcmdquot with content such as this echo Environment variable ENVVAR1 is ENVVAR1 Notice that unlike on UnixLinux the way to access an environment variable on Windows is to use instead of 3 Using an environment variable in a shellscript On UnixLinux Using an environment variable inside a shellscript is not special at all You can directly use it as you would any environment variable For instance a shellscript with this content will work when executed normally binsh echo quotValue of environment variable ENVVAR1 is ENVVAR1quot This works when executed directly with a config such as this ltfigure classquotconceptimagequotgt ltimg srcquotimagesfaq5envvarinscriptpngquot altquotFigure 9 Usage of environment variable in a shellscriptquot idquotenvvarusagescriptquotgt ltfigcaptiongtFigure 9 Usage of environment variable in a shellscriptltfigcaptiongt ltfiguregt When run it will end with a message like this ltfigure classquotconceptimagequotgt ltimg srcquotimagesfaq6envvarinscriptresultpngquot altquotFigure 10 Result of usage of environment variable in a shellscriptquot idquotenvvarusagescriptresultquotgt ltfigcaptiongtFigure 10 Result of usage of environment variable in a shellscriptltfigcaptiongt ltfiguregt 4 Using an environment variable in a ruby script Again using an environment variable inside a ruby script is not special at all This has been mentioned here just to show that scripts written in different languages have to use different mechanisms to access environment variables A ruby script such as this works as expected usrbinenv ruby puts quotEnvironment variable ENVVAR1 has the value ENVENVVAR1quot Standard GoCD environment variables The examples above mention a custom environment variable set at the job level However there are some standard environment variables available during every job run set by GoCD They are Environment Variable Description Example contents "},{"title":"Configure SSH Keys for dockerized GoCD","href":"/faq/docker_container_ssh_keys.html","content":"Using SSH keys to access GoCD materials in a containerized GoCD server and agent If you have configured a git repository as a GoCD material then there are several ways to let GoCD access the repository One of the popular methods to do so is configuring SSH keys When using docker for gocd server and agents it becomes slightly more complex to do this Below are the steps to configure the ssh keys that can be used with multiple containers at once Create a docker container using the gocdserver image docker run itd vsomelocationonhosthomegossh gocdgocdserverv18120 Once the container has started the container id is provided Exec into the container as the go user docker exec it u go w homego ltcontaineridgt binbash Generate ssh keys for the go user sshkeygen t rsa b 4096 C quotsomething to identify this key like an email addressquot After executing the above command you will notice that there are 2 files created in homegossh called idrsa and idrsapub idrsa corresponds to the private key which you will later provide GoCD to access the private repository with idrsapub is the public key that needs to be added to your SCM account Follow the instructions provided below to add a new ssh key for your respective provider Github httpshelpgithubcomarticlesaddinganewsshkeytoyourgithubaccount Bitbucket httpsconfluenceatlassiancombitbucketsetupansshkey728138079html Gitlab httpsdocsgitlabcomeegitlabbasicscreateyoursshkeyshtml Once the public key has been added to your account try accessing a private repository by doing git clone on the private repository using the SSH protocol Most SCMs provide the command to clone with SSH when you access the repository on the browser A prompt appears when you execute the git clone command for the first time Choose yes and continue with the cloning This will create a file called knownhosts in homegossh Alternatively use the sshkeyscan command to create knownhosts sshkeyscan host gt homegosshknownhosts where host can be githubcom bitbucketcom gitlabcom etc The ownership and permissions of files in homegossh is rw"},{"title":"How do I re-run jobs?","href":"/faq/job_rerun.html","content":"Rerunning Jobs in GoCD You may sometimes encounter situations where you want to rerun only a subset of jobs within a stage rather than the entire stage or pipeline Examples of such scenarios include Environmental problems on a particular agent caused a job to fail Unsuccessful build deployment to one or more servers within a cluster of servers To rerun a job Navigate to the Stage Details screen of the stage whos job you want to rerun Click on the Jobs tab Check the jobs you want to rerun and click the Rerun button The quotRerunquot option is only available for stages that have completed You cannot rerun jobs for stages that are still running Job reruns are denoted by a circular arrow overlay on the stages and jobs that have been rerun "},{"title":"Go unable to poll for changes","href":"/faq/material_update_hung.html","content":"GoCD unable to poll for changes GoCD server polls for changes to all materials of Auto Triggered pipelines By default polling occurs every minute and ten materials at a time The polling interval and the number of materials to be polled simultaneously are configurable GoCD uses SCM commands to poll for changes For example to check for any new changes in SVN repository the following command is used svn log noninteractive xml v r HEADrevision repositoryURL The SCM command used by GoCD server can hang with no output Invalid configuration network issues console input block are some of the causes for such a situation Such scenarios cause pipeline scheduling delays and also lead to performance degradation Such a scenario is notified to the users by a warning in Server Health when clicked shows a message similar to the one below What can I do with the information When you see warning messages like the one above Identify the processes running as children of GoCD Server On Windows you can use tools like Process Explorer On linux you could run ps waux grep materialtype Determine the process thats hung The extra information like URLquothttpstestbitbucketorgtestgitrepogitquot in the warning information should help you with this On linux system you should see lines like these go 31201 1 0 Feb07 000000 git clone httpstestbitbucketorgtestgitrepogit varlibcruiseserverpipelinesflyweightb9ec0885eb32458cbd6beeefe3ef9816 Kill the process and all its children the whole process tree Ensure that the warning message goes away from Server Health Please note the folder name of the form flyweightb9ec0885eb32458cbd6beeefe3ef9816 present in the OS process listing This folder was being used by the polling command Locate the folder in the GoCD installation and delete it if it exists This ensures that the kill of the process tree has not left behind any inconsistent information Configuring warning time GoCD server waits for 15 minutes of no output before it warns user about possible hung material update User can modify this wait time using a System Property materialupdateinactivetimeout On linux installations of GoCD server add the following line to etcdefaultgoserver export GOSERVERSYSTEMPROPERTIESDmaterialupdateinactivetimeout20 The above configuration sets the time that GoCD server uses to determine if a material update is possibly hung to 20 minutes On Windows add the following line in the wrapperpropertiesconf file in the config folder of the GoCD server installation where x is 1 more than the highest number in wrapperserverconf and wrapperpropertiesconf combined wrapperjavaadditionalxDmaterialupdateinactivetimeout20 The above configuration sets the time that GoCD server uses to determine if a material update is possibly hung to 20 minutes "},{"title":"Email Notifications","href":"/faq/notifications_page.html","content":"Notifications on GoCD The Notifications page is to customize the email notifications for the current logged in user Key The email address to which email notification from GoCD will be sent Tick to enable email notification for the current logged in user My checkin aliases is a comma separated list of aliases used for check in "},{"title":"Ordering of Pipelines","href":"/faq/ordering_of_pipelines.html","content":"Ordering of pipelines in GoCD In GoCD we use two distinct types of ordering of pipelines Schedule order Chronological order in which pipelines are scheduled Natural order Chronological order of pipelines based on material modifications In most cases the schedule order and natural order match The user checks in and builds incrementally so the order in which builds are scheduled is the same as the relative order in which changes are checked in Now with the quotTrigger with optionsquot functionality it is possible to trigger a pipeline with older materials In this case the changes to the material as reported by the repository and the order of pipelines containing these changes are not the same Example Order of checkins retrieved from Hg log changeset 106896dbb27e86dc9 branch trunk tag tip user ShilpaG date Tue Apr 27 095215 2010 0530 summary fixing twist test EnvironmentScreenPermissions changeset 106882b5b25a68117 branch trunk user JJ date Tue Apr 27 084529 2010 0530 summary fixing broken twist test changeset 106876f91bbb648fa branch trunk user PS date Mon Apr 26 152816 2010 0530 summary 3889 Added the twist test for the stage details actions Pipeline instance 1 has revision 106876f91bbb648fa Pipeline instance 2 has revision 106896f91bbb648fa Pipeline instance 3 has revision 106882b5b25a68117 The pipeline order based on scheduling is 1 2 3 This is the order in which they were triggered The pipeline order based on natural order 1 3 2 This is because if we look at the changes in each pipeline instance 1 has the earliest set of revisions 3 has the next set of revisions and 2 has the latest revisions in that particular repository material The above example works when there is one material If the pipeline has multiple materials GoCD examines the timestamps of all the materials to determine which is logically the earlier pipeline instance In this case the earlier instance is the one that has the earliest time stamp across all the materials GoCD supports natural ordering of materials when we quotTrigger with Optionsquot The user can change the revision of all materials or where one particular materialthat is likely to have broken the build is chosen and all other materials are pinned to a particular revisionlast known good revision"},{"title":"Deploy to an environment","href":"/faq/rm_deploy_to_environment.html","content":"Releasing into an environment One of the most useful aspects of having your build mapped as a pipeline is being able to know exactly what is in a particular environment For example you might have a User Acceptance Testing environment into which you want GoCD to automatically deploy your binary Due to process restriction within your company you might want to manually install a binary yourself but have GoCD still retain the information of what is currently released Example usages Automatically deploy to UAT For this example well assume that there is already an ant task defined in your build that will take a binary and deploy it to your environment A separate task will verify the install was successful If it is not a task will run to rollback the deployment We will also assume that earlier in the pipeline there is a dist stage with a createinstallers job that will have already created the binary for us to use Add a new stage named UAT with a job named deploy Ensure that the UAT stage is manual Ensure the following task block is in the deploy job configuration lttasksgt ltfetchartifact stagequotdistquot jobquotcreateinstallersquot srcdirquotpkgquot destquotinstallersquot gt ltant targetquotdeploytouatquot gt ltant targetquotverifyuatworkscorrectlyquot gt ltant targetquotrollbacktopreviousinstallinuatquotgt ltrunif statusquotfailedquot gt ltantgt lttasksgt When you are ready to deploy something into the UAT environment Navigate to the pipeline activity page Find the checkin you want to deploy Click on the manual transition into the UAT stage When the deploy is successful the stage will be green and the UAT environment will contain the selected checkin When the deploy fails for some reason the stage will be red and the UAT environment will contain the original checkin Manually deploy to production For this example well assume that there is a known way to rollback to a previous installation We will also assume that earlier in the pipeline there is a dist stage with a createinstallers job that will have already created the binary for us to use Add a new stage named production with a job named deploy Ensure that the production stage is manual Ensure there is no task block in the deploy job configuration When you are ready to deploy something into the production environment Navigate to the pipeline activity page Find the checkin you want to deploy Click on the details link of the dist stage Download the installer binary in the artifacts tab Manually install the binary into production If there are issues manually rollback to the last known good installation If everything seems to be working correctly click on the manual transition into the production stage "},{"title":"Check What's Deployed","href":"/faq/rm_what_is_deployed.html","content":"Discover whats in an GoCD environment Before deploying something into production it is often useful to know what is currently there Example usage For this example we will assume we have a stage name quotproductionquot that will automatically deploy a binary onto a production server Start at the Environments page Click on the name of your quotproductionquot stage The Stage Details page will show every time GoCD has deployed your application "},{"title":"Historical Configuration","href":"/faq/stage_old_config.html","content":"GoCD Historical Configuration Trace a stage run to its config GoCD provides a section on the stage details page to view the GoCD configuration xml used when executing a particular instance of the stage Admin users can use this view to trace a pipeline run back to its configuration The stage history widget which can be found on the right hand side of the stage details page has markers to indicate GoCD configuration changes These markers are visible to all users To navigate to the historical config Click on the stage bar of the relevant stage on the pipelines dashboard Click on the tab Config Choose the stage instance from the stage history widget on the right Note This tab is available to admin users only See what changed in the configuration between two stage runs As mentioned in the previous section the stage history widget has markers to show if configuration has changed between two stage runs For admin users who have the permission to view the configuration xml the markers appear as links Clicking on these links shows the exact difference between the configurations The changes are shown in the same format as that of quotGit Diffquot "},{"title":"See changes in new binary","href":"/faq/tester_what_has_changed.html","content":"What has changed in the current GOCD version When updating your testing environments to a new version it is useful to know what changes have been made since it was last updated Since there is currently no way to get this information in GoCD automatically there are some extra steps we must take Example usage For this example well assume that there is a manual quotUATquot stage will automatically deploy and install an executable on your user acceptance testing machine On the Pipelines page click on the name of your pipeline Now that youre on the pipeline Activity page you can see exactly how far each checkin has gotten in your pipeline Find the checkin thats currently in UAT In this example it has the pipeline label of 2005077 For every checkin earlier than the one in UAT click to see the comments "},{"title":"Create a pipeline to build application","href":"/gocd_on_kubernetes/designing_a_cd_pipeline/creating_a_build_pipeline.html","content":"Create a pipeline to build and publish your application image In this section well go over how to design CD pipelines that build and publish an application image As an example weve used a sample nodejs application called Bulletin Board Prerequisites Well be building our application as a docker image artifact and publishing it to Docker Hub To do this make sure you have a Docker Hub account Quick links Getting started with GoCD Build an application artifact Click on the Pipelines link on the top menu to create your first pipeline Specify the pipeline name and the group name as buildandpublishimage and kubernetesappdeployment respectively Specify a git material with repository httpsgithubcomgocddemonodebulletinboardgit Create a stage called buildandpublishimage Create a job called buildandpublishimage with an initial task argument docker build t DOCKERHUBUSERNAMEbulletinboardGOPIPELINELABEL f Dockerfileapplication The GOPIPELINELABEL is an environment variable provided by GoCD which can be used to differentiate between builds from a repository Here we are using GOPIPELINELABEL to determine the application image tag Note This is the job that we have to associate with the elastic agent profile that we created earlier Tip Do not forget the c option in the arguments section Click on the Finish button when youre done This will take you to the pipeline settings page for additional configurations Navigate to Environment Variables tab Configure the DOCKERHUBUSERNAME as an environment variable Publish your application image to Docker Hub Create an artifact store Navigate to Admin gt Artifact Stores to add the global artifact store Navigate to the pipeline settings for buildandpublishimage Tip Use the tree on the left to navigate to the job buildandpublishimage Once youre here you can associate the profile ID under the Job Settings tab Create an external artifact under the buildandpublishimage job Specify the artifact id as bulletinboard Specify the artifact store id as dockerhub Specify the image property as DOCKERHUBUSERNAMEbulletinboard Specify the tag property as GOPIPELINELABEL This will ensure that the image being built by the buildandpublishimage job is the one being published Note You need to have an artifact store configured for this so that the plugin is aware of the credentials to use when publishing the artifact This is what the Tasks under the buildandpublishimage job should look like once you finish this configuration Associate job with the elastic profile Quick links What are elastic profiles We have created a sample elastic profile demoapp for the helm release by default Before associating elastic profile to a job youll need to verify that the elastic profile and plugin settings are set up Step 1 Verify elastic profile Navigate to Admin gt Elastic Agent Profiles You should be able to see demoapp in this If the elastic profile does not exist or if you would like to create your own refer to this section Step 2 Verify Kubernetes elastic agent plugin Navigate to Admin gt Plugins and click on Status Report If youre able to see a screen similar to the screenshot above then the plugin has been configured If the plugin settings have not been configured refer to this section Step 3 Configure elastic profile ID for the job Before you can run the pipeline youll need to associate an elastic profile ID with the job to be executed To do this go to the Job Settings tab of the specific job Tip Use the tree on the left to navigate to the job buildandpublishimage Once youre here you can associate the profile ID under the Job Settings tab Once youve associated the job to the profile demoapp youre ready to run the pipeline Run your pipeline Now that the pipeline has been configured we can run it and verify that the docker image has been pushed To run the pipeline unpause the pipeline in the GoCD dashboard The changes from the source git repository gets picked up automatically when the pipeline is triggered Check the status of agents with Agent Status Report When the pipeline is running signified by a yellow bar you can take a look at the status of the agents that are assigned to run the jobs in the pipeline You can find the following information here pod details amp configuration pod events logs for the agents This can be useful to troubleshoot when an agent is not picking up the job To access the agent status report Click on a stage of your choice when the pipeline is being built Youll see the stage detail page with a list of jobs Click on the job that you wish to see the agents of This is the job detail page which has a console log Click on the button titled Check Agent Status Clicking on this will take you to the Agent Status Report where you can see "},{"title":"Create a pipeline to deploy on Kubernetes","href":"/gocd_on_kubernetes/designing_a_cd_pipeline/creating_a_deploy_pipeline.html","content":"Create a pipeline to deploy the published artifact In this section well learn to design a deployment pipeline to deploy to Kubernetes After youve designed and run the build pipeline youll see that for every successful build a new image gets created with a new tag To create a pipeline to deploy the published artifact follow these steps Quick Links Modeling Deployment Pipelines Deploy application to Kubernetes Navigate to Admin gt Pipelines and click on Create a pipeline within this group Specify the pipeline name as deployapptocluster Specify a git material with URL httpsgithubcomgocddemonodebulletinboardgit The deploy scripts are present in the same repository as the application source Create a stage named deploytocluster Create the initial job deploytocluster The initial task argument is appdeploymentsh Introduce the pipeline testapplication as a material called test Tip Choose the option Pipeline in the Add Material dropdown under the Materials tab We want to add the earlier pipeline to build the app as a dependency as we want this pipeline to run only after the docker image is built Add the NAMESPACE DOCKERHUBUSERNAME and KUBETOKEN environment variables The KUBETOKEN secure environment variable is needed when we make a Kubernetes API requests to create deployments service and ingress For convenience you can use the secret associated with the service account we used to start the Tiller pod kubesystemdefault Note The KUBETOKEN environment variable must be configured as a secure variable as shown in the image This token should not be exposed kubectl describe sa default namespace kubesystem to obtain the secret name kubectl describe secrets lttokennamegt namespace kubesystem Configure a Fetch Artifact Task to fetch the docker image name The docker image is the artifact that was published in upstream buildandpublishimage Choose Artifact Type External Specify the pipeline as buildandpublishimagetestapplication Specify the stage as buildandpublishimage Specify the job as buildandpublishimage Specify the artifact id configured in buildandpublishimage In the earlier section we configured the artifact id as bulletinboard When the plugin view appears for Artifact plugin for docker check Skip Image Pulling We want to reference the image in our script to deploy onto the Kubernetes cluster but we do not want to pull the image on the agent itself Reorder the tasks as shown as we want to first fetch the image before running any tests imagesgocdhelmchartdeploytaskspng Associate job with the elastic profile Quick links What are elastic profiles We have created a sample elastic profile demoapp for the helm release by default Before associating elastic profile to a job youll need to verify that the elastic profile and plugin settings are set up Step 1 Verify elastic profile Navigate to Admin gt Elastic Agent Profiles You should be able to see demoapp in this If the elastic profile does not exist or if you would like to create your own refer to this section Step 2 Verify Kubernetes elastic agent plugin Navigate to Admin gt Plugins and click on Status Report If youre able to see a screen similar to the screenshot above then the plugin has been configured If the plugin settings have not been configured refer to this section Step 3 Configure elastic profile ID for the job Before you can run the pipeline youll need to associate an elastic profile ID with the job to be executed To do this go to the Job Settings tab of the specific job Tip Use the tree on the left to navigate to the job deploytocluster Once youre here you can associate the profile ID under the Job Settings tab Once youve associated the job to the profile youre ready to run the pipeline Run your pipeline Now that the deploy pipeline is configured we can run it and verify that the deployment has been completed To run the pipeline unpause the pipeline in the GoCD dashboard The changes in the source git repository get picked up automatically when the pipeline is triggered View the value stream map You can view the value stream map of your deployment by clicking on the VSM link of the deployapptocluster pipeline in the Dashboard Access your application Once the pipeline has run successfully go to httpltingressipgtbulletinboard to see your deployed sample application Get the new ingress IP address for the application by doing For Minikube minikube ip For others echo quothttpkubectl get ingress bulletinboardingress namespace NAMESPACE o jsonpathquotstatusloadBalanceringress0ipquotquot "},{"title":"Create a pipeline to test the built application","href":"/gocd_on_kubernetes/designing_a_cd_pipeline/creating_a_test_pipeline.html","content":"Create a pipeline to test the built application image In the previous section we built and pushed a docker image to Docker Hub In this section we will look at how to pull the built docker image and runs tests against it Quick links Getting started with GoCD Test the application artifact To pull our application docker image artifact from Docker Hub and run tests follow these steps Navigate to Admin gt Pipelines and click on Create a pipeline within this group Specify the pipeline name as testapplication Introduce the pipeline buildandpublishimage as a material called upstream Tip Choose the option Pipeline in the Material dropdown We want to add our build pipeline buildandpublishimage as a dependency to this one as we want the test pipeline to run only after the docker image is built Create a stage named testappimage Create the initial job testappimage The initial task argument is docker run DOCKERHUBUSERNAMEbulletinboardGODEPENDENCYLABELUPSTREAM npm test Tip Do not forget the c option in the arguments section Configure the DOCKERHUBUSERNAME as an environment variable Add the Fetch External Artifact task to pull the built image from Docker Hub Reorder the tasks as shown as we want to first fetch the image before running any tests Associate job with the elastic profile Quick links What are elastic profiles We have created a sample elastic profile demoapp for the helm release by default Before associating elastic profile to a job youll need to verify that the elastic profile and plugin settings are set up Step 1 Verify elastic profile Navigate to Admin gt Elastic Agent Profiles You should be able to see demoapp in this If the elastic profile does not exist or if you would like to create your own refer to this section Step 2 Verify Kubernetes elastic agent plugin Navigate to Admin gt Plugins and click on Status Report If youre able to see a screen similar to the screenshot above then the plugin has been configured If the plugin settings have not been configured refer to this section Step 3 Configure elastic profile ID for the job Before you can run the pipeline youll need to associate an elastic profile ID with the job to be executed To do this go to the Job Settings tab of the specific job Tip Use the tree on the left to navigate to the job testappimage Once youre here you can associate the profile ID under the Job Settings tab Once youve associated the job to the profile youre ready to run the pipeline Run your pipeline Now that the test pipeline is configured we can run it to verify that the tests have been run To run the pipeline unpause the pipeline in the GoCD dashboard The changes in the source git repository get picked up automatically when the pipeline is triggered In the next section well look at how to configure a pipeline to deploy our sample application onto a Kubernetes cluster"},{"title":"Docker workflows","href":"/gocd_on_kubernetes/designing_a_cd_pipeline/docker_workflows.html","content":"Docker workflows Using docker containers to execute docker commands can be done in the following ways This section identifies the approaches and the drawbacks to keep in mind when using these approaches Docker in Docker DinD Docker in Docker involves setting up a docker binary and running an isolated docker daemon inside the container This requires that the host docker container be run in privileged mode The privileged flag enables the host container to do almost all of the things that the underlying host machine can do We have provided the GoCD Agent DinD image that can be used to run docker related tasks in a GoCD agent Drawbacks As explained by jpetazzo in his blogpost there are some cases where DinD may not work for you Additionally there is a security risk of running a container in privileged mode as well Docker Outside of Docker DooD Docker outside of Docker involves volume mounting the hosts docker socket onto the GoCD agent container and use the hosts docker daemon to execute docker related commands from the CI This can be achieved by doing docker run it v varrundockersockvarrundockersock e GOSERVERURLquothttpsltgoserveripgt8154goquot gocdgocdagentalpine37v1810 Drawbacks Name conflicts may occur if there are two containers with the same name that the GoCD agents bring up Consider the cleanup of the containers after a build completes The GoCD agent container is brought up and down by an elastic agent plugin However containers brought up by these ephemeral GoCD agents for build and test are not automatically terminated by the plugin at the end of a build They must be explicitly cleaned up before the GoCD agent is brought down In addition layers of images are cached and reused Build isolation is lost The containers brought up this way are outside of the helm scope and not easily accessible Using a single docker GoCD agent image In cases where DinD and DooD both dont work for your use case an alternative is to package all the build time dependencies into a single docker image Use this docker image with the GoCD Elastic Agents to run the builds This works only if you are not choosing to containerize your application builds and tests In other words this works well for a workflow that doesnt involve running docker related commands using elastic agents"},{"title":"Configure your Kubernetes Cluster","href":"/gocd_on_kubernetes/gocd_helm_chart/configure_cluster.html","content":"Configure your Kubernetes Cluster Now that you have your Kubernetes cluster set up and running youll need to make the following configuration changes This configuration will be specific to your target Kubernetes environment We have specified the required actions for Minikube GKE AWS below 1 Enable Ingress to be able to expose the GoCD application over your network you will need an Ingress controller 2 Configure Service Account A service account is how Kubernetes manages roles and permissions The default Kubernetes service account needs to be associated with the clusteradmin type role to be able to install the GoCD application Option 1 Configure minikube Enable Ingress You can enable Ingress on minikube with this command minikube addons enable ingress ingress was successfully enabled Configure service account As explained in the setup section starting minikube with the bootstrapper kubeadm option is sufficient to install the GoCD application Option 2 Configure GKE Enable Ingress GKE comes with Ingress enabled by default so no action needed here Configure service account The clusteradmin role is a cluster level role that exists on GKE Associate the cluster role with the service account with a cluster role binding kubectl create clusterrolebinding clusterRoleBinding clusterroleclusteradmin serviceaccountkubesystemdefault Option 3 Configure kops Enable Ingress To enable ingress for kops you can configure an ingress controller of your own or an ingress addon provided by kops Configure service account Kops requires a cluster role and cluster role binding to be set up for the service account associated with the Tiller pod To create the cluster admin role apply the following resource descriptor apiVersion rbacauthorizationk8siov1 kind ClusterRole metadata name clusteradmin rules apiGroups quotquot resources quotquot verbs quotquot Associate the cluster role with the service account with a cluster role binding kubectl create clusterrolebinding clusterRoleBinding clusterroleclusteradmin serviceaccountkubesystemdefault "},{"title":"Configure the Kubernetes Elastic Agent plugin","href":"/gocd_on_kubernetes/gocd_helm_chart/configure_k8s_ea_plugin.html","content":"Kubernetes elastic agent plugin GoCD agents are quotworkersquot and execute tasks that make up jobs stages and the pipeline GoCD Elastic agents spin up agents on demand depending on the intensity of the tasks and availability of processing power The Kubernetes elastic agent plugin is bundled with the GoCD Helm chart This plugin spins up GoCD agent pods in the Kubernetes cluster in response to build workload Configure the Kubernetes elastic agent plugin We need to configure the plugin to point to the right Kubernetes cluster Navigate to the plugins page from the Admin dropdown Click on the gear icon for the Kubernetes Elastic Agent plugin to edit its settings This is a rundown of the attributes of the Kubernetes elastic agent The GoCD Server URL is required for the agents brought up by the plugin to connect to the GoCD server A private GoCD server IP within the Kubernetes cluster can be obtained and specified with the following command echo quothttpskubectl namespacegocd get service gocdserver o jsonpathspecclusterIP8154goquot The Cluster URL indicates the Kubernetes cluster in which the GoCD agent pods must be brought up This can be obtained by running the following command kubectl clusterinfo The Kubernetes master url is the Cluster URL The Kubernetes namespace where the helm chart was installed needs to be specified As mentioned in the installation guide above the namespace we have used is gocd The Service Account token specified must be associated with a service account that has the following privileges nodes list get events list watch namespace list get pods podslog The token can be obtained by secretnamekubectl namespacegocd get serviceaccount gocd o jsonpathquotsecrets0namequot kubectl namespacegocd get secret secretname o jsonpathquotdatatokenquot base64 decode Once you save your configuration navigate to the plugin status report page from the plugins page and confirm that you dont have configuration errors Create an elastic profile An elastic agent plugin spins up GoCD agents on the fly It needs to know what type of agent to spin up An elastic profile specifies the type of GoCD Agent to be used by the elastic agent plugin Using this you can bring up different kinds of agent pods within the same cluster to run different kinds of jobs To configure an elastic profile go to Admin gt Elastic Agent Profiles and click on the Add button to add a new profile Choose an ID name for the profile This profile ID will be made use of when we create the buildandpublishimage pipeline and deployapptocluster pipeline Choose a GoCD agent image For this example since we are building Docker images we recommend using gocdgocdagentdockerdindv1820 Tip Check the Privileged mode checkbox which is essential to run the Docker in Docker image You can see all of our docker images both server and agent here Once youve created an elastic profile you can begin to associate the profile to jobs inorder to run them"},{"title":"Install the GoCD Helm chart","href":"/gocd_on_kubernetes/gocd_helm_chart/helm_install.html","content":"Install the GoCD Helm chart Helm is a package manager for Kubernetes Kubernetes packages are called charts Charts are curated applications for Kubernetes Install the GoCD Helm chart with these commands helm repo add stable httpskuberneteschartsstoragegoogleapiscom helm install stablegocd name gocd namespace gocd Access the GoCD server After youve installed the GoCD helm chart you should be able to access the GoCD server from the Ingress IP The Ingress IP address can be obtained as specified below Minikube minikube ip Others ipkubectl get ingress namespace gocd gocdserver o jsonpathquotstatusloadBalanceringress0ipquot echo quothttpipquot It might take a few minutes for the GoCD server to come up for the first time You can check if the GoCD server is up with this command kubectl get deployments namespace gocd The column Available should show 1 for gocdserver The GoCD server on startup will look like this Now that you have accessed the GoCD server successfully you will need to configure the Kubernetes elastic agent plugin"},{"title":"Setup","href":"/gocd_on_kubernetes/gocd_helm_chart/setup.html","content":"Setup Before you can get started with GoCD on Kubernetes make sure that you have taken a look at the list below 1 Install kubectl The Kubernetes CLI kubectl is used for cluster management purposes The Kubernetes install documentation provides various ways of installing kubectl for different platforms 2 Setup a Kubernetes Cluster Before installing GoCD you need to setup a Kubernetes cluster You can do this using any of the following tools Option 1 Minikube setup guide Once minikube is installed start minikube with the kubeadm bootstrapper The kubeadm toolkit helps to easily bootstrap a cluster so that appropriate privileges are granted for performing readwrite operations on Kubernetes authentication and authorization RBAC resources minikube start vmdrivervirtualbox bootstrapperkubeadm memory 4096 Option 2 Google Kubernetes Engine or GKE setup guide Tip Once the cluster is running execute the following command to see if kubectl is using right context kubectl config currentcontext gkemyprojectuscentral1agocdcluster Option 3 Kubernetes Operations on AWSGCE or kops setup guide Other References Manage Kubernetes Clusters on AWS Using Kops Installing Kubernetes on AWS with kops 3 Install the Kubernetes package manager Helm Helm is a package manager for Kubernetes Kubernetes packages are called charts Charts are curated applications for Kubernetes Helm has two parts to it a client and a server called Tiller Install the Helm client The helm client is a CLI that lets you install and update packaged applications on Kubernetes Please refer to the helm install documentation for alternative methods of installation Install the Helm server The helm server is installed as a Kubernetes pod and can be started with the command helm init "},{"title":"Setup and configuration","href":"/gocd_on_kubernetes/gocd_helm_chart/setup_and_configuration.html","content":"Getting Started with GoCD on Kubernetes Step 1 Setup and Configuration"},{"title":"Troubleshooting","href":"/gocd_on_kubernetes/gocd_helm_chart/troubleshooting.html","content":"Troubleshooting Elevated privileges error User quotsystemserviceaccountkubesystemdefaultquot cannot get namespaces in the namespace quotgocdquot Unknown user quotsystemserviceaccountkubesystemdefaultquot Error release gocd failed clusterrolesrbacauthorizationk8sio quotltRBACgtquot is forbidden attempt to grant extra privileges The above 2 error messages occur if the service account associated with the tiller pod does not have the permissions to create the resources Refer to the privileges section in the prerequisites to provide tiller elevated privileges Docker In Docker agent not working Cannot connect to the Docker daemon at unixvarrundockersock Is the docker daemon running Make sure to have started the docker container with the privileged mode For the Kubernetes elastic agent edit the elastic profile in Admin gt Elastic Agent Profiles to check the Privileged mode"},{"title":"Introduction","href":"/gocd_on_kubernetes/introduction.html","content":"Introduction GoCD gives you the flexibility to effectively represent CD pipelines that suit your organizations processes Kubernetes gives you a highly programmable delivery infrastructure platform And together they provide the foundation for a powerful Continuous Delivery platform With this documentation guide youll be able to Setup and configure an instance of GoCD on a Kubernetes cluster Design a continuous delivery pipeline to deploy a sample application to Kubernetes Publish to and fetch artifacts from an external respository like Docker Hub Registry "},{"title":"Configure an agent with proxy","href":"/installation/configure-agent-proxy.html","content":"Configure a GoCD agent to connect to a server through a proxy server Note Using this feature requires atleast version 17110 of the GoCD server and agent Proxy support is configured with GoCD agents by passing certain system properties to the Java Virtual Machine JVM on startup These properties follow the conventions defined by the JVM httpproxyHost default ltnonegt httpproxyPort default 80 httpnonProxyHosts default localhost1271 httpsproxyHost httpsproxyPort socksProxyHost socksProxyPort default 1080 socksProxyVersion default 5 If your proxy server is running on proxyexamplecom port 3128 you will need to setup the following system properties DhttpproxyHostproxyexamplecom DhttpproxyPort3128 DhttpsproxyHostproxyexamplecom DhttpsproxyPort3128 DhttpnonProxyHostslocalhost To avoid using proxies for certain hosts you may use httpnonProxyHosts which is a list of hostnames or ip addresses separated by a pipe character you may include a wildcard character for matching For example DhttpnonProxyHostsfoocomlocalhost Note that the pipe character may wildcard may need special escaping on Linux Configuring an agent on Linux To setup the agent on linux edit the file etcdefaultgoagent and add the following PROXYSETTINGSquotDhttpsproxyHostproxyexamplecom DhttpsproxyPort3128 DhttpnonProxyHostslocalhostdepartmentacmecomquot GOAGENTSYSTEMPROPERTIESquotPROXYSETTINGSquot AGENTBOOTSTRAPPERJVMARGSquotPROXYSETTINGSquot Configuring an agent on Windows Follow the instructions to add a new property for GoCD agents setup on windows such as wrapperjavaadditional17quotDhttpsproxyHostproxyexamplecom DhttpsproxyPort3128 DhttpnonProxyHostslocalhostdepartmentacmecomquot setAGENTSTARTUPARGSAGENTSTARTUPARGS DhttpsproxyHostproxyexamplecom DhttpsproxyPort3128 DhttpnonProxyHostslocalhostdepartmentacmecom "},{"title":"Configure a Reverse Proxy","href":"/installation/configure-reverse-proxy.html","content":"Configure a reverse proxy server to use with GoCD server It is sometimes useful to front GoCD with a proxy server In this section we give you some tips and examples on how to achieve this GoCD with Apache An example of how to configure GoCD with Apache is shown below Assumptions You have Apache with modproxy installed The Apache server sits on the same machine as the GoCD server localhost Listen nnnnnnnnnnnn80 NameVirtualHost nnnnnnnnnnnn80 ltVirtualHost nnnnnnnnnnnn80gt ServerName goyourdomaincom DocumentRoot varwwwhtml ltIfVersion gt 24gt ProxyPass wslocalhost8153 ProxyPassReverse wslocalhost8153 ltIfVersiongt ltIfVersion lt 24gt ProxyPass httplocalhost8153 ProxyPassReverse httplocalhost8153 ltIfVersiongt ProxyPreserveHost On ltVirtualHostgt If youre additionally using SSL highly recommended you may use the following snippet Listen nnnnnnnnnnnn80 NameVirtualHost nnnnnnnnnnnn80 ltVirtualHost nnnnnnnnnnnn80gt ServerName gocdexamplecom Redirect any http requests to https RewriteEngine On RewriteRule httpsSERVERNAME1 RpermanentL ltVirtualHostgt ltVirtualHost nnnnnnnnnnnn443gt ServerName gocdexamplecom Proxy everything over to the GoCD server ProxyPass httplocalhost8153 ProxyPassReverse httplocalhost8153 ProxyPreserveHost On RequestHeader set XForwardedProto quothttpsquot ltLocation gt Order allowdeny Allow from all ltLocationgt SSL configuration SSLEngine on SSLCertificateFile etcpkitlscertsgocdexamplecompem SSLCertificateKeyFile etcpkitlsprivategocdexamplecomkey SSLCertificateChainFile etcpkitlscertsgocdexamplecompemchainedpem ltVirtualHostgt GoCD with NGINX server Redirect any http requests to https listen 80 servername gocdexamplecom return 301 httpsgocdexamplecomrequesturi map httpupgrade connectionupgrade default upgrade close server listen 443 ssl servername gocdexamplecom sslcertificate etcpkitlscertsgocdexamplecomchainedpem sslcertificatekey etcpkitlsprivategocdexamplecomkey Proxy everything over to the GoCD server location proxysetheader Host host proxysetheader XRealIP remoteaddr proxysetheader XForwardedFor proxyaddxforwardedfor proxysetheader XForwardedProto scheme proxyhttpversion 11 proxysetheader Upgrade httpupgrade proxysetheader Connection connectionupgrade lta idquotagentsandcustomsslportsquotgtltagt Agents and reverse proxies The GoCD server requires that the agents connect to it directly without any reverseproxies in between that perform SSL termination This is because GoCD agentserver communication is authenticated using SSLTLS client certificates a reverseproxy will be interpreted as a MITM maninthemiddleattack and the agents will not be able to connect to the server Also see Configure site URLs "},{"title":"configure_proxy","href":"/installation/configure_proxy.html","content":" Redirecting Redirecting This page has moved to Click here if you are not redirected windowlocationhref configurereverseproxyhtml "},{"title":"Configuring Server Details","href":"/installation/configuring_server_details.html","content":"Configuring GoCD server details Artifact repository configuration GoCD needs no configuration once installed However we recommend that you create a separate partition on your computers hard disk for GoCD server artifacts The artifact repository can grow in size very quickly If located on your systems main partition you may experience data loss and unpredictable application behaviour as the disk fills up Once you have created a new disk partition you need to tell GoCD where to find it Click on quotServer Configurationquot tab of the quotAdminquot tab GoCD to the quotPipeline Managementquot section Specify the artifacts directory location and click on quotSavequot Power users can also configure this via the Config XML tab on the Admin section ltcruisegt ltserver artifactsdirquotpathtoartifactsdirectoryquotgt ltservergt ltcruisegt In Windows you may need to assign your artifact repository partition a separate drive letter In Windows your configuration might look like this ltcruisegt ltserver artifactsdirquotEgoartifactsquotgt ltservergt ltcruisegt When you have entered this information click quotSavequot to save the configuration file You can change the artifacts directory location at any time using the method described above even when GoCD is running However GoCD will not move existing artifacts to the new location for you and changing the location while GoCD is running wont take effect until GoCD Server is restarted If you decide to move your artifact repository the safe way to do it is Pause all pipelines and wait until all active jobs on the agent grid has completed all agents are in the state quotidlequot Shut down GoCD server Copy the artifact repository to the new location Edit GoCDs configuration file manually as described above to tell GoCD where to find the artifacts Restart GoCD server Even when all active jobs on the agent grid have stopped users may still be uploading artifacts using the RESTful URLs This is why we need to stop GoCD server completely in order to be safe Configure site URLs Click on quotServer Configurationquot tab of the quotAdminquot tab GoCD to the quotServer Managementquot section GoCD generates URLs that are relative to the base URL of the request However there are scenarios such as sending emails generating feeds where GoCD cannot rely upon publishing URLs relative to a request If you have fronted GoCD with a reverse proxy this value should be the base URL for the proxy and not the internal GoCD address For this reason it is necessary to specify this configuration This URL should contain the port if your base URL contains a nonstandard port Power users if they so desire can directly update the server section ltcruisegt ltserver siteUrlquothttplthostgtltportgtquot secureSiteUrlquothttpslthostgtltsecurePortgtquotgt ltservergt ltcruisegt Certain features in GoCD such as Mingle integration require an HTTPSSSL endpoint If you wish that your primary site URL be HTTP but still want to have HTTPS endpoints for the features that require SSL you can specify the secureSiteUrl attribute with a value of the base HTTPS URL Also see Installing GoCD agents Configure GoCD to work with a proxy "},{"title":"Hardware Specifications","href":"/installation/hardware_specifications.html","content":"GoCD hardware specifications lt toc gt Note This page is still a work in progress Please report issues and provide feedback at httpsgithubcomgocddocsgocdissues76 The hardware specifications for a GoCD server depends on a number of factors this makes it difficult to estimate upfront the required hardware specifications and requires a bit of experimentation The hardware specifications will depend on the current needs and future expansion plans Agent hardware requirements The agent hardware requirements are basically determined by the builds that are run Running GoCD agents will introduce a slight CPU overhead usually it can be neglected when comparing to the build process CPU requirements The agent will require an additional memory of about 500Mb Although you may run the agent on the same machine as the server it is recommended that you use a separate machine though it may be virtual for each build agent If you chose to install several agents on the same machine please consider possible CPU disk memory or network bottlenecks that might occur Server hardware requirements The GoCD Server is responsible for performing a number of tasks and we describe how each of these tasks affects the specifications Number of webrequests to the server Number of agents connected to a GoCD server and how often they build Number of source control materials Type of source control materials some types perform better than others Number of times each of the pipeline has run pipeline history Number and types of plugins that may be installed Number of webrequests to the server Webrequests to the server come from different kinds of sources browsers requests from end users most pages in GoCD continuously poll the server every few seconds to check if the page has updates on it API calls from programs CCTray which is popularly used by dashboard apps and other desktop apps to notify devs about failing builds usually poll every few seconds and are fairly expensive calls on the server GoCD uses a shared threadpool to manage a lot of web requests from several users if you have a lot of users consider adding more cores based on the number and type of request you serve per minute You can find out the number of requests that your server is handling by turning on webrequest logging Number of agents connected to a GoCD server and how often they build Each GoCD agent that is connected to the server will poll the GoCD server every few seconds and to update its status on the server and check if there are any jobs that it should build When a build starts off on an agent it will first perform an SCM checkout operation to update to the correct revision that must be built If the job requires that artifacts from other dependent jobs be downloaded the agent will download the artifacts from the server During a job run the agent will send the console logs every few seconds and at the end of the build an agent may upload artifacts to the server if it is configured to do so To cope up with the number of agents artifact uploads and downloads ensure that the server has enough disk space to store the artifacts enough consistent IO baseline throughput to be able to handle simultaneous uploads and downloads from several agents at the same time enough cores to be able to handle web requests from agents Note it is perfectly allright to host the GoCD artifacts on a network file share However ensure that your network file share can provide a consistent IO throughput A high load on the network file share may also cause your webrequests to slow down if they use the same network port It helps with quicker artifact upload and download if the server and agents are geographically colocated This will help reduce the latency between the agent and server Number of source control materials GoCD uses upto 10 processes configurable to check if updates are available for source control materialsSCM Only materials that have polling turned on will be polled Each material is checked approximately every minute for to see if there are updates available so that GoCD can trigger a build If you have hundreds of SCMs depending on the performance of your source control updates the update checks for SCMs may queue up and negatively affect the performance Ensure that your SCM servers can handle the load of several SCM checkout and update operations both from the server and the agent there is enough IOPS IO throughput memory and cores available to ensure that you can poll all your SCMs without the update checks queueing up or eating away too many resources that would otherwise be used by the GoCD server process You can find out the amount of time it takes to perform an SCM update check by turning on performance logging on your GoCD server If you find that material updates are taking too much of your CPU time you may try one or more of these options turn off polling for materials that dont update frequently reduce the interval between polls notify the GoCD server of material updates instead of polling it investigate if upgrading the SCM software version resolves the issue Type of source control materials some types perform better than others All SCMs need to connect to a remote SCM repository to check if updates are available Some of them are more efficient at update checks than others SCMs like git and mercurial require a local clone to be able to check if there are new commits and the contents of those commits as such they will have additional overhead in terms of IO and disk space usage On the other hand SCMs like SVN and TFS dont require a local checkout to check for updates so they may not have a disk IO overhead on the gocd server However the number and frequency of since a material update check may cause a bottleneck on the network Number of times each of the pipeline has run pipeline history Each pipeline run along with the stages and jobs in it is recorded in the database for purpose of audits To ensure optimal performance of your GoCD server we recommend that you run your database server on a separate instance Number and types of plugins that may be installed Each plugin that is installed on the server will consume additional memory on the memory and may have an impact on the CPU utilization of the server Task plugins will consume additional on the memory usage of the gocd agent process and may affect the CPU usage of the gocd agent process This may require that users change the heapXmx andor metaspaceXXMaxMetaspaceSize Definitions For the purpose of the rest of this document we would like to use the following definitions Cores The number of physical compute units available to the server machine A note about hyperthreading While hyperthreading makes a single physical core to look like 2 logical cores the performance improvement in most cases the performance is somewhere around 15 of a single core Memory JVM Memory The amount of memory available to the JVM running the GoCD server process roughly the Xmx JVM argument RAM The amount of memory available to the server machine Generally speaking the amount of RAM should be atleast 23GB more than the JVM memory to allow some headroom for the operating system A note about swap Ensure that swap is turned off because it negatively affects performance when the machine runs out of memory and begins swapping Buffer Cache Reading from a disk is very slow as compared to reading from memory Additionally it is common to read the same part of a disk several times during relatively short periods of time For example consider how often the command git might be run on a GoCD server By reading the information from disk only once and then keeping it in memory until no longer needed one can speed up all but the first read This is called disk buffering and the memory used for the purpose is called the buffer cache Generally speaking you should ensure that there is sufficient free memory for buffer cache to ensure optimal performance and reduced disk IO rootfmtgocdgo01 free m total used free shared buffers cached Mem 11912 11633 278 0 20 2128 bufferscache 9484 2427 Swap 0 0 0 In the example above the first line says that the amount of free memory is quot278quot mb this makes it look like the system is running short of memory However the second line bufferscache shows that in reality 2427 mb is actually free This is because about 202128 megs of memory is buffers cache which the OS can purge if it is programs request for more memory IOPS The amount of inputoutput operations per seconds of your storage device IO throughput Usually expressed as Megabytes Second MBs indicates the amount of data that a server can read andor write in a given amount of time Usually higher the IOPS the higher the throughput"},{"title":"Linux","href":"/installation/install/agent/linux.html","content":"Installing GoCD agent on Linux lt toc gt Installation of the GoCD agent using the package manager will require root access on the machine You are also required to have a java version 8 same version as the GoCD server for the agent to run The installer will create a user called go if one does not exist on the machine The home directory will be set to vargo If you want to create your own go user make sure you do it before you install the GoCD agent RPM based distributions ie RedHatCentOSFedora The GoCD agent RPM installer has been tested on RedHat Enterprise Linux and CentOS It should work on most RPM based Linux distributions lt include filequotinstallationinstallyumrepomdquot markdownquottruequot gt Once you have the repository setup execute sudo yum install y goagent Alternatively if you have the agent RPM downloaded sudo yum install y java180openjdk atleast Java 8 is required you may use other jrejdk if you prefer sudo rpm i goagentversionnoarchrpm Debian based distributions ie Ubuntu The GoCD agent deb installer has been tested on Ubuntu However it should work on most Linux distributions which use debs lt include filequotinstallationinstallaptrepomdquot markdownquottruequot gt Once you have the repository setup execute sudo aptget install goagent Alternatively if you have the agent DEB downloaded sudo dpkg i goagentversiondeb Managing the goagent service on linux To manage the goagent service you may use the following commands sudo etcinitdgoagent startstopstatusrestart Configuring the goagent After installing the goagent service you must first configure the service with the hostname or IP address of your GoCD server in order to do this Open etcdefaultgoagent in your favourite text editor Change the IP address 127001 in the line GOSERVERURLhttps1270018154go to the hostname or IP address of your GoCD server Save the file and exit your editor Run etcinitdgoagent startrestart to restart the agent Note You can override default environment for the GoCD agent by editing the file etcdefaultsgoagent Location of GoCD agent files The GoCD agent installs its files in the following locations on your filesystem varlibgoagent contains the binaries usrsharegoagent contains the start script varloggoagent contains the agent logs etcdefaultgoagent contains all the environment variables with default values These variable values can be changed as per requirement Overriding default startup arguments and environment Users can override default startup arguments for a GoCD agent in a Linux machine by editing the file etcdefaultgoagent For eg To enable Websocket communication between the server and agent user can add the following GoCD agent system property export GOAGENTSYSTEMPROPERTIESquotGOAGENTSYSTEMPROPERTIES Dgoagentwebsocketenabledtruequot lt include filequotinstallationinstallagentregisterwithservermdquot markdownquottruequot gt"},{"title":"Mac OS X","href":"/installation/install/agent/osx.html","content":"Installing GoCD agent on Mac OS X lt toc gt Installation Doubleclick the file downloaded from the downloads page to unzip the contents Drag the Go Agentapp icon to the Applications folder Doubleclick on the Go Agentapp icon to open the launcher The very first time you run the GoCD agent on your machine you will be prompted for the hostname or IP address of your GoCD server By default it will try connecting to the local machine Click the OK button to continue Overriding default startup arguments and environment You can override default environment variables by Overriding them during startup when starting from the terminal PATHPATHusrlocalbin open ApplicationsGo Agentapp Overriding them using a file LibraryApplication SupportGo Agentoverridesenv This file is sourced during agent startup and it can be setup to change environment variables PATHPATHusrlocalbin Location of GoCD agent files The GoCD agent installs its files in the following locations on your filesystem ApplicationsGo Agentapp The go agent application LibraryPreferencescomthoughtworksgoagentproperties The agent properties host and port are saved here LibraryApplication SupportGo Agent The agent directory You can find logs in LibraryApplication SupportGo Agent The osxapplog file contains the info used to bootstrap the agent jar Setting the server location without the GUI You can specify the server location in the GUI but you can also modify the properties file itself when the Go agent app is not running This allows you to set a custom port number which is not possible in the GUI be aware that this might not always work as you expect The properties file is located in LibraryPreferencescomthoughtworksgoagentproperties and has a serverUrl and a sslVerificationMode property lt include filequotinstallationinstallagentregisterwithservermdquot markdownquottruequot gt"},{"title":"Windows","href":"/installation/install/agent/windows.html","content":"Installing GoCD agent on Windows lt toc gt Installation You must be logged in as a user with Admin privileges to install the GoCD agent on Windows Download a version of goagent from the downloads page Doubleclick the goagentversionsetupexe installer file and follow the prompts to install Go During installation you will be asked to select a root path for your GoCD agent In addition to being the agent installation directory this directory will contain also contain a directory where your source code is checked out and built You will next be prompted to choose the bundled JRE or specify the location of JRE or JDK installed on your system After installing the files the installer will prompt you for the hostname or IP address of the GoCD server Leaving this blank it will default to localhost At the end of the installation GoCD agent registers itself as a windows service and starts running automatically Silent Headless Installation You may use this method if you would like to script the installation of the GoCD agent goagentversionsetupexe S STARTAGENTNO SERVERURLquotltSERVERURLgtquot GOAGENTJAVAHOMEltPATHTOJAVAHOMEgt DltPATHTOAGENTDIRECTORYgt Argument Required Description "},{"title":"Generic Zip","href":"/installation/install/agent/zip.html","content":"Running GoCD agent via zip without installation If you want to run GoCD on a platform which does not have a native installer or want to run GoCD without installing it you could do so by using the zip installers Download the zip installer for GoCD agent Unzip the installer in a folder of your choice It creates a subfolder with the name goagentversion Set java in path If you are on a Windows system set GOAGENTJAVAHOME to the installation path of java on the system If you are on a Unix system set JAVAHOME to the installation path of java on the system Open a command prompt and go to the folder Start the agent If you are on a Windows system run startagentbat If you are on a Unix system run agentsh Ensure that agentsh is executable Note You can override default environment for the GoCD agent by editing the file etcdefaultsgoagent GoCD agent by default will attempt to connect to the GoCD server running on the same system If you want it to connect to a different GoCD server set the environment variable GOSERVER or edit the startup scripts suitably lt include filequotinstallationinstallagentregisterwithservermdquot markdownquottruequot gt"},{"title":"Linux","href":"/installation/install/server/linux.html","content":"Installing GoCD server on Linux lt toc gt Installation of the GoCD server using the package manager will require root access on the machine You are also required to have a java version 8 for the server to run The installer will create a user called go if one does not exist on the machine The home directory will be set to vargo If you want to create your own go user make sure you do it before you install the GoCD server RPM based distributions ie RedHatCentOSFedora The GoCD server RPM installer has been tested on RedHat Enterprise Linux and CentOS It should work on most RPM based Linux distributions lt include filequotinstallationinstallyumrepomdquot markdownquottruequot gt Once you have the repository setup execute sudo yum install y goserver Alternatively if you have the server RPM downloaded sudo yum install y java180openjdk atleast Java 8 is required you may use other jrejdk if you prefer sudo rpm i goserverversionnoarchrpm Debian based distributions ie Ubuntu The GoCD server deb installer has been tested on Ubuntu However it should work on most Linux distributions which use debs lt include filequotinstallationinstallaptrepomdquot markdownquottruequot gt Once you have the repository setup execute sudo aptget install goserver Alternatively if you have the server DEB downloaded sudo dpkg i goserverversiondeb Managing the goserver service on linux To manage the goserver service you may use the following commands sudo etcinitdgoserver startstopstatusrestart Once the installation is complete the GoCD server will be started and it will print out the URL for the Dashboard page This will be httplocalhost8153go Location of GoCD server files The GoCD server installs its files in the following locations on your filesystem varlibgoserver contains the binaries and database etcgo contains the pipeline configuration files varloggoserver contains the server logs usrsharegoserver contains the start script etcdefaultgoserver contains all the environment variables with default values These variable values can be changed as per requirement Overriding default startup arguments and environment Users can override default startup arguments in a Linux machine by editing the file etcdefaultgoserver For eg To reduce the session timeout from default 14 days to 60 seconds user can set the following GoCD server system property export GOSERVERSYSTEMPROPERTIESquotGOSERVERSYSTEMPROPERTIES Dgoserversessiontimeoutseconds60quot lt include filequotinstallationinstallserverinstallserverfootermdquot markdownquottruequot gt"},{"title":"Mac OS X","href":"/installation/install/server/osx.html","content":"Installing GoCD server on Mac OS X lt toc gt Installation Doubleclick the file downloaded from the downloads page to unzip the contents Drag the GoCD server application to the Applications folder Doubleclick on the Go Serverapp icon to open the launcher While the GoCD server is starting up youll see a progress bar in the top left of your screen Once the GoCD server has started it will open your default browser to the GoCD dashboard page defaults to lta hrefquothttplocalhost8153quotgthttplocalhost8153ltagt To get back to the GoCD dashboard page when the server is running click on the link in the About box of the GoCD server Override environment variables Mac OSX installer You can override default environment variables by Overriding them during startup when starting from the terminal PATHPATHusrlocalbin open ApplicationsGo Serverapp Overriding them using a file LibraryApplication SupportGo Serveroverridesenv This file is sourced during server startup and it can be setup to change environment variables PATHPATHusrlocalbin Location of GoCD server files The GoCD server installs its files in the following locations on your filesystem ApplicationsGo Serverapp The GoCD server application LibraryApplication SupportGo Server The server directory Some logging information is also written to varlogsystemlog lt include filequotinstallationinstallserverinstallserverfootermdquot markdownquottruequot gt"},{"title":"Windows","href":"/installation/install/server/windows.html","content":"Installing GoCD server on Windows lt toc gt Installation You must be logged in as a user with Administrator privileges to install the GoCD server on Windows Download a version of goserver from the downloads page Doubleclick the goserverversionexe installer file and follow the prompts to install Go During installation you will be asked to select a directory that will serve as the root path for your GoCD server installation GoCD server will store all of its associated data in this directory by default You will next be prompted to choose the bundled JRE or specify the location of JRE or JDK installed on your system At the end of the installation GoCD server will register itself as a windows service owned by Local System and start running automatically Shortcuts to GoCD will be placed on your Desktop and in your Start Menu for convenience doubleclick the shortcut to GoCD to the GoCD dashboard Silent Headless Installation You may use this method if you would like to script the installation of the GoCD server goserverversionsetupexe S GOSERVERJAVAHOMEltPATHTOJAVAHOMEgt DltPATHTOSERVERDIRECTORYgt Argument RequiredDescription "},{"title":"Generic Zip","href":"/installation/install/server/zip.html","content":"Running GoCD server via zip without installation If you want to run GoCD on a platform which does not have a native installer or want to run GoCD without installing it you could do so by using the zip installers Download the zip installer for GoCD server Unzip the installer in a folder of your choice It creates a subfolder with the name goserverversion Set java in path If you are on a Windows system set GOSERVERJAVAHOME to the installation path of java on the system If you are on a Unix system set JAVAHOME to the installation path of java on the system Open a command prompt and go to the folder Start the server If you are on a Windows system run startserverbat If you are on a Unix system run serversh Ensure that serversh is executable lt include filequotinstallationinstallserverinstallserverfootermdquot markdownquottruequot gt"},{"title":"Installing GoCD Agent","href":"/installation/installing_go_agent.html","content":"Installing GoCD agent You need to deploy at least one GoCD agent before you can build with GoCD For the very simplest installation you can run a GoCD agent on the same machine as your GoCD server Before you install the GoCD server or agent please ensure that you meet the System Requirements Choose your operating system Linux Windows Mac OS X Generic Zip "},{"title":"Installing GoCD Server","href":"/installation/installing_go_server.html","content":"Installing GoCD server Before you install the GoCD server or agent please ensure that you meet the System Requirements Choose your operating system Linux Windows Mac OS X Generic Zip "},{"title":"Performance Tuning","href":"/installation/performance_tuning.html","content":"GoCD Performance Tuning Capacity Planning This section provides recommendations to evaluate server hardware and memory requirements for your GoCD server It also highlights some configurations which need to be taken care of when scaling GoCD Minimum server requirements The minimum requirements for a GoCD server can be found here Scaling GoCD As the number of pipelines agents and concurrent users increase in your setup GoCD server may have to be scaled up by adding more memory and cores If you have questions or have custom requirements please contact supportthoughtworkscom to help with capacity planning for GoCD server Things to Remember Do not run any other CPU intensive applications on the same box as the GoCD Server When the GoCD server is being scaled up to run with larger number of pipeline agents and materials ensure that the JVM has been allocated appropriate heap sizes The default values for the GoCD server are Xms512m minimum and Xmx1024m maximum These values can be increased by setting the environment variables SERVERMEM for minimum and SERVERMAXMEM for maximum On linux these can be addedupdated in etcdefaultgoserver On Windows copy the following lines in wrapperpropertiesconf and change it to desired value wrapperjavaadditional1Xms512m wrapperjavaadditional2Xmx1024m For linuxunix users If more than 100 agents are being used an exception might be seen in goserverlog mentioning quotToo many open filesquot This may be an indication that there is a need to increase the number of file descriptors on the machine where GoCD Server is installed On linux the command ulimit n can be used to check the total number of file descriptors To bump up the total number for file descriptors user and system follow these steps Edit etcsecuritylimitsconf and add the linessoft nofile 1024 hard nofile 65535 Edit etcpamdlogin adding the line session required libsecuritypamlimitsso The system file descriptor limit can be increased by setting fsfilemax in the file etcsysctlconf To set the limit to 65535 use echo quotfsfilemax 65535quot gtgt etcsysctlconf Tuning your JVM Ensure that the latest JVM is used always as there are major performance improvements with every release The minimum and maximum JVM heap space allocated to the GoCD server affects its performance GoCD uses default values of 512m and 1024m for minimum and maximum JVM heap sizes respectively However for production environments we recommend setting the minimum and maximum values to an identical value The default heap settings mentioned above are for a 32bit JVM But if the GoCD server is facing performance issues we recommend doubling the values in the heap settings and measuring performance If its seen that more than 3 GB of heap memory is needed we recommend a switch to 64bit JVM Our tests show that GoCD server performs much better on a 64 bit JVM than a 32 bit JVM provided the heap memory has been increased appropriately This is needed because 64bit JVM makes use of 64bit addresses instead of 32bits allowing it to use more memory Start with the default settings and increase the heap memory incrementally to suit your application Storage For optimal performance in artifact transfer GoCD would need storage with good disk IO throughput We recommend local storage for GoCD database and artifacts Disk space can be reclaimed through deletion of historical artifacts If using network storage is preferred ensure that the speeds and throughput are good Use RAID Configuration for higher throughput if the GoCD Server is expected to be an intensive setup If you expect to have large artifacts you could use use different RAID configurations for GoCD database and artifacts For example 2 drives on RAID1 can be be used for the GoCD database for redundancy 3 hard drives on RAID5 can be used for artifacts so that access to database and artifacts is optimized Improving Server Startup Time The start up time for a very large GoCD Server instance could be improved by delaying material polling and pipeline scheduling to a few seconds after the server starts up This would allow the server to warm up and cache some of the data before it is bombarded with threads that poll for material updates and pipelines that need to be scheduled Following are the JVM properties that enable such a delay cruisematerialupdatedelay This value is specified in milliseconds It has a default value of 10000 This means that material polling would only start 10s after the server starts cruiseproducebuildcausedelay Likewise this value is also specified in milliseconds It again defaults to 10000 meaning that scheduling of pipelines would take place only 10s after the server starts up The two values above do not affect the frequency of material polling or pipeline scheduling Troubleshooting Enable GC Logging An easy way to check the memory usage heap size initial and over time and GC metrics of the application is by turning on GC logging GC logging can be enabled using the following JVM arguments while starting the application Note the log file specified as file is reset each time the VM starts verbosegc Xloggcfile XXPrintGCTimeStamps In case of the GoCD server these arguments will have to be added in the script that starts the Go jar For linux usrsharegoserverserversh For Windows goserverinstallationdirservercmd In most cases GoCD is installed in CProgram FilesGo Server Using JConsole JConsole is a graphical monitoring tool to monitor Java Virtual Machine JVM which comes as part of the JDK installation It can be used to monitor the current state of a process without much overhead If the GoCD servers performance is slow some metrics can be immediately analysed using jconsole Since jconsole is a graphical tool make sure you have an access to display when running the following command That is use ssh X or VNC if GoCD is on linux Use remote desktop if the GoCD server is on windows jconsole Select the local process gojar when the jconsole GUI opens up This shows the current heap memory usage threads cpu usage etc Screenshots of the VM Summary and the overview page can be taken to be sent to the GoCD Support team if required Please note that in case of linux jconsole will have to be started as go user In Windows starting the process as administrator should suffice More information about jconsole can be found here CPU and memory profiling Yourkit java profiler is a recommended tool for profiling the CPU and memory of the GO Server To start using yourkit download the latest version of the Yourkit java profiler from httpwwwyourkitcomdownloadindexjsp Unpack to yourkitprofilerdirectory The following steps will enable the GoCD server to pick up the yourkit profiler agent and enable us to take memory and cpu snapshots For Linux Create a symlink for libyjpagentso file to usrlibyourkit folder When the GoCD server starts up it looks at this folder to see if it needs to start with profiling enabled or not If you want to change the default path of the yourkit agent you can edit serversh at usrsharegoserverserversh sudo ln s yourkitprofilerdirectorybinlinuxx8632libyjpagentso usrlibyourkitlibyjpagentso For 64bit JVM the command is sudo ln s yourkitprofilerdirectorybinlinuxx8664libyjpagentso usrlibyourkitlibyjpagentso Restart the server after this and the yourkit agent should get picked up by the server VM Let the server start up and agents get registered For Windows By default GoCD server looks for the yourkit profiler agent yjpagentdll in the location Cyjpagentdll Therefore copy the file yjpagentdll which is the yourkit profiler agent from yourkitprofilerdirectorybinwin32 to Cyjpagentdll Copy the file from yourkitprofilerdirectorybinwin64 if you are using 64 bit JVM To change the above mentioned default location define environment variable YOURKITPATH with value equal to location of yjpagentdll If you are running the GoCD server as a service you will need to perform an additional step In the config folder of the GoCD server installation edit the wrapperpropertiesconf file and add an additional property with the following value quotagentpath Path to yjpagentdllport6133builtinprobesnonequot For example if there are 16 properties already defined add this 17th property as shown below wrapperjavaadditional17quotagentpathCyjpagentdllport6133builtinprobesnonequot Use the following steps to take profile the application and take snapshots The hostname mentioned here is the hostname of the GoCD Server In most cases it would be localhost The value of port is 6133 because GoCD starts the yjpagent on port 6133 To start profiling run java jar yourkitprofilerdirectorylibyjpcontrollerapiredistjar hostname port startcpusampling java jar yourkitprofilerdirectorylibyjpcontrollerapiredistjar hostname port startmonitorprofiling If memory allocation profiling is also required java jar yourkitprofilerdirectorylibyjpcontrollerapiredistjar hostname port startallocrecordingadaptive Let the server run for some time till you start seeing performance problems 30 mins of snapshot should give us enough data To capture the snapshot Run java jar yourkitprofilerdirectorylibyjpcontrollerapiredistjar hostname port captureperformancesnapshot To capture memory snapshot java jar yourkitprofilerdirectorylibyjpcontrollerapiredistjar hostname port capturememorysnapshot To stop profiling run java jar yourkitprofilerdirectorylibyjpcontrollerapiredistjar hostname port stopcpuprofiling java jar yourkitprofilerdirectorylibyjpcontrollerapiredistjar hostname port stopmonitorprofiling If memory profiling was turned ons top it using the following command java jar yourkitprofilerdirectorylibyjpcontrollerapiredistjar hostname port stopallocrecording Once youre done profiling run the following so that on the next GoCD server restart the agent is not loaded into the JVM In case of linux run the following command sudo rm usrlibyourkitlibyjpagentso In case of windows delete the file Cyjpagentdll If you were using the variable YOURKITPATH then remove the environment variable These snapshots will be saved in the yourkit configured snapshots folder They can be sent to the GoCD Support so that they can be examined to help find the root cause of the performance Contact GoCD Support If the GoCD server continues to behave poorly send us the following data Database file cruiseh2db Stop the server and take a backup of the database Location Linux varlibdbh2dbcruiseh2db Windows goinstallationdirdbh2dbcruiseh2db Log file goserverlog Location Linux varloggoservergoserverlog Windows goinstallationdirgoserverlog GoCD config file cruiseconfigxml Location Linux etcgocruiseconfigxml Windows goinstallationdirconfigcruiseconfigxml If any Yourkit and jconsole snapshots as mentioned in the previous points its useful if that can be sent too "},{"title":"Configuring HSTS Header","href":"/installation/ssl_tls/configuring_hsts_header.html","content":"Configuring the HSTS header The StrictTransportSecurity HSTS header can be enabled and configured using the following System Properties Key Default value Description "},{"title":"custom_certificate","href":"/installation/ssl_tls/custom_certificate.html","content":" Redirecting Redirecting This page has moved to customservercertificatehtml Click here if you are not redirected windowlocationhref customservercertificatehtml "},{"title":"Change SSL Certificates","href":"/installation/ssl_tls/custom_server_certificate.html","content":"Using your own SSL certificates on the Server The GoCD server on first startup will create a selfsigned SSL certificate that is ready for use by you However if have your own SSL certificate that you want to use with GoCD you may replace GoCDs certificate with your own Assuming that you have the certificate key examplecomkey and X509 certificateexamplecomcrt Change the passphrase of the certificate key If your key has a passphrase you must first change the passphrase to serverKeystorepa55w0rd mv examplecomkey examplecomkeyorig openssl rsa des3 in examplecomkeyorig out examplecomkey Convert your certificate examplecomcrt into PKCS12 format openssl pkcs12 inkey examplecomkey in examplecomcrt export out examplecomcrtpkcs12 Import the PKCS12 key into the keystore Note The destination keystore password must be set to serverKeystorepa55w0rd keytool importkeystore srckeystore examplecomcrtpkcs12 srcstoretype PKCS12 destkeystore keystore srcalias 1 destalias cruise deststorepass serverKeystorepa55w0rd destkeypass serverKeystorepa55w0rd Replace GoCD servers keystore with the one from above First backup the original keystore and replace it with the new keystore sudo su go c mv etcgokeystore etcgokeystoreoriginal sudo su go c mv keystore etcgokeystore Restart the go server sudo etcinitdgoserver restart "},{"title":"End to end transport security","href":"/installation/ssl_tls/end_to_end_transport_security.html","content":"Configure endtoend transport security Note To ensure endtoend transport encryption please ensure that both your GoCD server and agent are running on atleast version 1670 This section will help you configure and improve the security of the agenttoserver communication using correct SSLTLS certificates and verification process The GoCD agent allows for some configuration to be able to configure and secure the endtoend transport security to varying security levels The agent by default trusts any and all certificates offered to it which may possibly allow for MITM attacks If youd like to improve security further by providing your own server certificate you may provide one of the following options before starting the agent process java jar agentbootstrapperjar serverUrl httpsciexamplecom8154go rootCertFile pathtorootcertpem sslVerificationMode FULLNONENOVERIFYHOST The rootCertFile option The rootCertFile option must point to the root certificate from the GoCD server If youre using a certificate signed by a known CA you may not need to pass the rootCertFile if the root certificate is present in the default JVM trust store You can export it from firefox using the page info window by clicking quotexportquot from the certificate details page as shown below If you have the openssl binary available then you can also run the command below to export the root certificate from the GoCD server openssl sclient showcerts connect HOSTNAMEPORT ltdevnull 2gtdevnullopenssl x509 outform PEM The sslVerificationMode option The sslVerificationMode option allows you to choose the level of verification youd want NONE the default will disable all SSLTLS verification NOVERIFYHOST will perform certificate check but ignore verification of the server hostname FULL will perform complete certificate validation Configuring the agent Windows If youre running the GoCD agent as a windows service Edit the file if it already does not exist GOAGENTINSTALLDIRconfigwrapperpropertiesconf and add the following properties to it configwrapperpropertiesconf set the ssl verification mode wrapperappparameter4sslVerificationMode wrapperappparameter5FULL set the ssl root cert path if the server is using a certificate that is not signed by a well known certificateauthority wrapperappparameter6rootCertFile wrapperappparameter7CPathTorootcertpem If youre running the GoCD agent via a batch file Setup the system environment AGENTBOOTSTRAPPERARGS before running the batch file You may either set it from the command line or if youd like to make the change permanent you may choose to set it from the quotAdvanced system settingsquot dialog from quotControl Panelquot Cgt set AGENTBOOTSTRAPPERARGSrootCertFile CPathTorootcertpem sslVerificationMode FULL Cgt agentcmd Linux If youre running the GoCD agent as a service Edit the file etcdefaultgoagent and add the following lines to it etcdefaultgoagent AGENTBOOTSTRAPPERARGSquotrootCertFile pathtorootcertpem sslVerificationMode FULLquot If youre running the GoCD agent from the command line export GOSERVERURLhttpsciexamplecom8154go export AGENTBOOTSTRAPPERARGSquotrootCertFile pathtorootcertpem sslVerificationMode FULLquot agentsh "},{"title":"Customizing Ciphers","href":"/installation/ssl_tls/setting_up_ciphers.html","content":"Configuring SSLTLS ciphers You can choose which ciphers and SSLTLS protocols Go will use for communication with agents and users and their browsers Configuring GoCD server Following system properties are exposed to override the default SSLTLS configuration for Go server Key Default value Description "},{"title":"Configuring SSL/TLS","href":"/installation/ssl_tls_config.html","content":"lthtmlgt ltbodygt ltdiv stylequottextaligncenterquot classquotmyblockquotgt ltbrgt ltbrgt ltbrgt ltbrgt ltbrgt ltbrgt ltbrgt ltbrgt ltbrgt ltbrgt ltbrgt lth1gtCONFIGURINGlth1gt lth1gtSSLTLSlth1gt ltdivgt ltbodygt lthtmlgt"},{"title":"System requirements","href":"/installation/system_requirements.html","content":"GoCD System requirements These requirements should meet the needs of most GoCD installations You may need to allocate additional CPUs andor memory on the machine hosting the GoCD Server if you intend to use a very large set of pipelines andor agents Client browser requirements GoCD supports the two most recent versions of the following browsers Google Chrome Mozilla Firefox Microsoft Edge Apple Safari GoCD Server requirements Hardware RAM minimum 1GB 2GB recommended CPU minimum 2 cores 2GHz Disk minimum 1GB free space Supported Operating Systems Windows Windows Server 2012 Windows Server 2016 Windows 8 and Windows 10 Mac OSX 107 Lion and above with Intel processor Debian Debian 80 and above CentOSRedHat CentOSRedHat version 60 and above Ubuntu Ubuntu 14 and above Alpine Linux Alpine Linux 36 and above Dependencies Java Runtime Environment JRE version 8 JRE 11 and above recommended Additional requirements for GoCD server The host that runs your GoCD server should have a separate disk partition to store GoCD artifacts The artifact repository can fill up quickly especially if you are storing large binaries If you dont create a separate partition for artifacts and your system disk fills up GoCD and other applications on your system will behave unexpectedly You are also likely to end up with corrupted data Check the section on configuring the GoCD server for more information on configuring your artifact repository Client software for your source code control tool Git SVN etc must be installed on both the GoCD server and all GoCD build agents GoCD Agent requirements Supported Operating Systems Windows Windows Server 2012 Windows Server 2016 Windows 8 and Windows 10 Mac OSX 107 Lion and above with Intel processor Debian Debian 80 and above CentOSRedHat CentOSRedHat version 60 and above Ubuntu Ubuntu 14 and above Alpine Linux Alpine Linux 36 and above Hardware RAM minimum 128MB 256MB recommended CPU minimum 2GHz Dependencies Java Runtime Environment JRE version 8 JRE 11 and above recommended Additional requirements for GoCD Agent GoCD agent on its own does not require much memory or CPU However you need to ensure that the nodes deployed as build agents have adequate resources to build your projects including sufficient disk space to check source code out of source control Client software for your source code control tool Git SVN etc needs to be installed on all build agents Also any other software required to build your application if not accessed directly from the project source checked out from source control needs to be installed for instance Maven or Rake"},{"href":"/installation/troubleshooting.html","content":"GoCD Troubleshooting issues This page is mainly for newer users of GoCD to help with troubleshooting issues GoCD Agent not registering with the GoCD Server Command not found git svn mvn ant or others Agent is not being assigned or quotNothing gets builtquot Mac OS X Message related to Java 17 Unrecognized VM option quotMaxMetaSpaceSizequot Unsupported majorminor version 520 GoCD SPA Pages There was an unknown error performing the operation Possible reason timeout Port 8153 HTTP or 8154 HTTPS could not be opened lta idquotagentregistrationquotgtltagt GoCD Agent not registering with the GoCD Server This issue shows up either as an agent not showing up on the quotAgentsquot page or showing up with a status of quotMissingquot If this happens start troubleshooting by looking at the agent log files See the end of the installation documentation page for your operating system to find the location of the log files There will be log files for the agent the agentbootstrapper and agentlauncher Any errors at the end of these files might be interesting Some common errors are Unable to reach the GoCD Server This manifests itself as logs in goagentlauncherlog with lines similar to this ERROR goagentlauncherServerCall69 Couldnt access Go Server with base url httpYOURSERVER8153goadminagentlauncherjar javanetConnectException Connection refused ERROR goagentlauncherServerBinaryDownloader116 Couldnt update adminagentlauncherjar Sleeping for 1m Error javalangException Couldnt access Go Server with base url httpYOURSERVER8153goadminagentlauncherjar javanetConnectException Connection refused INFO apachecommonshttpclientHttpMethodDirector438 IO exception javanetConnectException caught when processing request Connection refused INFO apachecommonshttpclientHttpMethodDirector444 Retrying request The problem here is that the agent cannot reach the server either because of a problem with the network or because the ports used by the server are not accessible due to firewall restrictions The GoCD server uses two ports 8153 and 8154 by default These two ports need to be accessible by the agents Unable to connect SSL handshake error or connection reset This manifests itself as logs in goagentbootstrapperoutlog with lines similar to this 180679 main ERROR comthoughtworksgoagentlauncherServerCall Couldnt access Go Server with base url httpsYOURSERVER8154goadminagentlauncherjar javaxnetsslSSLHandshakeException Remote host closed connection during handshake javalangException Couldnt access Go Server with base url httpsYOURSERVER8154goadminagentlauncherjar javaxnetsslSSLHandshakeException Remote host closed connection during handshake at comthoughtworksgoagentlauncherServerCallinvokeServerCalljava78 at comthoughtworksgoagentlauncherServerBinaryDownloaderheadersServerBinaryDownloaderjava130 at comthoughtworksgoagentlauncherServerBinaryDownloaderdownloadIfNecessaryServerBinaryDownloaderjava106 at comthoughtworksgoagentlauncherAgentLauncherImpllaunchAgentLauncherImpljava78 at comthoughtworksgoagentbootstrapperAgentBootstrappergoAgentBootstrapperjava72 at comthoughtworksgoagentbootstrapperAgentBootstrappermainAgentBootstrapperjava54 at sunreflectNativeMethodAccessorImplinvoke0Native Method at sunreflectNativeMethodAccessorImplinvokeUnknown Source at sunreflectDelegatingMethodAccessorImplinvokeUnknown Source at javalangreflectMethodinvokeUnknown Source at comsimontuffsonejarBootrunBootjava306 at comsimontuffsonejarBootmainBootjava159 Caused by javaxnetsslSSLHandshakeException Remote host closed connection during handshake at sunsecuritysslSSLSocketImplreadRecordUnknown Source at sunsecuritysslSSLSocketImplperformInitialHandshakeUnknown Source at sunsecuritysslSSLSocketImplstartHandshakeUnknown Source at sunsecuritysslSSLSocketImplstartHandshakeUnknown Source at orgapachehttpconnsslSSLConnectionSocketFactorycreateLayeredSocketSSLConnectionSocketFactoryjava394 at orgapachehttpconnsslSSLConnectionSocketFactoryconnectSocketSSLConnectionSocketFactoryjava353 at orgapachehttpimplconnDefaultHttpClientConnectionOperatorconnectDefaultHttpClientConnectionOperatorjava141 at orgapachehttpimplconnPoolingHttpClientConnectionManagerconnectPoolingHttpClientConnectionManagerjava353 at orgapachehttpimplexecchainMainClientExecestablishRouteMainClientExecjava380 at orgapachehttpimplexecchainMainClientExecexecuteMainClientExecjava236 at orgapachehttpimplexecchainProtocolExecexecuteProtocolExecjava184 at orgapachehttpimplexecchainRetryExecexecuteRetryExecjava88 at orgapachehttpimplexecchainRedirectExecexecuteRedirectExecjava110 at orgapachehttpimplclientInternalHttpClientdoExecuteInternalHttpClientjava184 at orgapachehttpimplclientCloseableHttpClientexecuteCloseableHttpClientjava82 at orgapachehttpimplclientCloseableHttpClientexecuteCloseableHttpClientjava107 at comthoughtworksgoagentlauncherServerCallinvokeServerCalljava55 11 more Caused by javaioEOFException SSL peer shut down incorrectly at sunsecuritysslInputRecordreadUnknown Source 28 more or this 2986 main ERROR comthoughtworksgoagentlauncherServerCall Couldnt access Go Server with base url httpsYOURSERVER8154goadminagentlauncherjar javanetSocketException Connection reset javalangException Couldnt access Go Server with base url httpsYOURSERVER8154goadminagentlauncherjar javanetSocketException Connection reset at comthoughtworksgoagentlauncherServerCallinvokeServerCalljava78 The problem here is that the agent is not able to connect securely to the server which points to an invalid certificate This can happen if an agent has connected to one GoCD server and is then pointed to another GoCD server It will try to connect to the new server using the certificate that was for the older server and it will fail The resolution is to move or rename the agentjks file found the in the config directory of the agent and restarting the agent That should make it connect using the correct certificate If youre using full endtoend transport security this error might mean that the servers certificate has changed and you need to provide the update certificate Incompatible Java version This manifests itself as logs in goagentbootstrapperlog with lines similar to this 242 main INFO comthoughtworksgoutilPerfTimer Performance Downloading new adminagentlauncherjar with md5 signature e9SXM6cdV5kSkpVEmymHIg took 37ms Exception in thread quotmainquot javalangreflectInvocationTargetException at sunreflectNativeMethodAccessorImplinvoke0Native Method at sunreflectNativeMethodAccessorImplinvokeNativeMethodAccessorImpljava57 at sunreflectDelegatingMethodAccessorImplinvokeDelegatingMethodAccessorImpljava43 at javalangreflectMethodinvokeMethodjava622 at comsimontuffsonejarBootrunBootjava306 at comsimontuffsonejarBootmainBootjava159 Caused by javalangUnsupportedClassVersionError comthoughtworkscruiseagentlauncherAgentLauncherImpl Unsupported majorminor version 510 at javalangClassLoaderdefineClass1Native Method at javalangClassLoaderdefineClassClassLoaderjava643 at javasecuritySecureClassLoaderdefineClassSecureClassLoaderjava142 The problem here is that the version of Java used by the agent is too old In this example Java 6 was used by an agent with a 1620 GoCD server which needs Java 7 lta idquotpathissuesquotgtltagt Command not found git svn mvn ant or others This issue shows up in one of three ways as you can see below The resolution for all three issues is the same to ensure that the PATH environment variable is correct During quotCheck Connectionquot ltfiguregt ltimg srcquotimagestroubleshootingerror4checkconnectiongitnotfoundpngquotgt ltfiguregt This can also happen with other version control systems such as SVN TFS etc Resolution Check the PATH environment variable of the GoCD Servers java process Ensure that the directory that the command is available is in the list On Windows the procexp tool from Microsofts Windows SysInternals might be useful to check this It shows perprocess environment variables in an easy way During material polling Look for an error message at the bottomright of any page which looks like this ltfiguregt ltimg srcquotimagestroubleshootingerror1pngquotgt ltfiguregt Clicking on that shows an error like this ltfiguregt ltimg srcquotimagestroubleshootingerror2gitnotfoundpngquotgt ltfiguregt The GoCD server log goserverlog location can be found at the bottom of the installation documentation page for your operating system will have a message like this ltfiguregt ltimg srcquotimagestroubleshootingerror3gitnotfoundlogpngquotgt ltfiguregt This can also happen with other version control systems such as SVN TFS etc Resolution Check the PATH environment variable of the GoCD Servers java process Ensure that the directory that the command is available is in the list On Windows the procexp tool from Microsofts Windows SysInternals might be useful to check this It shows perprocess environment variables in an easy way During the running of a task in the console output This shows up as a message in the console output like this ltfiguregt ltimg srcquotimagestroubleshootingerror5commandnotfoundconsolelogpngquotgt ltfiguregt This can also happen with other version control systems such as SVN TFS etc It can also happen with any other command used in a task such as Maven Ant Rake or even any other shellscript where it cannot be found in PATH Resolution Check the PATH environment variable of the GoCD Agents java process Ensure that the directory that the command is available is in the list On Windows the procexp tool from Microsofts Windows SysInternals might be useful to check this It shows perprocess environment variables in an easy way lta idquotagentassignmentquotgtltagt Agent is not being assigned or quotNothing gets builtquot This shows up as a pipeline which stays in the quotBuildingquot yellow state for a long time ltfiguregt ltimg srcquotimagestroubleshootingerror6pipelinebuildingnotassignedpngquotgt ltfiguregt Click on the stage bar and then the job to reach the console log and you might see a build whose status is quotScheduledquot with the agent status being quotNot yet assignedquot like this ltfiguregt ltimg srcquotimagestroubleshootingerror7agentnotassignedpngquotgt ltfiguregt Resolution If this is happening it means that a suitable agent has not been found for this job The reasons for this can be No agent is available free and not building Check the quotAgentsquot page to see if all agents are busy If so once one of them becomes free then this build will start If you do see available agents then check whether the job has resources defined in its config If so it means that the job is looking for an agent with those resources Check the quotAgentsquot page to see whether there are agents which have the resources needed by the job and are available not building If the previous two options dont solve the problem check whether the pipeline is a part of an environment in the quotEnvironmentsquot page or in the config If it is then any agent that can pick up a job from that pipeline needs to be a part of that environment as well lta idquotmacjavaquotgtltagt Mac OS X Message related to Java 17 If you were greeted with a message such as this when trying to use GoCD on Mac OSX ltfigure classquotsmallimagequotgt ltimg srcquotimagestroubleshootingtroubleshootmacinstallerpngquot altquotMac installer Java 17 messagequot titlequotMac installer Java 17 messagequotgt ltfiguregt you might have a Java installation in either a nonstandard location or older than Java 17 The GoCD Mac application tries to find the correct Java installation to use using this command usrlibexecjavahome v quot17quot If that fails then you see the message shown above In case you are sure that you have Java 17 or newer installed and the application cannot find it at all then the application can be forced to use a Java installation of your choosing using the GOJAVAHOME environment variable Suppose the Go Serverapp file is in Applications and the Java installation you want GoCD to use is at LibraryMYJavaContentsHome then you can start the GoCD Server with that Java using this in a terminal emulator GOJAVAHOMEquotLibraryMYJavaContentsHomequot open quotApplicationsGo Serverappquot Please note that this is used to set the Java home and not the path to the java executable Usually GOJAVAHOMEbinjava will need to be a working Java 17 executable ltstyle typequottextcssquotgt figuresmallimage img width 50 marginleft 25 ltstylegt lta idquotupgradeissuesquotgtltagt Incompatible java version while upgrading to 17x version Java 7 support is removed as part of 171 release This implies an existing installation of GoCD will stop working after an upgrade if it is configured to run with Java 7 In such cases one of the following error messages would be seen in the logs Unrecognized VM option quotMaxMetaSpaceSize256mquot or Unsupported majorminor version 520 On Windows This error will be logged in ltGOINSTALLATIONDIRgtgoserverwrapperlog on server and ltGOINSTALLATIONDIRgtgoagentbootstrapperwrapperlog on agent if startup failed due to incompatible version of Java Resolution Update the environment variable GOSERVERJAVAHOME GOAGENTJAVAHOME to the Java 8 path and restart the GoCD serveragent On Linux This error will be logged in ltGOLOGDIRgtgoserveroutlog on server and ltGOLOGDIRgtgoagentbootstrapperlog on agent if startup failed due to incompatible version of Java Resolution Update the environment variable JAVAHOME set in etcdefaultgoserver etcdefaultgoagent to Java 8 path and restart the GoCD serveragent lta idquotajaxpollingintervalquotgtltagt GoCD SPA Pages There was an unknown error performing the operation Possible reason timeout The GoCD SPA page periodically makes AJAX API calls to fetch the current state of the entity and refreshes the page this is done to ensure the information on the page is not stale The AJAX API request has a timeout set to 5000 milliseconds if the server does not respond within that duration the request is cancelled and an error is shown on the page ltfiguregt ltimg srcquotimagestroubleshootingerror8requesttimeoutpngquotgt ltfiguregt Resolution If this is happening consider increase the timeout period by specifying the gospatimeout lta namequotportsinusequotgtltagt Port 8153 HTTP or 8154 HTTPS could not be opened This issue shows up an error when starting GoCD Server Port 8153 could not be opened Please Check if it is available Port 8154 could not be opened Please Check if it is available This could be happening if port 8153 or 8154 are already used In order to change default ports edit etcdefaultgoserver if you installed GoCD Server or goserverdefault located in root directory if you run it via zip GOSERVERPORT8153 GOSERVERSSLPORT8154 "},{"title":"Upgrading GoCD","href":"/installation/upgrading_go.html","content":"Upgrading GoCD To upgrade from a previous version of GoCD it is only necessary to upgrade the Server It is not necessary to stop or backup the GoCD Agents Agents will automatically update to the correct version of GoCD Before you start Since Cruise 11 legacy version of GoCD we do not include a bundled version of the Subversion version control system This means that if you use Subversion for your projects the server and all agents need to have Subversion installed and available on the system path Since Cruise 12 legacy version of Go we do not include a bundled version of ant This means that if you use ant for your projects the server and all agents need to have ant installed and available on the system path Backing up your data Configuration Backup As part of the configuration two files need to be backed up GoCDs configuration is saved in the cruiseconfigxml file Cipher file for password encryption Based on the OS your GoCD server is running on both these files can be found at Operating System Location "},{"title":"Concepts in GoCD","href":"/introduction/concepts_in_go.html","content":"Introduction to GoCD This page explains some of the underlying concepts of GoCD If you want to know more about Continuous Integration and Continuous Delivery in general you can refer to Martin Fowlers articles on the subject Continuous Integration and Continuous Delivery If youre very new to GoCD the Getting Started Guide is a good starting point to get a good understanding of the concepts while trying them out on a real GoCD instance Index Task Job Stage Pipeline Materials Pipeline Dependencies Fanin and fanout Value Stream Map Artifacts Fetching artifacts Agent Resources Environment Environment Variables Templates lta idquottaskquotgtltagt Task A task or a build task is an action that needs to be performed Usually it is a single command The task shown in the image below is set to run the command ant DmoduleA compile when executed by GoCD ltfigure classquotconceptimagequotgt ltimg srcquotimagesconcepts01taskpngquot altquotFigure 1 Taskquot idquotimagetaskquot classquotsmallimagequotgt ltfigcaptiongtFigure 1 Taskltfigcaptiongt ltfiguregt lta idquotjobquotgt ltagt Job A job consists of multiple tasks each of which will be run in order If a task in a job fails then the job is considered failed and unless specified otherwise the rest of the tasks in the job will not be run The job shown in the image below has three tasks The ant task will be run first followed by the rake task and finally the shell script is run ltfigure classquotconceptimagequotgt ltimg srcquotimagesconcepts02jobpngquot altquotFigure 2 Jobquot idquotimagejobquot classquotsmallimagequotgt ltfigcaptiongtFigure 2 Jobltfigcaptiongt ltfiguregt Every task in a job is run as an independent program and so changes made by a task to any of its environment variables will not affect subsequent tasks Any changes made by a task on the filesystem will be visible to subsequent tasks lta idquotstagequotgt ltagt Stage A stage consists of multiple jobs each of which can run independently of the others This means that GoCD can and does parallelize the execution of jobs in a stage If a job fails then the stage is considered failed However since jobs are independent of each other the other jobs in the stage will be run to completion The stage shown in the image below has two jobs one which builds module A and another which builds module B The success or failure of the first job cannot affect the success or failure of the second ltfigure classquotconceptimagequotgt ltimg srcquotimagesconcepts03stagepngquot altquotFigure 3 Stagequot idquotimagestagequot classquotsmallimagequotgt ltfigcaptiongtFigure 3 Stageltfigcaptiongt ltfiguregt lta idquotpipelinequotgtltagt Pipeline A pipeline consists of multiple stages each of which will be run in order If a stage fails then the pipeline is considered failed and the following stages will not be started The pipeline shown in the image below has three stages the first with two jobs the second with three and the third with one If the first stage fails then the second and third stages will not be run ltfigure classquotconceptimagequotgt ltimg srcquotimagesconcepts04pipelinepngquot altquotFigure 4 Pipelinequot idquotimagepipelinequotgt ltfigcaptiongtFigure 4 Pipelineltfigcaptiongt ltfiguregt Since an image of a pipeline can get quite big the rest of this document will use a slightly smaller representation of a pipeline which hides the jobs and tasks This representation is shown below ltfigure classquotconceptimagequotgt ltimg srcquotimagesconcepts05pipelinesmallpngquot altquotFigure 5 Pipeline small representationquot idquotimagepipelinesmallquot classquotsmallimagequotgt ltfigcaptiongtFigure 5 Pipeline small representationltfigcaptiongt ltfiguregt lta idquotmaterialsquotgt ltagt Materials and triggers ltspan classquotheader smallerquotgtor quotWhen do these tasks jobs stages and pipelines runquotltspangt A material is a cause for a pipeline to run Often it is a source code material repository Git SVN Mercurial etc The GoCD Server continuously polls configured materials and when a new change or commit is found the corresponding pipelines are run or quottriggeredquot There are different kinds of materials Heres an example of a Git material When a commit is made to the repository configured in the Git material the pipeline gets triggered ltfigure classquotconceptimagequotgt ltimg srcquotimagesconcepts06materialgitpngquot altquotFigure 6 Material gitquot idquotimagematerialgitquot classquotmediumimagequotgt ltfigcaptiongtFigure 6 Material gitltfigcaptiongt ltfiguregt Similarly an SVN material is shown below GoCD has support for many different kinds of source code materials as well as a plugin endpoint for extending the kinds of materials it supports ltfigure classquotconceptimagequotgt ltimg srcquotimagesconcepts07materialsvnpngquot altquotFigure 7 Material SVNquot idquotimagematerialsvnquot classquotmediumimagequotgt ltfigcaptiongtFigure 7 Material SVNltfigcaptiongt ltfiguregt A quottimer triggerquot is a special kind of material that triggers a pipeline at a specified time or at specified intervals ltfigure classquotconceptimagequotgt ltimg srcquotimagesconcepts08timertriggerpngquot altquotFigure 8 Timer triggerquot idquotimagetimertriggerquot classquotmediumimagequotgt ltfigcaptiongtFigure 8 Timer triggerltfigcaptiongt ltfiguregt A pipeline can even be configured with multiple materials The pipeline shown below is configured with a Git material and an SVN material When either repository has a new commit the pipeline is triggered ltfigure classquotconceptimagequotgt ltimg srcquotimagesconcepts09multiplematerialspngquot altquotFigure 9 Multiple materialsquot idquotimagemultiplematerialsquot classquotmediumimagequotgt ltfigcaptiongtFigure 9 Multiple materialsltfigcaptiongt ltfiguregt lta idquotpipelinedependencyquotgt ltagt Pipeline dependency material Materials really start becoming powerful when a stage in a pipeline is used as a material for another pipeline In the image shown below Stage 2 of Pipeline 1 is configured as a material for Pipeline 2 Whenever Stage 2 of Pipeline 1 finishes successfully Pipeline 2 triggers In a setup such as this Pipeline 1 is called the Upstream Pipeline and Pipeline 2 is called the Downstream Pipeline Stage 2 of Pipeline 1 is called the Upstream Dependency of Pipeline 2 ltfigure classquotconceptimagequotgt ltimg srcquotimagesconcepts11pipelinedeps2pngquot altquotFigure 10 Pipeline dependency Last stagequot idquotimagepipelinedeps2quotgt ltfigcaptiongtFigure 10 Pipeline dependency Last stageltfigcaptiongt ltfiguregt Any stage of a pipeline can be used as a material In the image shown below as soon as Stage 1 of Pipeline 1 finishes successfully Pipeline 2 will trigger and start Now both Stage 2 of Pipeline 1 and Stage 1 of Pipeline 2 can run simultaneously ltfigure classquotconceptimagequotgt ltimg srcquotimagesconcepts12pipelinedeps3pngquot altquotFigure 11 Pipeline dependency Any stagequot idquotimagepipelinedeps3quotgt ltfigcaptiongtFigure 11 Pipeline dependency Any stageltfigcaptiongt ltfiguregt lta idquotfaninoutquotgt ltagt Fanout and fanin A material is said to quotfanoutquot to downstream pipelines when the materials completion causes multiple downstream pipelines to trigger as is shown in the image below The cause of a fanout need not always be a pipeline dependency material It can be any material ltfigure classquotconceptimagequotgt ltimg srcquotimagesconcepts14fanoutpngquot altquotFigure 12 Fanoutquot idquotimagefanoutquotgt ltfigcaptiongtFigure 12 Fanoutltfigcaptiongt ltfiguregt A quotfaninquot is when multiple upstream materials are needed to trigger a downstream pipeline as shown in the image below One important and interesting aspect of fanin is that GoCD will ensure that the revisions of upstream pipelines are consistent before triggering a downstream pipeline In the image shown below this means that if Stage 2 of Pipeline 1 is slow and Stage 1 of Pipeline 2 is quick Pipeline 3 will wait for Pipeline 1 to finish before triggering It will not trigger with an inconsistent or old revision of Pipeline 1 just because Pipeline 2 finished quickly ltfigure classquotconceptimagequotgt ltimg srcquotimagesconcepts13faninpngquot altquotFigure 13 Faninquot idquotimagefaninquotgt ltfigcaptiongtFigure 13 Faninltfigcaptiongt ltfiguregt lta idquotvsmquotgt ltagt Value Stream Map VSM The Value Stream Map VSM is an endtoend view of a pipeline its upstream dependencies and the downstream pipelines it triggers When deciding which pipelines to trigger GoCDs fanin and fanout resolution will take care of all the dependencies consistently For instance in the image below when a new commit is found in Repo 1 git GoCD will not trigger Pipeline 5 immediately It will wait for Pipeline 1 to trigger and finish successfully then it will wait for Pipeline 4 to trigger and finish successfully Finally it will trigger Pipeline 5 with the same revision of Repo 1 that was used with Pipeline 1 ltfigure classquotconceptimagequotgt ltimg srcquotimagesconcepts15vsmpngquot altquotFigure 14 VSMquot idquotimagevsmquotgt ltfigcaptiongtFigure 14 VSMltfigcaptiongt ltfiguregt lta idquotartifactsquotgt ltagt Artifacts Every job in Go can optionally publish quotArtifactsquot which are files or directories After the job is run GoCD will ensure that the specified artifacts are published and made available to the user and other downstream stages and pipelines A representation of artifacts is shown below As shown every job can have artifacts In this case the job on the top has two files and a directory as its artifacts and the job below it has two directories and a file as its artifacts ltfigure classquotconceptimagequotgt ltimg srcquotimagesconcepts20artifactspngquot altquotFigure 15 Artifactsquot idquotimageartifactsquot classquotsmallimagequotgt ltfigcaptiongtFigure 15 Artifactsltfigcaptiongt ltfiguregt lta idquotfetchartifactquotgt ltagt Fetching artifacts GoCD provides a special task called a quotFetch Artifact Taskquot which allows artifacts to be fetched and used from any ancestor pipeline that is any pipeline that is upstream of the current pipeline GoCD will ensure that the correct version of the artifact is fetched irrespective of anything else that might be going on in the system In the image shown below the jobs in Stage 1 of Pipeline 1 publish some artifacts In Stage 2 a Fetch Artifact Task fetches the artifact published in Stage 1 Then in Pipeline 2 a Fetch Artifact Task fetches an artifact published in Pipeline 1 Finally in Pipeline 3 which is further downstream a Fetch Artifact Task fetches an artifact from Pipeline 1 through Pipeline 2 ltfigure classquotconceptimagequotgt ltimg srcquotimagesconcepts21fetchartifactspngquot altquotFigure 16 Fetch Artifact Taskquot idquotimagefetchartifactsquotgt ltfigcaptiongtFigure 16 Fetch Artifact Taskltfigcaptiongt ltfiguregt lta idquotagentquotgt ltagt Agent ltspan classquotheader smallerquotgtor quotWhere do these tasks jobs stages and pipelines runquotltspangt GoCD Agents are the workers in the GoCD ecosystem All tasks configured in the system run on GoCD Agents The GoCD Server polls for changes in material this happens on the GoCD Server itself and then when a change is detected and a pipeline needs to be triggered the corresponding jobs are assigned to the agents for them to execute the tasks Agents pick up jobs which are assigned to them execute the tasks in the job and report the status of the job to the GoCD Server Then the GoCD Server collates all the information from the different jobs and then decides on the status of the stage An agent is represented by a monitor in the image below ltfigure classquotconceptimagequotgt ltimg srcquotimagesconcepts16agentpngquot altquotFigure 17 Agentquot idquotimageagentquot classquotverysmallimagequotgt ltfigcaptiongtFigure 17 Agentltfigcaptiongt ltfiguregt lta idquotresourcesquotgt ltagt Resources Agents and jobs can be enhanced with quotResourcesquot Resources are freeform tags that help Go decide which agents are capable of picking up specific jobs In the image below the Firefox and Tux icons represent resources on the agent The resources can be thought of as the agent broadcasting its capabilities Resources are defined by administrators and can mean anything the administrators wants them to mean In this case it might be an indication that this agent has Firefox installed for running functional tests and it is a Linux box ltfigure classquotconceptimagequotgt ltimg srcquotimagesconcepts18resourcespngquot altquotFigure 18 Resources on an agentquot idquotimageresourcesquot classquotverysmallimagequotgt ltfigcaptiongtFigure 18 Resources on an agentltfigcaptiongt ltfiguregt Resources become very useful when jobs are assigned resources In the case of jobs resources can be thought of as the capabilities they need in an agent for them to be run successfully In the image below Job 1 claims that it needs an agent with the Firefox resource Job 2 claims that it needs an agent with the Linux resource Job 3 claims that it needs an agent with both Firefox and Linux resources Job 4 claims that it doesnt need any resources ltfigure classquotconceptimagequotgt ltimg srcquotimagesconcepts19agentsjobsresourcespngquot altquotFigure 19 Agents jobs and resourcesquot idquotimageagentsjobsresourcesquotgt ltfigcaptiongtFigure 19 Agents jobs and resourcesltfigcaptiongt ltfiguregt In the case of the image above Job 1 can be assigned to either Agents 1 or 3 by the GoCD Server Job 2 can be assigned only to Agent 1 since it is the only agent to provide the Linux resource Job 3 can be assigned only to Agent 1 since it is the only agent to provide both those resources Job 4 can be assigned to any of the three agents since that job needs no special resource matching Note that the fact that Agent 3 has an Apple resource does not stop it from being assigned a job It just happens to be a resource which is not needed by any of the jobs shown lta idquotenvironmentquotgt ltagt Environments An quotEnvironmentquot in GoCD is a way to group and isolate pipelines and agents The rules of an environment are A pipeline can be associated with a maximum of one environment An agent can be associated with multiple environments or no environments An agent can only pick up jobs belonging to pipelines in environments that it is associated with An agent which is associated with an environment cannot pick up jobs in pipelines which are not associated with any environment In the image below representing environments Environment 1 is composed of Pipeline 1 Pipeline 2 Agent 1 Agent 2 and Agent 3 Environment 2 is composed of Pipeline 3 Pipeline 4 Agent 3 and Agent 4 Pipelines 5 6 and 7 and Agent 5 do not belong to any environment ltfigure classquotconceptimagequotgt ltimg srcquotimagesconcepts22environmentpngquot altquotFigure 20 Environmentsquot idquotimageenvironmentsquotgt ltfigcaptiongtFigure 20 Environmentsltfigcaptiongt ltfiguregt In a case such as the image shown above Jobs in Pipelines 1 and 2 can only be picked up by Agents 1 2 and 3 Jobs in Pipelines 3 and 4 can only be picked up by Agents 3 and 4 Jobs in Pipelines 5 6 and 7 can only be picked up Agent 5 In addition to the restrictions related to matching of Environments resources need to match between the agents and jobs as detailed in the section on Resources lta idquotenvironmentvariablesquotgt ltagt Environment Variables Environment variables are often confused with quotEnvironmentsquot Theyre not directly related In GoCD quotEnvironment Variablesquot are userdefined variables that are defined in the configuration These environment variables are made available to tasks just like other environment variables available to processes when they run in an operation system Environment variables can be defined at multiple levels Within environments within pipelines within stages and within jobs They follow a cascading system where environment variables defined at the quotEnvironmentquot level get overridden by environment variables defined at the pipeline level and so on In the image shown below there are 4 environment variables defined at the environment level 3 at the pipeline level and 2 each at the stage and job levels The environment variable ENVENV has been set to a value of 1 at the environment level ENVSTG has been set to 2 at stage level and so on ltfigure classquotconceptimagequotgt ltimg srcquotimagesconcepts23envvarspngquot altquotFigure 21 Environment Variablesquot idquotimageenvvarsquot classquotsmallimagequotgt ltfigcaptiongtFigure 21 Environment Variablesltfigcaptiongt ltfiguregt The environment variables provided to every task in this job will be ENVENV gt 1 ENVPIP gt 2 ENVSTG gt 3 ENVJOB gt 4 MYVAR gt 4 For instance ENVPIP set at the environment level to a value of 1 is overridden by ENVPIP set at the pipeline level to a value of 2 Since ENVPIP is not defined at the stage and job levels the value of ENVPIP will be 2 The other environment variables can be reasoned about in the same way lta idquottemplatesquotgtltagt Templates This section is a work in progress Image attributions Git logo Wikimedia Commons Subversion logo Wikimedia Commons Clock face Wikimedia Commons Console Wikimedia Commons Firefox logo Wikimedia Commons Tux Wikimedia Commons Apple logo Black Wikimedia Commons Gnome text mime Wikimedia Commons Blue folder Wikimedia Commons "},{"title":"Administration","href":"/navigation/administration_page.html","content":"GoCD Administration There are four ways to configure pipelines etc Via the Admin UI described below Direct XML edit via the Admin UIs Config XML tab Configuration is possible via Config API Direct XML edit via the file system By default Go server polls the filesystem every 5 seconds for changes to cruiseconfigxml The location of this file is indicated in the top right corner of the Admin gt Config XML tab Pipelines The quotPipelinesquot tab allows you to configure pipelines grouped in pipeline groups Key Add a new pipeline group Edit the pipeline group name and permissions Delete an empty pipeline group Create a pipeline within a pipeline group Click the pipeline name to select a pipeline to view or edit Click to viewedit a pipeline Move pipeline to another pipeline group Delete a pipeline Pipeline Templates The quotTemplatesquot tab allows you to configure pipeline templates which can be used to templatize pipelines Key Add a new pipeline template Edit the pipeline template As a GoCD Administrator you can now edit permissions for the template to make users Template Administrators Edit a pipeline using this pipeline template Delete an unused pipeline template "},{"title":"Agent Details","href":"/navigation/agent_details.html","content":"Details of a single agent GoCD now provides a page that shows the details of a single agent This page provides details about the agent configuration and the history of all the jobs that ran on that agent Agent Details tab This tab shows the configuration and runtime information of an agent For example this tab shows the free space available on the agent the IP Address and the OS of the agent In terms of configuration this tab shows the resources of the agent and the environment it belongs to A sample Details tab looks as below Job Run History tab You must be logged in as an admin user to configure this step This tab shows a table of all the completed jobs that ran on this agent A sample page is shown below For every job the following columns are shown Pipeline The pipeline to which the job belongs to Stage The stage to which the job belongs to Job The name of the job Result The result of the job Passed Failed Cancelled or Rescheduled Completed The date when the Job completed Duration The duration that the Job took to finish from scheduled till completed The job listing table can be sorted on any column except for the Duration column Using Agent details to debug agent issues This page is useful to figure out if there are agent issues and hence a certain job keeps failing on that agent Consider a job which runs functional tests for a web application that need a browser to be available The job was passing so far and only recently it has started to fail intermittently Here are the steps you can follow to figure out if this is an agent issue Navigate to the Job Details page of the given job that failed Locate the quotAgentquot label and click on the link to the agent Navigate to the quotJob Run Historyquot tab Sort on the Job Name and locate the job that just navigated from Youd notice that the job started to fail recently You can even see if there are other jobs that have started failing around the same time by now sorting on the Completed date"},{"title":"Agents","href":"/navigation/agents_page.html","content":"Agents on GoCD The Agents page lists all the agents available to the server and their current status When an Agent first connects to the Server it is Pending An administrator must enable the Agent before GoCD will schedule work on that agent Administrators can also disable agents GoCD will not schedule work for a disabled Agent If a job is building on the agent when it is disabled that job will be completed the agent is then disabled An administrator will need to enable the Agent before it will again schedule work Administrators can choose to delete an agent which is no longer required The agent must be disabled before it can be deleted An agent in a disabledbuilding or disabledcancelled state cannot be deleted Key Admin users can click here to get to the Agent details of the given agent Filter the agents list By default the table is sorted by the status column The order of sort is pending lost contact missing building idle disabled cancelled Find out how many agents are pending enabled and disabled To delete agents first disable them see point 6 below and then select the agents that you are interested in deleting Then click the DELETE button If you try to delete an agent that is in disabledbuilding or disabledcancelled GoCD will not delete that agent To enable or disable agents first select the agents that you are interested in Then click the ENABLE or DISABLE button If you try to disable an agent that is already disabled or enable an agent that is already enabled GoCD will ignore that change To associate a resource with an agent first select the agents you are interested in Then click the Resources button You are now able to associate new or existing resources with your agents To associate an agent with an environment first select the agents you are interested in Then click the Environments button You are now able to associate your agents with an environment Also see Managing Agents GoCD overview "},{"title":"Environments","href":"/navigation/environments_page.html","content":"Environments on GoCD The quotEnvironmentsquot page displays all environments along with its associated pipelines and materials Key Name of the environment Name of each pipeline associated with the environment A graphical icon informing you if there are new revisions The label name running in the environment for each pipeline when the label was deployed and stage information A graphical status bar of each pipleline broken down by stage and state A collapsable list of all materials associated with each pipeline The rows that are highlighted colored and bold indicate that there are new builds for those materials that are yet to be deployed Buttons to either deploy the latest revisions or specific revisions to an environment Compare what changes have been deployed from a previous version Also see Managing Environments "},{"title":"Job Details","href":"/navigation/job_details_page.html","content":"Job Details in GoCD The quotJob Detailsquot page shows the details of a job within a specific stage Key The quotConsolequot Tab shows the console output of the agent running the job in nearreal time The quotTestsquot Tab shows junit compliant test output After you upload test reports The quotFailuresquot Tab shows any test server compilation or network error associated with a failed job run The quotArtifactsquot Tab shows a collapsible list of the jobs artifacts The quotMaterialsquot Tab shows what activated the pipeline through a list of comments and revisions The quotPropertiesquot Tab shows the list of properties for the job Some properties are GoCD defaults You can also automatically save custom properties The quotCoveragequot Tab is an example of a custom tab You can create custom tabs to view any uploaded artifact Click quotExport property history to spreadsheet csvquot to view a jobs property values over time in an excel compatible format This is useful for charting and graphing various build metrics The Jobs History sidebar lists recent jobs by date and time Each job is highlighted with a passed failed or canceled icon Click the job to view its Job Details information Also See Rerunning jobs "},{"title":"Pipeline Activity","href":"/navigation/pipeline_activity_page.html","content":"Pipeline Activity in GoCD The quotPipeline Activityquot page shows the history of stages for each pipeline label over the life of a specific pipeline Key The revision number and quotTriggered byquot provide a quick look at who activated this pipeline and why Click quotTriggered byquot to show a list of comments and revisions Hover over a stage in the pipeline configuration box to see info and stage rerun icon see points 4 amp 5 for further details This indicates a manual gate which is waiting for approval This could be the case where a stage needs manual approval or when a stage has failed Click the info icon which appears on hovering over the stage to show stage details Upon hovering over a completed stage this button can be used to rerun that particular stage This option rebuilds that stage and continues to build the subsequent stages from there on This indicates a stage that has not yet been run This indicates that the following stage has already been approved to run either manually or automatically Yellow indicates that a stage is in progress This indicates there is a change in configuration such as a stage name update or stage trigger update Also see Stage details GoCD overview "},{"title":"Pipeline Dashboard","href":"/navigation/pipelines_dashboard_page.html","content":"Pipelines Dashboard in GoCD This shows the current activity in the system You can see all the instances of a given pipeline that are currently in progress Key The pipelines are listed under the pipeline group that they belong to You can also edit pipeline group by clicking on settings icon Pipeline instance label defaults to the number of times a pipeline has run Click on each stage segment to see stage details for that stage instance The quotTriggerquot button forces a pipeline to begin build activity The Trigger with Options button allows to pick the revisions of materials that the pipelines should build with and trigger the pipeline The quotPausequot button pauses scheduling of the pipeline If you are a GoCD pipeline group administrator or a super administrator you can now navigate to edit a pipeline by clicking this settings icon on the pipeline dashboard page View to compare any two builds of a pipeline and see exactly what changes happened between those two instances The quotChangesquot shows you the modifications to materials that have been built in this instance The quotquot indicates that the changes are being built for the first time Click the pipeline VSM to see the value stream map of that instance of the pipeline Click the pipeline history to see pipeline activity for that pipeline quottriggered by user name on timequot gives you a quick look at who activated this pipeline and when this was triggered Lets you search for any pipeline configured to be visible on your pipeline dashboard Lets you customize which pipelines are displayed on the dashboard See below for more details Personalize pipelines view You can customize and control the pipelines you see on the dashboard by using the quotPersonalizequot button on your dashboard You can choose which pipelines you want to see in this list and save your selection by clicking on the quotApplyquot button From that point onwards the pipelines dashboard will only show your selections However at a later point if a new pipeline is added by someone else that pipeline shows up on your dashboard as well Uncheck the quotShow newly created pipelinesquot checkbox to prevent them from showing up on your dashboard Pipelines created by you using the pipeline creation wizard will always be shown on your dashboard You can remove them from your view after they are created Also see Pipeline activity Job details Clean up after canceling a task GoCD overview "},{"title":"Server Details","href":"/navigation/server_details_page.html","content":"GoCD Server Details The quotServer Detailsquot page describes the GoCD server version and environment This box lists all the server Information"},{"title":"Stage Details","href":"/navigation/stage_details_page.html","content":"Stage Details in GoCD The quotStage Detailsquot page displays details of a specific stage Key Name of the stage The jobs in this stage are grouped by status Passed Failed Cancelled In Progress Expand these sections to see the jobs Cancelled job Click the job name to view job details for that job Failed jobs Click the job name to view details for that job Displays a graphical visualization of the pipeline dependency chain Details of a specific stage run run number status when it was triggered who triggered it and duration of the stage Lists all the material changes that were part of the build in this stage Displays detailed information about the jobs in this stage Shows the failed build history for tests failing in the stage quotStage Historyquot shows the status and the pipeline label in which this stage has run The latest 10 are shown by default The rest are paginated the user can select to view the details of this particular stage in any of the pipeline instances This will indicate if the stage was a rerun and show the stage counter Click on the stage instance in the stage history section to view the stage details page for that stage RSS feed for the stage in Atom format Failed Build History Results of test runs from jobs within a stage are aggregated up to the stage level Failures are listed under the relevant pipeline instance label Tests listed are ones that are failing in the stage instance currently being viewed The tests are grouped by pipeline instance in which they started to fail and are still failing This gives you information about which users checkins are responsible for test failures On clicking the quotChangesquot link next to the Pipeline Label the popup shows you the modifications to materials that are built in this instance of the pipeline All the stage instances till the time this stage was last seen green are listed in the failed build history The pipelines are sorted by natural ordering Test Failures in the current stage Other information that the quotTestsquot tab on the quotStage Detailsquot page shows Image not annotated Total number of tests run Total number of failures Total number of errors Failing test names grouped by the test suites in which they ran Details link next to each of the job names which gives a popup with the failureerror message with a stack trace caused by the test Users whose checkins are responsible for the failing test in a given instance Pipeline labels where the currently failing tests started failing and are still failing in the instance being viewed The names of the jobs in which the test ran Clicking on the job name will take you to the job details page Shows modifications which caused the stage instance to be triggered Shows the failure message and stack trace for the test failureerror for that job Example 1 You are viewing stage Dev of pipeline label 60 The pipeline has been failing since label 59 There are currently 4 failing tests This is how they are listed 60 has 3 failing test all of which started failing in 60 59 and 58 are listed because the dev stage failed but none of the currently failing tests started failing because of the changes in 59 or 58 This could be because the tests that were failing in 59 got fixed by the checkins in 60 But these checkins broke other tests Or this could be because none of the test ran in 59 and 58 an error occurred before the tests started running The pipeline instances are listed in natural order In this case the schedule and natural order are the same Example 2 You are viewing stage Dev of pipeline label 59 The pipeline has been failing since label 65 There are currently 6 failing tests This is how they are listed The natural order of pipelines is 61 60 65 59 58 57 56 55 This is the order in which they are listed 65s changes caused 2 failing test which are still failing in 61 instance being viewed 60 had 1 new failing test which is still failing in 61 61 has 3 newly failing tests None of the currently failing tests started failing in 59 58 57 56 or 55 If there are no tests configured in the stage or GoCD is still computing results this is the message that is displayed Also See Job details Rerunning jobs Historical Configuration "},{"title":"Value Stream Map","href":"/navigation/value_stream_map.html","content":"GoCD Value Stream Map Introduction Value Stream Map helps you visualize your CICD workflow With a single click it allows you to trace a commit from when it is checked in up to when it is deployed A value stream map can be drawn for every instance of a pipeline It provides you with the ability to See what caused the current pipeline to be triggered See what downstream pipelines were triggered by the current pipeline See the status of the current pipeline and all its upstream and downstream dependencies See changes in dependencies of the pipeline across different runs of it Along with all this it also allows you to easily debug problems when a dependencyconfiguration change caused your buildtestrelease setup to break Understanding the Value Stream Map The Value Stream Map is laid out as an endtoend dependency graph The graph originates from source control materials and flows from left to right The pipeline instance for which the Value Stream Map is being viewed is the main pipeline and is highlighted Everything to the left of this pipeline are its upstream dependencies ie all the materials that have contributed to this instance Everything to the right are its downstream dependencies ie all the pipelines that it can potentially trigger or contribute to Upstream Dependencies The upstream dependencies of the main pipeline are taken from history and show all the source control and pipeline dependency materials that have contributed to the main pipeline Even when the GoCD Configuration changes after a certain instance of a pipeline its upstream dependency graph will continue to reflect the older configuration with which it was run This also means that it would display pipelines that do not exist in the configuration any more Let us assume that instance 1 of pipeline Build is as below If the configuration changes to replace the pipeline Services with 2 pipelines Service1 and Service2 the next instance of pipeline Build would reflect the change Value Stream Map of pipeline Build with counter 1 would look as below Downstream Dependencies The downstream dependencies of the main pipeline instance indicate what can happen with it This information is always taken from the latest configuration Pipelines that have not run yet are also shown If Environment1 is removed from the configuration the Value Stream Map for the same instance of Build would look as below Multiple Pipeline Instances A pipeline could be retriggered multiple times with the same revision In such cases all the instances are shown in descending order against that pipeline In the below example Deploy has been triggered thrice with counter 2 of pipeline FunctionalTests Viewing the Value Stream Map Every pipeline label in GoCD directs you to the value stream map of that instance of the pipeline You can access Value Stream Map for a commit in 2 ways Permissions The permissions required to view a value stream map are as follows GoCD Administrators have access to the value stream maps of all the pipelines that are configured Users with view permissions for a pipeline will be able to view the value stream map for all instances of that pipeline However there is one special case to be noted where the pipeline details might not be shown completely If the user does not have view permissions for a pipeline in the Value Stream Map its details like the stages and instances run will not be shown If you are using Internet Explorer as your browser please note that Value Stream Map is supported with only versions 9 and above"},{"title":"Release History","href":"/release_history/whats_new_in_go.html","content":"Whats new in GoCD GoCD has changed its release naming convention from the previous practice of majorminorbugfix nomenclature The major version will now be the year of release YY The minor version n will indicate the nth release for the year For ex 132 will be the second release in 2013"}]